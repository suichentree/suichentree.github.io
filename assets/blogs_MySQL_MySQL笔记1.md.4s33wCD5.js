import{_ as a,c as i,o as n,ak as l}from"./chunks/framework.CmzJUe0_.js";const p="/assets/mysql_20231223222722.BX2MLVqr.png",e="/assets/docker_20231012012413.DqoSdlnt.png",t="/assets/mysql_20231223233542.b_ZBwZqO.png",m=JSON.parse('{"title":"MySQL笔记1","description":"","frontmatter":{"title":"MySQL笔记1","date":"2023-07-13T00:00:00.000Z","sidebar":"auto","categories":["数据库"],"tags":["MySql"]},"headers":[],"relativePath":"blogs/MySQL/MySQL笔记1.md","filePath":"blogs/MySQL/MySQL笔记1.md"}'),h={name:"blogs/MySQL/MySQL笔记1.md"};function k(o,s,c,r,d,y){return n(),i("div",null,s[0]||(s[0]=[l(`<p>[toc]</p><h1 id="mysql笔记1" tabindex="-1">MySQL笔记1 <a class="header-anchor" href="#mysql笔记1" aria-label="Permalink to &quot;MySQL笔记1&quot;">​</a></h1><h2 id="数据库是什么" tabindex="-1">数据库是什么？ <a class="header-anchor" href="#数据库是什么" aria-label="Permalink to &quot;数据库是什么？&quot;">​</a></h2><p>数据库（Database）指长期存储在计算机内的、有组织的、可共享的数据集合。通俗的讲，数据库就是存储数据的地方。</p><p>数据库实际上就是一个文件集合，是一个存储数据的仓库，本质就是一个文件系统，数据库是按照特定的格式把数据存储起来，从而让用户可以对存储的数据进行增删改查操作。</p><p>数据库管理系统（DBMS）是位于用户与操作系统之间的数据管理软件，用于建立，使用和维护数据库。它的主要功能包括数据定义、数据操作、数据库的运行管理、数据库的建立和维护等几个方面。</p><p>我们常说XX数据库，实质上是XX数据库管理系统。目前，较为流行的数据库管理系统有 MySQL、SQL Server、Oracle 等。</p><h2 id="数据库的分类" tabindex="-1">数据库的分类 <a class="header-anchor" href="#数据库的分类" aria-label="Permalink to &quot;数据库的分类&quot;">​</a></h2><p>数据库有两种类型，分别是关系型数据库和非关系型数据库。</p><h3 id="关系型数据库" tabindex="-1">关系型数据库 <a class="header-anchor" href="#关系型数据库" aria-label="Permalink to &quot;关系型数据库&quot;">​</a></h3><p>关系型数据库是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。简单说，关系型数据库是由多张能互相连接的表组成的数据库。</p><p>优点</p><ul><li>都是使用表结构，格式一致，易于维护。</li><li>使用通用的 SQL 语言操作，使用方便，可用于复杂查询。</li><li>数据存储在磁盘中，安全。</li></ul><p>缺点</p><ul><li>读写性能比较差，不能满足海量数据的高效率读写。</li><li>不节省空间。因为建立在关系模型上，就要遵循某些规则，比如数据中某字段值即使为空仍要分配空间。</li><li>固定的表结构，灵活度较低。</li></ul><p>常见的关系型数据库有 Oracle、DB2、PostgreSQL、Microsoft SQL Server、Microsoft Access 和 MySQL 等。</p><h3 id="非关系型数据库" tabindex="-1">非关系型数据库 <a class="header-anchor" href="#非关系型数据库" aria-label="Permalink to &quot;非关系型数据库&quot;">​</a></h3><p>非关系型数据库又被称为 NoSQL（Not Only SQL )，意为不仅仅是 SQL。通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。</p><p>优点</p><ul><li>非关系型数据库存储数据的格式可以是 key-value 形式、文档形式、图片形式等。使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</li><li>速度快，效率高。 NoSQL 可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘。</li><li>海量数据的维护和处理非常轻松。</li><li>非关系型数据库具有扩展简单、高并发、高稳定性、成本低廉的优势。</li><li>可以实现数据的分布式处理。</li></ul><p>缺点</p><ul><li>非关系型数据库暂时不提供 SQL 支持，学习和使用成本较高。</li><li>非关系数据库没有事务处理，没有保证数据的完整性和安全性。适合处理海量数据，但是不一定安全。</li><li>功能没有关系型数据库完善。</li></ul><p>常见的非关系型数据库有 Neo4j、MongoDB、Redis、Memcached、MemcacheDB 和 HBase 等。</p><h2 id="mysql是什么" tabindex="-1">MySQL是什么？ <a class="header-anchor" href="#mysql是什么" aria-label="Permalink to &quot;MySQL是什么？&quot;">​</a></h2><p>MySQL 是最流行的数据库之一，是一个免费开源的关系型数据库管理系统。MySQL 适合中小型软件，被个人用户以及中小企业青睐。</p><p>针对不同的用户，MySQL分为两个版本：</p><ul><li>MySQL Community Server（社区版）：该版本是自由下载且完全免费的，但是官方不提供技术支持。</li><li>MySQL Enterprise Server（企业版）：该版本是收费的，而且不能下载，但是该版本拥有完善的技术支持。</li></ul><blockquote><p>MySQL的特点</p></blockquote><ul><li>MySQL 是开放源代码的免费的数据库。</li><li>MySQL 是开放源代码的数据库，不仅在 Windows上运行，还可以在 UNIX、Linux 和 Mac OS 等操作系统上运行。</li><li>MySQL 是一个真正的多用户、 多线程 SQL 数据库服务器。</li></ul><h2 id="mysql的安装与配置" tabindex="-1">MySQL的安装与配置 <a class="header-anchor" href="#mysql的安装与配置" aria-label="Permalink to &quot;MySQL的安装与配置&quot;">​</a></h2><p>在 Windows 操作系统下，MySQL 数据库的安装包分为图形化界面安装和免安装这两种安装包。</p><ul><li>图形化界面安装包有完整的安装向导，安装和配置很方便。</li><li>免安装的安装包直接解压即可使用，但是配置起来不方便。</li></ul><p>关于MySQL的安装和配置，自行百度</p><h2 id="mysql的初步使用" tabindex="-1">Mysql的初步使用 <a class="header-anchor" href="#mysql的初步使用" aria-label="Permalink to &quot;Mysql的初步使用&quot;">​</a></h2><p>当安装mysql后，mysql服务便运行在系统中。此时我们可以通过命令行来登录 MySQL 数据库并通过命令来操控数据库。</p><p><span style="color:red;">注意-u 与 root之间可以有空格也可以没有空格，但是密码前必须没有空格。-h可以不写，默认为127.0.0.1</span></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 登录Mysql:</span></span>
<span class="line"><span>格式： mysql -h主机地址 -u用户名 －p用户密码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt; mysql -u root -p</span></span>
<span class="line"><span>&gt; Enter password:密码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>若连接远程主机</span></span>
<span class="line"><span>(如果远程主机的IP为110.110.110.110，用户名为root,密码为abcd123)</span></span>
<span class="line"><span>&gt; mysql -h110.110.110.110 -u root -p abcd123;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.退出mysql命令模式</span></span>
<span class="line"><span>mysql&gt;exit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3.修改密码:</span></span>
<span class="line"><span>格式：mysqladmin -u用户名 -p旧密码 password 新密码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt;mysqladmin -uroot -pabcd123 password abcd456;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4.创建数据库</span></span>
<span class="line"><span>mysql&gt; create database 数据库名;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. 显示数据库，修改数据库默认编码:</span></span>
<span class="line"><span>mysql&gt; show databases;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>6.删除数据库</span></span>
<span class="line"><span>mysql&gt; drop database 数据库名;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7. 连接或切换数据库(用于在命令行中对其他数据库进行操作)：</span></span>
<span class="line"><span>mysql&gt; use 数据库名;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>8.显示当前使用的数据库名称：</span></span>
<span class="line"><span>mysql&gt; select database();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>9.显示MYSQL的版本</span></span>
<span class="line"><span>mysql&gt; select version(); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>10.显示当前时间:</span></span>
<span class="line"><span>mysql&gt; select now(); </span></span>
<span class="line"><span>mysql&gt; SELECT YEAR(CURRENT_DATE);    ##显示年月日</span></span>
<span class="line"><span>mysql&gt; SELECT MONTH(CURRENT_DATE); </span></span>
<span class="line"><span>mysql&gt; SELECT DAYOFMONTH(CURRENT_DATE); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>11.显示字符串：</span></span>
<span class="line"><span>mysql&gt; SELECT &quot;welecome to my blog!&quot;; </span></span>
<span class="line"><span></span></span>
<span class="line"><span>12.当计算器用:</span></span>
<span class="line"><span>mysql&gt; select ((4 * 4) / 10 ) + 25;</span></span></code></pre></div><h2 id="mysql常用图形化管理工具" tabindex="-1">MySQL常用图形化管理工具 <a class="header-anchor" href="#mysql常用图形化管理工具" aria-label="Permalink to &quot;MySQL常用图形化管理工具&quot;">​</a></h2><p>MySQL 图形化管理工具极大地方便了数据库的操作与管理，常用的图形化管理工具还有 MySQL Workbench、phpMyAdmin、Navicat、MySQLDumper、SQLyog、MySQL ODBC Connector。</p><blockquote><p>MySQL Workbench</p></blockquote><p>MySQL Workbench MySQL 是官方提供的图形化管理工具，分为社区版和商业版，社区版完全免费，而商业版则是按年收费。支持数据库的创建、设计、迁移、备份、导出和导入等功能，并且支持 Windows、Linux 和 mac 等主流操作系统。</p><blockquote><p>phpMyAdmin</p></blockquote><p>phpMyAdmin 是最常用的 MySQL 维护工具，使用 PHP 编写，通过 Web 方式控制和操作 MySQL 数据库，是 Windows 中 PHP 开发软件的标配。通过 phpMyAdmin 可以完全对数据库进行操作，例如建立、复制、删除数据等。管理数据库非常方便，并支持中文，不足之处在于对大数据库的备份和恢复不方便，对于数据量大的操作容易导致页面请求超时。</p><blockquote><p>Navicat</p></blockquote><p>Navicat MySQL 是一个强大的 MySQL 数据库服务器管理和开发工具。它可以与任何版本的 MySQL 一起工作，支持触发器、存储过程、函数、事件、视图、管理用户等。对于新手来说也易学易用。Navicat 使用图形化的用户界面（GUI），可以让用户用一种安全简便的方式来快速方便地创建、组织、访问和共享信息。Navicat 支持中文，有免费版本提供。</p><blockquote><p>SQLyog</p></blockquote><p>SQLyog 是一款简洁高效、功能强大的图形化管理工具。SQLyog 操作简单，功能强大，能够帮助用户轻松管理自己的 MySQL 数据库。SQLyog 中文版支持多种数据格式导出，可以快速帮助用户备份和恢复数据，还能够快速地运行 SQL 脚本文件，为用户的使用提供便捷。使用 SQLyog 可以快速直观地让用户从世界的任何角落通过网络来维护远端的 MySQL 数据库。</p><h2 id="在docker环境中安装mysql容器" tabindex="-1">在docker环境中安装MySQL容器 <a class="header-anchor" href="#在docker环境中安装mysql容器" aria-label="Permalink to &quot;在docker环境中安装MySQL容器&quot;">​</a></h2><p>在windows系统中，安装docker环境，并在docker环境中安装mysqL容器。</p><p>步骤① 先安装docker环境，自行百度。</p><p>步骤② 下载mysql镜像文件。最新版或某个版本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载mysql 8.0.20版本的镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql:8.0.20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><p>步骤③：创建并启动mysql容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建mysql容器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --name=&quot;myMySQL&quot; myMySQL是容器的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -d 后台启动</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -e MYSQL_ROOT_PASSWORD=123456 , -e 设置环境变量。此处是设置mysql密码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -p 33306:3306 , 宿主机的33306端口映射到容器的3306端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -v 设置容器数据卷</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /d/DockerVolumes/mysql/log 是宿主机目录 /var/log/mysql 是容器存放日志信息的目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /d/DockerVolumes/mysql/data 是宿主机目录 /var/lib/mysql 是容器存放数据库数据的目录</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /d/DockerVolumes/mysql/conf.d 是宿主机目录 /etc/mysql/conf.d 是容器存放配置文件的目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 33306:3306</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myMySQL&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MYSQL_ROOT_PASSWORD=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123456</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/mysql/log:/var/log/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/mysql/data:/var/lib/mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/mysql/conf.d:/etc/mysql/conf.d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql:8.0.20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询容器日志，看是否成功启动。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myMySQL</span></span></code></pre></div><p>由于宿主机的操作系统是windows，因此<code>/d/DockerVolumes/</code>是指D盘中的DockerVolumes目录。如果宿主机操作系统是linux,请自行选择宿主机目录。</p><p>步骤④：进入到mysql容器中</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入到容器中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myMySQL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入到mysql命令行模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p123456</span></span></code></pre></div><p><img src="`+p+`" alt="mysql_20231223222722.png"></p><h3 id="解决docker中的mysql容器的中文字符编码问题" tabindex="-1">解决docker中的mysql容器的中文字符编码问题 <a class="header-anchor" href="#解决docker中的mysql容器的中文字符编码问题" aria-label="Permalink to &quot;解决docker中的mysql容器的中文字符编码问题&quot;">​</a></h3><ol><li>先进入到mysql容器的mysql终端中，容器名称为myMySQL</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先进入到容器终端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myMySQL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 登录进入到mysql终端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p123456</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询mysql的字符集</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> variables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;character%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">show</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> variables</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;collation%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+e+`" alt="docker_20231012012413.png"></p><p>如图所示，由于在mysql容器中的字符编码不是utf8。因此我们需要重新设置mysql的字符编码。由于上面创建mysql容器的时候设置了容器数据卷。因此可以直接在宿主机的conf.d目录中创建my.cnf配置文件即可。</p><ol><li>在conf.d目录中创建my.cnf配置文件。并添加字符编码配置。</li></ol><p>不同版本的mysql的修改字符编码的方式不同。下面是mysql 8.0.20版本的配置写法。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">init-connect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SET collation_connection=utf8mb4_0900_ai_ci&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">init_connect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SET NAMES utf8mb4&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">skip-character-set-client-handshake</span></span></code></pre></div><ol start="3"><li>重新启动mysql容器，让配置文件生效。</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重启容器，</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myMySQL</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意如果配置文件错误，会导致容器重启失败。此时可以查询docker容器日志来寻找原因。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询mysql01容器的日志信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myMySQL</span></span></code></pre></div><ol start="4"><li>如图所示，字符编码改为了utf8mb4。</li></ol><p><img src="`+t+'" alt="mysql_20231223233542.png"></p>',70)]))}const F=a(h,[["render",k]]);export{m as __pageData,F as default};
