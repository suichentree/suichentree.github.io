import{_ as i}from"./chunks/20221031112704.CA3nfC0x.js";import{_ as a,c as n,o as l,ak as p}from"./chunks/framework.CmzJUe0_.js";const t="/assets/java_20230620154519.Car1eShI.png",h="/assets/java_img_9.CD_XNOPZ.png",k="/assets/java_img_11.Cjmzzfc2.png",e="/assets/java_img_13.CIpI5pUA.png",r="/assets/java_img_14.CK1Vn1JC.png",d="/assets/java_img_12.Cn471JEJ.png",E="/assets/java_img_17.DGF-DlJH.png",g="/assets/java_img_18.CvmoRNoh.png",o="/assets/java_img_19.C-vy3Njo.png",y="/assets/java_20230624145826.21o4WTSW.png",c="/assets/java_img_21.MiJ_De1t.png",F="/assets/java_img_22.CKyK68vO.png",f=JSON.parse('{"title":"Java笔记2-基础语法","description":"","frontmatter":{"title":"Java笔记2-基础语法","date":"2023-06-16T00:00:00.000Z","sidebar":"auto","categories":["Java"]},"headers":[],"relativePath":"blogs/Java/Java笔记2-基础语法.md","filePath":"blogs/Java/Java笔记2-基础语法.md"}'),u={name:"blogs/Java/Java笔记2-基础语法.md"};function A(b,s,D,v,m,C){return l(),n("div",null,s[0]||(s[0]=[p(`<p>[toc]</p><h1 id="java笔记2-基础语法" tabindex="-1">Java笔记2-基础语法 <a class="header-anchor" href="#java笔记2-基础语法" aria-label="Permalink to &quot;Java笔记2-基础语法&quot;">​</a></h1><p>这篇文章主要是对自己的java语言知识的梳理。</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>这里先简单的讲下java的一些基本概念。</p><p>java中的所有程序代码都必须放在类中。每一个类代表每一个.java文件。许多个.java文件组成一个包。每个包相当于一个功能模块，许多个功能模块组合在一起组成了一个系统。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 第一个Java程序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 它将打印字符串 Hello World</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 Hello World</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this is a&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;java 程序&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这是正确示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>编写java代码注意：</p></blockquote><ol><li>java程序中每条完整的语句都必须用分号（;）结束。</li><li>java程序中，可以用 + 号把多个字符串连起来。</li><li>类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass</li><li>方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。例如 myFirstJava</li><li>源文件名(.java文件名)必须和公共类名（public class 类名）相同。</li><li>主方法入口:所有的Java 程序由public static void main(String []args)方法开始执行.</li></ol><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><p>java程序中，类名、变量名以及方法名等其他定义的名称都被称为标识符。</p><p>关于Java标识符，有以下几点需要注意：</p><ol><li>标识符的首个字符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开头。</li><li><span style="color:red;">不能以数字作为首字符</span></li><li>首字符之后可以是字母（A-Z或者a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>java自带的关键字不能用作标识符.</li><li>标识符是大小写敏感的，因此 myvar 和 MyVar 是两个不同的标识符。</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ol><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><p>关键字是具有专门的意义和用途的标识符。在java语言中存在一些关键字，和自定义的标识符不同，不能当作一般的标识符来使用。</p><p><span style="color:red;">关键字不能作为变量名、类名和方法名来使用，所有的关键字都是小写的。</span></p><p>Java 语言目前定义了 51 个关键字。以下对这些关键字进行了分类。</p><ul><li>数据类型：boolean、int、long、short、byte、float、double、char、class、interface。</li><li>流程控制：if、else、do、while、for、switch、case、default、break、continue、return、try、catch、finally。</li><li>修饰符：public、protected、private、final、void、static、strict、abstract、transient、synchronized、volatile、native。</li><li>动作：package、import、throw、throws、extends、implements、this、supper、instanceof、new。</li><li>保留字：true、false、null、goto、const。</li></ul><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>Java 支持以下三种注释方式。</p><ol><li>单行注释: 以双斜杠“//”标识，只能注释一行内容</li><li>多行注释: 包含在“/<em>”和“</em>/”之间，能注释很多行的内容。</li><li>文档注释: 包含在“/**”和“*/”之间，也能注释多行内容,一般用在类、方法和变量上面，用来描述其作用。注释后，鼠标放在类和变量上面会自动显示出我们注释的内容。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 文档注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 可以注释多行内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//这是单行注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this is example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        * int b=10;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        * int c=10;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		这是多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		可以注释多行内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this is example2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="_8种基础数据类型" tabindex="-1">8种基础数据类型 <a class="header-anchor" href="#_8种基础数据类型" aria-label="Permalink to &quot;8种基础数据类型&quot;">​</a></h3><span style="color:red;"> 在java中，定义变量时必须先声明变量的数据类型。 </span><p>java定义了以下8种数据类型</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; 整数类型（byte ， short ， int , long）</span></span>
<span class="line"><span>&gt; byte ：占1个字节（8位），范围：-128（-2^7）~ 127（2^7-1）</span></span>
<span class="line"><span>&gt; short ：占2个字节（16位），范围：-32768（-2^15）~ 32767（2^15 - 1）</span></span>
<span class="line"><span>&gt; int : 占4个字节（32位），范围: -2^31 ~ 2^31 - 1</span></span>
<span class="line"><span>&gt; long : 占8个字节（64位），范围：-2^63 ~ 2^63 -1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt; 浮点数类型（float ， double）</span></span>
<span class="line"><span>&gt; float : 占4个字节（32位）,用于存储小数数值。</span></span>
<span class="line"><span>&gt; double : 占8个字节（64位），既可以存储小数，也可以存储整数。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt; 字符型（char）</span></span>
<span class="line"><span>&gt; char : 占2个字节（16位），用于存储一个单一的字符，最小值是 \\u0000（即为0）；最大值是 \\uffff（即为65,535）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt; 布尔型（boolean）</span></span>
<span class="line"><span>&gt; boolean : 占1个字节（8位），只有两个取值：true 和 false；</span></span></code></pre></div><p><img src="`+i+`" alt="20221031112704.png"></p><ul><li>字节是存储容量的基本单位。字符是数字，字母，汉字以及其他语言的各种符号。</li><li>1字节占8个二进制单位。</li><li>一个二进制单位可以表现0,1两种状态。</li></ul><p>由于计算机是补码计算的原因，所以最高位二进制单位用来代表正负号，所以byte占1个字节（8位二进制单位）但是只能用7个二进制单位来表示0和1，所以byte的取值范围是-128（-2^7）~ 127（2^7-1）</p><p>例子</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//为long类型变量赋值时，需在数值的后面加上大写的L，表示该类型为long类型。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 234.5f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//为float类型变量赋值时，需在数值的后面加上F或f，表示该类型为float类型。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> one </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="基础数据类型之间的转换" tabindex="-1">基础数据类型之间的转换 <a class="header-anchor" href="#基础数据类型之间的转换" aria-label="Permalink to &quot;基础数据类型之间的转换&quot;">​</a></h4><p><span style="color:red;">在java程序中，一种基础数据类型的值赋给另一种基础数据类型的变量时，需要进行数据类型转换。</span></p><p>数据类型转换有两种方式：</p><ul><li>自动类型转换，目标数据类型的范围大于源数据类型的范围时。</li><li>强制类型转换，当两种类型彼此不兼容，或者目标数据类型的范围小于源数据类型时，需要使用强制类型转换。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//下面是自动类型转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// byte -&gt; int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//下面是强制数据类型转换的写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">122</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)c;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//int -&gt; byte , 会导致数据精度的损失。</span></span></code></pre></div><p>数据类型转换规则：</p><ul><li>整型、浮点型、字符型数据可以进行混合运算。它们会先转化为范围最大的类型，然后进行运算。</li><li>不能对boolean类型进行类型转换</li><li>容量大的类型转换为容量小的类型时必须使用强制类型转换.</li><li>转换过程中可能导致数据溢出或损失精度.</li></ul><h3 id="_3种引用数据类型" tabindex="-1">3种引用数据类型 <a class="header-anchor" href="#_3种引用数据类型" aria-label="Permalink to &quot;3种引用数据类型&quot;">​</a></h3><p>引用数据类型有3种：类(class)，接口(interface)，数组([])</p><h2 id="字节与补码" tabindex="-1">字节与补码 <a class="header-anchor" href="#字节与补码" aria-label="Permalink to &quot;字节与补码&quot;">​</a></h2><h3 id="什么是字节" tabindex="-1">什么是字节？ <a class="header-anchor" href="#什么是字节" aria-label="Permalink to &quot;什么是字节？&quot;">​</a></h3><p>要了解什么是字节？要先了解计算机内存的基本结构。</p><p>计算机内存的最小存储单元是字节（byte），一个字节就是一个8位二进制数，即8个bit。它的二进制表示范围从00000000 ~ 11111111，换算成十进制是0 ~ 255。</p><p>8个二进制数是1个字节，一个字节是1byte，1024字节是1K，1024K是1M，1024M是1G，1024G是1T。</p><h3 id="为什么8个字节的byte范围是-128-127" tabindex="-1">为什么8个字节的byte范围是-128 ~ 127？ <a class="header-anchor" href="#为什么8个字节的byte范围是-128-127" aria-label="Permalink to &quot;为什么8个字节的byte范围是-128 ~ 127？&quot;">​</a></h3><p>byte占1个字节，1个字节占8个二进制单位。8个字节按理来所可以表示0 ~ 255 （2^8 - 1）。为什么byte的实际取值范围是-128（-2^7）~ 127（2^7-1）?</p><p>因为计算机是以补码形式储存数据的。所以最高位的二进制单位需要用来表示正负符号（0表示正数，1表示负数）。所以byte只能用7个二进制单位来表示0和1，所以byte的数据范围就是-128（-2^7）~ 127（2^7-1）</p><h3 id="为什么计算机用补码来存储数据" tabindex="-1">为什么计算机用补码来存储数据？ <a class="header-anchor" href="#为什么计算机用补码来存储数据" aria-label="Permalink to &quot;为什么计算机用补码来存储数据？&quot;">​</a></h3><p>计算机之所以是以补码形式存储数据，是为了简化计算机基本运算电路，使加减法都只需要通过加法电路实现。比如5-3=5+（-3），补码情况下正数和负数可以直接相加。</p><p><img src="`+t+`" alt="java_20230620154519"></p><p>如上图1为00000001,因为1+(-1)必须等于0,那-1只能为11111111,11111111+00000001=00000000。</p><p>总结：补码形式存储数据，可以让加减法都通过加法电路来计算。</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><blockquote><p>什么是变量？ 变量是用来描述一条信息的别名，可以在程序代码中使用一个或多个变量。变量中可以存储各种类型的信息，如登录信息、版本名称、文件的大小、某个英文单词以及飞机票价格等。</p></blockquote><p><span style="color:red;">注意：变量的值在程序运行期间可以被修改。</span></p><h3 id="定义变量" tabindex="-1">定义变量 <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;定义变量&quot;">​</a></h3><p>在java中可以通过指定数据类型和变量名称来定义变量。</p><p><span style="color:red;">注意变量名称必须符合标识符的命名规范。</span></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义变量的语法： </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数据类型 变量名称；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//为long类型变量赋值时，需在数值的后面加上大写的L，表示该类型为long类型。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 234.5f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//为float类型变量赋值时，需在数值的后面加上F或f，表示该类型为float类型。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="变量赋值" tabindex="-1">变量赋值 <a class="header-anchor" href="#变量赋值" aria-label="Permalink to &quot;变量赋值&quot;">​</a></h3><p>初始化变量有两种方式：一种是声明时直接赋值，一种是先声明、后赋值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义变量one</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> one;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义变量two并赋初值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> two </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明并初始化多个变量,多个变量中间要使用逗号分隔。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,num2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,num3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+h+'" alt="9"></p><span style="color:red;"> 在内存中的表现是：程序首先取出变量a的值，与3相加后，把结果赋值给变量c。 </span><h3 id="变量的作用域" tabindex="-1">变量的作用域 <a class="header-anchor" href="#变量的作用域" aria-label="Permalink to &quot;变量的作用域&quot;">​</a></h3><p>变量的作用域规定了变量所能使用的范围，只有在作用域范围内变量才能被使用。根据变量声明地点的不同，变量的作用域也不同。</p><p>如下图展示 <img src="'+k+'" alt="11"></p><span style="color:red;"> 变量一定会定义在某一对大括号中，这个大括号包括的区域就是该变量的作用域。 </span><h3 id="变量的种类" tabindex="-1">变量的种类 <a class="header-anchor" href="#变量的种类" aria-label="Permalink to &quot;变量的种类&quot;">​</a></h3><p>变量根据作用域的不同，可以分为不同的类型：成员变量（实例变量）,静态变量（类变量）和局部变量。</p><h4 id="成员变量-实例变量" tabindex="-1">成员变量（实例变量） <a class="header-anchor" href="#成员变量-实例变量" aria-label="Permalink to &quot;成员变量（实例变量）&quot;">​</a></h4><p>成员变量（定义在方法体和语句块之外，作用域是整个类）</p><ol><li>成员变量声明在类中，但在类的方法外；</li><li>成员变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>成员变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型的成员变量的默认值是null。 <img src="'+e+'" alt="13"></li></ol><h4 id="静态变量-类变量" tabindex="-1">静态变量（类变量） <a class="header-anchor" href="#静态变量-类变量" aria-label="Permalink to &quot;静态变量（类变量）&quot;">​</a></h4><p>静态变量（类变量，定义在方法体和语句块之外，作用域是整个类）：</p><ol><li>静态变量就是以static修饰符声明的成员变量。</li><li>数值型默认值是0，布尔型默认值是false，引用类型默认值是null。</li><li>静态变量是属于类的，所有的实例化对象是共享这一份静态变量的。</li></ol><p><img src="'+r+'" alt="14"></p><h4 id="局部变量" tabindex="-1">局部变量 <a class="header-anchor" href="#局部变量" aria-label="Permalink to &quot;局部变量&quot;">​</a></h4><p>局部变量（方法或代码块内部定义的变量，其作用域是其所在的方法或代码块）</p><ol><li>局部变量声明在方法中或者代码块中.</li><li>局部变量在方法、代码块被执行的时候创建，当方法或代码块执行完成后，局部变量也会被销毁；</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。 <img src="'+d+`" alt="12"></li></ol><h2 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h2><p>常量是指在程序的整个运行过程中值保持不变的变量。</p><p>在定义常量的同时要赋予一个初始值。常量一旦初始化就不可以被修改,一旦修改程序就会编译错误。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义常量语法：final 数据类型 常量名称 = 初始值;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//例子</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 静态常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明成员常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 声明局部常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>运算符是控制变量与变量之间如何进行运算。运算符有以下几种：</p><blockquote><p>1.算术运算符:</p></blockquote><p><img src="`+E+'" alt="17"></p><p>前缀(++a,--a): 先进行自增或者自减运算，再进行表达式运算。 后缀(a++,a--): 先进行表达式运算，再进行自增或者自减运算.</p><blockquote><p>2.关系运算符:</p></blockquote><p><img src="'+g+'" alt="18"></p><blockquote><p>3.位运算符:</p></blockquote><p><img src="'+o+'" alt="19"></p><p><code>&lt;&lt;</code> 左移运算符</p><p>例如：3 &lt;&lt; 2。 3的二进制是0000 0011。3&lt;&lt;2 就是相当于把二进制由有效数字，向左移动2位，空位补零。得到的最终结果是0000 1100。转换为十进制数字是12。</p><p>简而言之，左移预算符 n &lt;&lt; m。相当于 n乘以2的m次方。</p><p><code>&gt;&gt;</code>右移运算符</p><p>例如：35 &gt;&gt; 2。35转换为二进制：0010 0011。35 &gt;&gt; 2 相当于把二进制的有效数组向右移动2位，超出的舍弃，空位补零。得到的最终结果是0000 1000。转换为十进制数字是8。</p><p>简而言之，左移预算符 n &gt;&gt; m。相当于 n除以2的m次方。</p><blockquote><p>4.逻辑运算符：</p></blockquote><p><img src="'+y+'" alt="java_20230624145826.png"></p><p>&amp;&amp;（短路与） 与 &amp;（逻辑与）区别：</p><ul><li>逻辑与：当a为false时，还要计算b</li><li>短路与: 当a为false，则不计算 b（因为不论 b 为何值，结果都为 false）</li></ul><p>||（短路或） 与 |（逻辑或）区别：</p><ul><li>逻辑或：当a为true时，还要计算b</li><li>短路与：当a为true时，则不计算 b（因为不论 b 为何值，结果都为 true）</li></ul><p><span style="color:red;">总结:短路与和短路或，都是先判断左边，若判断左边后，已经可以得到整个表达式的结果后，就不判断右边了。否则在判断右边。</span></p><blockquote><p>5.赋值运算符：</p></blockquote><p><img src="'+c+`" alt="21"></p><blockquote><p>6.三目运算符（条件运算符）</p></blockquote><p>条件运算符的符号表示为“?:”，使用该运算符时需要有三个操作数，因此称其为三目运算符。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//例子</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x,y,z;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//计算 z 的值，先要判断 x&gt;y 表达的值，如果为 true，z 的值为 x-y；否则 z 的值为 x+y。</span></span></code></pre></div><blockquote><p>7.Java运算符优先级</p></blockquote><p><img src="`+F+'" alt="22"></p>',115)]))}const j=a(u,[["render",A]]);export{f as __pageData,j as default};
