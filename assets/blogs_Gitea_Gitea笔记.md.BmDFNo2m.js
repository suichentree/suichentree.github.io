import{_ as i,c as a,o as t,ak as e}from"./chunks/framework.CmzJUe0_.js";const n="/assets/gitea_20250908092315021.BTTEVA-r.png",p="/assets/gitea_20241204172309.C26HyOWM.png",l="/assets/gitea_20241204172725.D55_eipg.png",h="/assets/gitea_20241204175507.Dx9-3rgb.png",F=JSON.parse('{"title":"Gitea笔记","description":"","frontmatter":{"title":"Gitea笔记","date":"2024-12-04T00:00:00.000Z","lastUpdated":"2025-09-08T00:00:00.000Z","categories":["Git"],"tags":["Gitea"]},"headers":[],"relativePath":"blogs/Gitea/Gitea笔记.md","filePath":"blogs/Gitea/Gitea笔记.md"}'),k={name:"blogs/Gitea/Gitea笔记.md"};function r(d,s,g,o,c,E){return t(),a("div",null,s[0]||(s[0]=[e('<p>[toc]</p><h1 id="gitea笔记" tabindex="-1">Gitea笔记 <a class="header-anchor" href="#gitea笔记" aria-label="Permalink to &quot;Gitea笔记&quot;">​</a></h1><p><img src="'+n+`" alt="gitea_20250908092315021.png"></p><p>Gitea 是一个自己托管的Git服务程序。</p><p>Gitea 包括 Git 托管、代码审查、团队协作、软件包注册和 CI/CD。它与 GitHub、Bitbucket 和 GitLab 等比较类似。Gitea 最初是从 Gogs 发展而来。</p><p>Gitea的首要目标是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 Git 服务。Gitea 采用Go作为后端语言，只需生成一个可执行程序即可。 并且支持 Linux, macOS 和 Windows等多平台， 支持主流的x86，amd64、 ARM 和 PowerPC等架构。</p><p><a href="https://docs.gitea.com/zh-cn/" target="_blank" rel="noreferrer">Gitea官网 https://docs.gitea.com/zh-cn/</a></p><blockquote><p>Gitea的功能特性</p></blockquote><ul><li>代码托管：Gitea⽀持创建和管理仓库、浏览提交历史和代码⽂件、审查和合并代码提交、管理协作者、管理分⽀等。</li><li>轻量级和快速: Gitea 的设计目标之一就是轻量级和快速响应。它不像一些大型的代码托管平台那样臃肿,适用于资源有限的服务器环境。</li><li>安全性: Gitea 注重安全性，提供了用户权限管理、访问控制列表等功能.</li><li>代码评审：代码评审同时支持 Pull Request workflow 和 AGit workflow。</li><li>CI/CD: Gitea Actions⽀持 CI/CD 功能，该功能兼容 GitHub Actions.</li><li>项目管理：Gitea 通过看板和⼯单来跟踪⼀个项⽬的需求，功能和bug。</li><li>制品库: Gitea支持超过 20 种不同种类的公有或私有软件包管理，包括：Maven, npm, PyPI 等</li><li>多语言支持：Gitea 提供多种语言界面，适应全球范围内的用户，促进了国际化和本地化。</li></ul><h2 id="docker-部署-gitea" tabindex="-1">docker 部署 Gitea <a class="header-anchor" href="#docker-部署-gitea" aria-label="Permalink to &quot;docker 部署 Gitea&quot;">​</a></h2><p>Gitea 推荐使用docker-compose来部署Gitea服务。</p><p>默认情况下Gitea使用SQLite3来作为数据库，也可以配置为其他数据库。</p><p>① 在本地服务器中创建一个 <code>gitea</code> 目录。</p><p>② 在<code>gitea</code> 目录中创建 docker-compose.yaml 文件。</p><p>docker-compose.yaml 文件内容如下</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  gitea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gitea/gitea:1.22.4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 镜像</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">myGitea</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 容器名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USER_UID=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USER_GID=1000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 容器所属网络</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gitea</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自定义映射数据卷</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/xxx/docker/gitea/data:/data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/xxx/docker/gitea/etc/timezone:/etc/timezone:ro</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/xxx/docker/gitea/etc/localtime:/etc/localtime:ro</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自定义映射端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;33000:3000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;32222:22&quot;</span></span></code></pre></div><p>③ 在 docker-compose.yaml文件所在目录中执行下面命令，运行容器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先检查yaml文件配置是否有误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -q</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后在创建容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-compose.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>④ 初次访问Gitea页面 <code>http://xxxx:33000/</code></p><p>如果无法访问，可能是云服务器防火墙中没配置对应端口。</p><p>如图所示,是Gitea的初始化配置界面。可以自己修改一些基础信息，然后点击立即安装即可。 <img src="`+p+'" alt="gitea_20241204172309.png"></p><p>⑤ 注册登录</p><p>注册一个账号，登录即可。注意第一个账号默认为管理员账号。</p><p><img src="'+l+'" alt="gitea_20241204172725.png"></p><p>⑥ 主界面</p><p><img src="'+h+`" alt="gitea_20241204175507.png"></p><p>⑦ 使用Gitea</p><p>使用Gitea的方式和使用Github的方式差不多。创建一个仓库，然后直接通过<code>git clone</code>命令下载即可。</p><p>Gitea也有两种拉取代码的方式。</p><ul><li>HTTP方式：无需额外配置，直接通过命令拉取即可。</li><li>SSH方式：需要额外配置Gitea的SSH密钥，端口设置。因为Gitea容器的默认SSH端口为22，需要配置为对应的宿主机端口32222。</li></ul><p>具体方式自行百度。</p><h2 id="限制其他人访问gitea私服" tabindex="-1">限制其他人访问gitea私服 <a class="header-anchor" href="#限制其他人访问gitea私服" aria-label="Permalink to &quot;限制其他人访问gitea私服&quot;">​</a></h2><p>如果gitea私服部署在公司内网，那么只能公司内部人访问。如果gitea私服部署在云服务器上，则任何人都能访问你的gitea私服中的公开仓库。</p><p>因此我们需要限制其他人访问gitea私服</p><ul><li>另外对于公共仓库：任何人都能访问。</li><li>另外对于私有仓库，创建者用户才能访问，未登录的人或非创建者用户无法访问。</li></ul><p>管理员用户登录之后可以看到所有仓库（包括其他用户的）</p><h3 id="设置gitea私服的所有仓库必须登录后才能访问" tabindex="-1">设置gitea私服的所有仓库必须登录后才能访问 <a class="header-anchor" href="#设置gitea私服的所有仓库必须登录后才能访问" aria-label="Permalink to &quot;设置gitea私服的所有仓库必须登录后才能访问&quot;">​</a></h3><p>找到gitea的配置文件/xxx/gitea/gitea/gitea/conf/app.ini</p><p>配置文件中有一个<code>REQUIRE_SIGNIN_VIEW</code> 字段，默认是false 就是说不登录也可以查看仓库。改为true，然后重启gitea容器即可。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[service]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">REQUIRE_SIGNIN_VIEW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><h3 id="关闭gitea注册功能" tabindex="-1">关闭gitea注册功能 <a class="header-anchor" href="#关闭gitea注册功能" aria-label="Permalink to &quot;关闭gitea注册功能&quot;">​</a></h3><p>为了防止其他人注册自己搭建的gitea私服，我们可以关闭gitea注册功能，改为使用管理员账号分配账号的形式。</p><p>配置文件中 <code>DISABLE_REGISTRATION</code> 字段就是禁用注册的功能，改为true 即可。另外一个 <code>ENABLE_CAPTCHA</code> 字段其实是开启注册的时候展示验证码的功能，打开后，注册的时候就需要输入一个验证码。之后重启gitea容器即可。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[service]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DISABLE_REGISTRATION</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENABLE_CAPTCHA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div>`,44)]))}const u=i(k,[["render",r]]);export{F as __pageData,u as default};
