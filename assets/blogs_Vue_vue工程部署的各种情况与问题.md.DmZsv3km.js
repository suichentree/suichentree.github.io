import{_ as i,c as a,o as n,ak as l}from"./chunks/framework.CmzJUe0_.js";const c=JSON.parse('{"title":"vue工程部署的各种情况与问题","description":"","frontmatter":{"title":"vue工程部署的各种情况与问题","date":"2021-07-12T00:00:00.000Z","sidebar":"auto","categories":["前端"],"tags":["Vue"]},"headers":[],"relativePath":"blogs/Vue/vue工程部署的各种情况与问题.md","filePath":"blogs/Vue/vue工程部署的各种情况与问题.md"}'),p={name:"blogs/Vue/vue工程部署的各种情况与问题.md"};function t(h,s,e,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="vue工程中的publicpath" tabindex="-1">vue工程中的publicPath <a class="header-anchor" href="#vue工程中的publicpath" aria-label="Permalink to &quot;vue工程中的publicPath&quot;">​</a></h2><blockquote><ol><li>在工程中publicPath的默认值为&quot;/&quot;</li></ol></blockquote><p>默认情况下，vue工程打包后是被部署在一个域名的根路径上，例如 <a href="https://www.my-app.com/%E3%80%82" target="_blank" rel="noreferrer">https://www.my-app.com/。</a></p><p>如果部署在一个子路径上，你就需要用publicPath去指定这个子路径。例如部署在 <a href="https://www.my-app.com/my-app/%E3%80%82" target="_blank" rel="noreferrer">https://www.my-app.com/my-app/。</a> 则需要设置 publicPath 为 /my-app/</p><p><span style="color:red;">当publicPath为/my-app/时，就可以通过<a href="http://lcoalhost:8080/my-app/main.js" target="_blank" rel="noreferrer">http://lcoalhost:8080/my-app/main.js</a> 直接访问到静态资源路径。</span></p><blockquote><ol start="2"><li>publicPath也可以设置为空字符串 (&#39;&#39;) 或是相对路径 <code>./</code></li></ol></blockquote><p>当publicPath设置为相对路径的时候，此时工程内的css,js,图片等资源都会被链接为相对路径，这样打出来的dist包可以被部署在任意路径。</p><p><span style="color:red;">publicPath设置成相对路径后，是相对于打包之后的index.html的。例如：设置 publicPath: &#39;./dist/&#39; ，则打包后js的引用路径为 ./dist/main.js </span></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>相对路径的 publicPath 有一些使用上的限制。在以下情况下，应当避免使用:</span></span>
<span class="line"><span>1. 当使用基于 HTML5 history.pushState 的路由时；</span></span>
<span class="line"><span>2. 当使用 pages 选项构建多页面应用时。</span></span></code></pre></div><h2 id="vue-router中hash模式和history模式的区别" tabindex="-1">vue-router中hash模式和history模式的区别 <a class="header-anchor" href="#vue-router中hash模式和history模式的区别" aria-label="Permalink to &quot;vue-router中hash模式和history模式的区别&quot;">​</a></h2><p>hash模式和history模式最直观的区别就是在hash模式下的地址栏里的URL夹杂着#号 ，而history模式下没有#号。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // mode: &#39;history&#39;,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //去掉url中的#</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><ol><li>hash模式</li></ol></blockquote><p>例如： <code>http://www.aaa.com/#/hello</code> 这个链接中，hash的值为 #/hello。</p><p>①它的特点在于：<span style="color:red;">hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中</span>，因此改变 hash 不会重新向服务端发送请求。而是会在vue中会触发页面的修改。</p><p>②hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 <code>http://www.aaa.com/#/hello</code> 只有 <code>http://www.aaa.com/</code> 会被包含在请求中 ，对于nginx来说就相当于是根路径&#39;/&#39;的请求。</p><blockquote><ol start="2"><li>history模式</li></ol></blockquote><p>例如：<code>http://www.aaa.com/hello</code> 当页面重新刷新的时候，浏览器进行/hello的资源请求。如果Web服务器（nginx）中没有/hello的请求映射，则页面就会报404错误。</p><h4 id="对于history模式下页面刷新404的问题" tabindex="-1">对于history模式下页面刷新404的问题？ <a class="header-anchor" href="#对于history模式下页面刷新404的问题" aria-label="Permalink to &quot;对于history模式下页面刷新404的问题？&quot;">​</a></h4><p><span style="color:red;">Vue是属于单页应用（SPA）,不管工程中有多少页面，打包后都只会产出一个index.html。路由本质上是通过JS来执行视图切换的。</span></p><p>产生原因：进入到子路由刷新页面时，在history模式下web服务器（nginx）没有相对应的请求映射。此时页面会出现404。</p><p>解决方法：如果当前URL没匹配到任何资源，则直接重定向到 index.html，把路由交由index.html处理。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> www.aaa.com;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 若在根路径下访问工程，则用这个</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /data/dist/index.html;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="hash模式部署到nginx上" tabindex="-1">hash模式部署到nginx上 <a class="header-anchor" href="#hash模式部署到nginx上" aria-label="Permalink to &quot;hash模式部署到nginx上&quot;">​</a></h2><p><span style="color:red;">hash模式下不用担心刷新404问题。</span></p><ol><li>工程中的publicPath 改为 <code>./</code>相对路径 。在hash模式下直接打包的话，会找不到css、js和图片资源。</li><li>设置mode为hash模式（默认）</li><li>nginx配置</li></ol><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      9099</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	   location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /chronic-pay/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		    alias </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C:/xxx/dist/;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><ol start="4"><li>访问链接：<code>http://localhost:9099/chronic-pay/#/xxx</code></li></ol><h2 id="vue项目访问链接中携带一个-会对开发造成一定的影响" tabindex="-1">vue项目访问链接中携带一个#会对开发造成一定的影响 <a class="header-anchor" href="#vue项目访问链接中携带一个-会对开发造成一定的影响" aria-label="Permalink to &quot;vue项目访问链接中携带一个#会对开发造成一定的影响&quot;">​</a></h2><p>1、微信三方登录回调地址，有#号时，接收不到code参数。</p><p>2、微信H5支付的回调地址，不允许有#。</p><p>3、App分享，处理特殊字符时，可能会对#进行编译。</p><h2 id="history模式部署到nginx上" tabindex="-1">history模式部署到nginx上 <a class="header-anchor" href="#history模式部署到nginx上" aria-label="Permalink to &quot;history模式部署到nginx上&quot;">​</a></h2><p><span style="color:red;">根据访问链接的不同要改不同的地方</span></p><blockquote><p>①若访问链接为： <code>http://localhost:9099/chronic-pay/xxx</code></p></blockquote><ol><li>首先判断打包后的工程是否通过某个域名下的子路径访问。例如：chronic-pay子路径</li><li>若通过子路径访问页面，则要在vue-router中添加history模式，添加base路径</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//history模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/chronic-pay/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//提供的可选的base文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol start="3"><li><p>把工程中vue.config.js文件的publicPath 改为子路径 <code>/chronic-pay/</code> 。</p></li><li><p>修改nginx配置</p></li></ol><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      9099</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	   location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /chronic-pay/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            ## 刷新后当URL没匹配到任何资源，则直接重定向到 /chronic-pay/index.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /chronic-pay/index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            alias </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C:/xxx/dist/;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><blockquote><p>②若访问链接为： <code>http://localhost:9099/xxx</code></p></blockquote><ol><li>上面的链接就是直接通过根路径访问页面</li><li>在vue-router中添加history模式，添加base路径</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//history模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  base: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//提供的可选的base文件路径,根路径访问直接写为 /</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ol start="3"><li><p>把工程中vue.config.js文件的publicPath 改为子路径 <code>/</code> 。</p></li><li><p>修改nginx配置</p></li></ol><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      9099</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	   location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            ## 刷新后当URL没匹配到任何资源，则直接重定向到 /index.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            alias </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">C:/xxx/dist/;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div>`,44)]))}const E=i(p,[["render",t]]);export{c as __pageData,E as default};
