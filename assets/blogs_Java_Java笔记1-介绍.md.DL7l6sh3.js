import{_ as s,c as i,o as l,ak as n}from"./chunks/framework.CmzJUe0_.js";const t="/assets/java_20230621141559.CrgHjaR8.png",p="/assets/java_img_1.BpsFMb7z.png",e="/assets/java_img_2.D7eU-QRU.png",h="/assets/java_img_3.Cy-d0wgi.png",k="/assets/java_img_4.CtLRZc38.png",r="/assets/java_20230621144507.BbkmbiBf.png",o="/assets/java_img_5.Bo2LX1aA.png",d="/assets/java_20230621145120.CBGnY0X1.png",v="/assets/java_20230621150008.D4YCaxiY.png",_=JSON.parse('{"title":"Java笔记1-介绍","description":"","frontmatter":{"title":"Java笔记1-介绍","date":"2023-06-16T00:00:00.000Z","sidebar":"auto","categories":["Java"]},"headers":[],"relativePath":"blogs/Java/Java笔记1-介绍.md","filePath":"blogs/Java/Java笔记1-介绍.md"}'),c={name:"blogs/Java/Java笔记1-介绍.md"};function g(J,a,E,j,u,y){return l(),i("div",null,a[0]||(a[0]=[n('<p>[toc]</p><h1 id="java笔记1-介绍" tabindex="-1">Java笔记1-介绍 <a class="header-anchor" href="#java笔记1-介绍" aria-label="Permalink to &quot;Java笔记1-介绍&quot;">​</a></h1><h2 id="什么是java" tabindex="-1">什么是java? <a class="header-anchor" href="#什么是java" aria-label="Permalink to &quot;什么是java?&quot;">​</a></h2><p>Java 是由 Sun Microsystems 公司于 1995 年推出的一门面向对象程序设计语言。2010 年 Oracle 公司收购 Sun Microsystems，之后由 Oracle 公司负责 Java 的维护和版本升级。</p><h2 id="java环境搭建" tabindex="-1">Java环境搭建 <a class="header-anchor" href="#java环境搭建" aria-label="Permalink to &quot;Java环境搭建&quot;">​</a></h2><p>编写和运行Java程序必须使用JDK（Java Development Kit），它提供了编译和运行 Java 程序的环境。</p><ol><li>访问Oracle公司的官方网站（www.oracle.com）。</li><li>在官网中找到jdk的下载链接，根据操作系统选择不同版本的安装包</li><li>运行jdk安装包,开始安装jdk</li></ol><p>验证jdk是否安装成功？</p><ol><li>打开终端环境，输入以下命令<code>java -version</code></li><li>出现如图所示信息，则说明JDK 已经安装成功</li></ol><p><img src="'+t+`" alt="java_20230621141559.png"></p><h2 id="jdk环境变量配置" tabindex="-1">jdk环境变量配置 <a class="header-anchor" href="#jdk环境变量配置" aria-label="Permalink to &quot;jdk环境变量配置&quot;">​</a></h2><p>一些Java程序工具会通过环境变量搜索JDK的安装路径。如果没有在系统环境变量中配置JDK的安装路径，那么该工具就无法使用。</p><p>不同操作系统配置jdk环境变量的方法，自行百度。</p><h2 id="第一个java程序-helloworld" tabindex="-1">第一个Java程序&quot;helloworld&quot; <a class="header-anchor" href="#第一个java程序-helloworld" aria-label="Permalink to &quot;第一个Java程序&quot;helloworld&quot;&quot;">​</a></h2><h3 id="终端运行java程序" tabindex="-1">终端运行java程序 <a class="header-anchor" href="#终端运行java程序" aria-label="Permalink to &quot;终端运行java程序&quot;">​</a></h3><p>①：创建一个新文件，命名为HelloWorld.java ②：在文件中编写如下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 第一个Java程序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 它将打印字符串 Hello World</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 Hello World</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // main() 方法是所有程序的入口，最先开始执行。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>③：编译java文件</p><p>找到HelloWorld.java文件在那个路径下,执行命令(假如文件在c盘下)：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>C : &gt; javac HelloWorld.java    //编译文件，产生.class的字节码文件</span></span></code></pre></div><p>Java代码写到文件之后，还需要进行编译才能运行。编译 Java 源程序使用的是 JDK 中的 javac 命令。</p><p>④：运行java文件</p><p>运行字节码文件需要使用 JDK 中的 java 命令，例如运行上步生成的 .class 文件，命令如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>C : &gt; java HelloWorld      //运行字节码文件，执行程序源代码</span></span></code></pre></div><p>⑤：运行结果：</p><p><img src="`+p+'" alt="java_img_1"></p><h3 id="ide创建一个java程序并运行" tabindex="-1">IDE创建一个Java程序并运行 <a class="header-anchor" href="#ide创建一个java程序并运行" aria-label="Permalink to &quot;IDE创建一个Java程序并运行&quot;">​</a></h3><p>①：创建java project： <img src="'+e+'" alt="2"></p><p>②：创建package包，class类 <img src="'+h+`" alt="3"></p><p>③：在类中编写源代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ello1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 第一个Java程序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 它将打印字符串 Hello World</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 Hello World</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>④：运行程序。（右键 --&gt; RunAs --&gt; Java application） <img src="`+k+'" alt="4"></p><h2 id="java程序的运行过程-执行流程-分析" tabindex="-1">Java程序的运行过程（执行流程）分析 <a class="header-anchor" href="#java程序的运行过程-执行流程-分析" aria-label="Permalink to &quot;Java程序的运行过程（执行流程）分析&quot;">​</a></h2><p>Java 程序的运行必须经过编写、编译和运行 3 个步骤。</p><ol><li>编写：是指在.java 的 Java 源文件中编写程序代码。</li><li>编译：是指使用 Java 编译器对源文件进行错误排査的过程，编译后将生成后缀名为 .class 的字节码文件。</li><li>运行：是指使用 Java 解释器将.class字节码文件翻译成机器代码，然后执行机器代码并显示结果。</li></ol><p><img src="'+r+'" alt="java_20230621144507.png"></p><p><img src="'+o+'" alt="5"></p><p>编译的主要作用是让 Java 编译器获取 Java 应用程序 HelloWorld.java 的源代码，把它编译成符合 Java 虚拟机规范的字节码文件。这时会生成一个新文件.class文件，此文件便是字节码文件，它也是 JVM 上的可执行文件。</p><h2 id="java是如何实现跨平台的" tabindex="-1">Java是如何实现跨平台的？ <a class="header-anchor" href="#java是如何实现跨平台的" aria-label="Permalink to &quot;Java是如何实现跨平台的？&quot;">​</a></h2><p>JVM虚拟机是 Java 平台架构的基础，Java 的跨平台特性正是通过在 JVM虚拟机中运行 Java 程序实现的。</p><p><img src="'+d+'" alt="java_20230621145120.png"></p><p>Java 虚拟机（JVM）是运行 Java 程序的软件环境，Java解释器是 Java虚拟机的一部分。</p><p>在运行 Java 程序时，首先会启动 JVM，然后由它来负责解释执行 Java 的字节码程序，并且 Java 字节码程序只能运行于 JVM 之上。</p><p>这样利用 JVM 就可以把 Java 字节码程序和具体的硬件平台以及操作系统环境分隔开来，只要在不同的计算机上安装了针对特定平台的 JVM，Java 程序就可以运行，而不用考虑当前具体的硬件平台及操作系统环境。</p><p><span style="color:red;">提示：Java 程序通过 JVM 可以实现跨平台特性，但 JVM 是不跨平台的。也就是说，不同操作系统之上的 JVM 是不同的，Windows 平台之上的 JVM 不能用在 Linux 平台，反之亦然。</span></p><h2 id="jvm-jre-jdk三者关系" tabindex="-1">JVM，JRE，JDK三者关系 <a class="header-anchor" href="#jvm-jre-jdk三者关系" aria-label="Permalink to &quot;JVM，JRE，JDK三者关系&quot;">​</a></h2><ul><li>JDK（Java Development Kid，Java开发开源工具包）是整个 Java 的核心，包括了 Java 运行环境 JRE、Java开发工具和 Java 基础类库。</li><li>JRE（Java Runtime Environment，Java 运行环境）是运行 JAVA 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。</li><li>JVM（Java Virtual Machine，Java 虚拟机）是整个 Java 实现跨平台的最核心的部分，能够运行以 Java 语言编写的软件程序。</li></ul><p><img src="'+v+'" alt="java_20230621150008.png"></p>',48)]))}const b=s(c,[["render",g]]);export{_ as __pageData,b as default};
