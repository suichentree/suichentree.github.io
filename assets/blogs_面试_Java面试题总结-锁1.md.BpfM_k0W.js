import{_ as e,c as o,o as l,ak as i}from"./chunks/framework.CmzJUe0_.js";const r="/assets/java_20231129231847.BSkHojCL.png",k=JSON.parse('{"title":"Java面试题总结-锁1","description":"","frontmatter":{"title":"Java面试题总结-锁1","date":"2023-11-28T00:00:00.000Z","sidebar":"auto","categories":["面试"],"tags":["Java"]},"headers":[],"relativePath":"blogs/面试/Java面试题总结-锁1.md","filePath":"blogs/面试/Java面试题总结-锁1.md"}'),t={name:"blogs/面试/Java面试题总结-锁1.md"};function p(c,a,n,h,d,s){return l(),o("div",null,a[0]||(a[0]=[i('<p>[toc]</p><h1 id="java面试题总结-锁1" tabindex="-1">Java面试题总结-锁1 <a class="header-anchor" href="#java面试题总结-锁1" aria-label="Permalink to &quot;Java面试题总结-锁1&quot;">​</a></h1><h2 id="锁" tabindex="-1">锁 <a class="header-anchor" href="#锁" aria-label="Permalink to &quot;锁&quot;">​</a></h2><h3 id="java中锁的分类" tabindex="-1">java中锁的分类 <a class="header-anchor" href="#java中锁的分类" aria-label="Permalink to &quot;java中锁的分类&quot;">​</a></h3><blockquote><p>乐观锁和悲观锁</p></blockquote><p>乐观锁和悲观锁是锁的两种特性。</p><p>java中的synchronized拥有悲观锁的特性。</p><p>悲观锁：当线程获取不到锁资源的时候，会将当前线程挂起（即线程会进入到阻塞状态或等待状态）。</p><p>乐观锁：当线程获取不到锁资源的时候，会一直尝试获取锁资源。</p><blockquote><p>公平锁和非公平锁</p></blockquote><p>公平锁和非公平锁是锁的两种特性。</p><p>java中的synchronized拥有非公平锁的特性。</p><p>公平锁：若线程A拿到了锁资源，线程B和C没有拿到。则线程BC会进行排队。根据排队顺序来获取锁资源。</p><p>非公平锁: 若线程A拿到了锁资源，线程B和C没有拿到。则线程BC会进行竞争，谁赢谁就排队排到前面。</p><blockquote><p>互斥锁和共享锁(即读锁和写锁)</p></blockquote><p>互斥锁和共享锁是锁的两种特性。</p><p>java中的synchronized拥有互斥锁的特性。</p><p>互斥锁：同一时间，互斥锁只能被一个线程持有。 共享锁：同一时间，共享锁可以被多个线程共同持有。</p><h3 id="java线程阻塞的代价" tabindex="-1">java线程阻塞的代价 <a class="header-anchor" href="#java线程阻塞的代价" aria-label="Permalink to &quot;java线程阻塞的代价&quot;">​</a></h3><p>在java的线程中如果要阻塞或唤醒一个线程就需要操作系统介入，需要线程在用户态与内核态之间切换，这种切换会消耗大量的系统资源。</p><p>因为用户态切换至内核态需要传递数据给内核，内核也需要保护好用户态传递的数据等，以便内核态调用结束后切换回用户态继续工作。</p><p>因此线程状态的频繁切换会消耗很多CPU处理时间；</p><h3 id="乐观锁" tabindex="-1">乐观锁 <a class="header-anchor" href="#乐观锁" aria-label="Permalink to &quot;乐观锁&quot;">​</a></h3><p>乐观锁是一种加锁思想。</p><p>乐观锁认为某个线程在访问数据的过程中其它线程不会修改这个数据，因此不加锁访问数据。而当该线程需要修改数据时，才会判断该数据在此期间是否被其它线程修改。</p><ul><li>如果其它线程确实没有修改，则该线程直接加锁并修改数据；</li><li>反之如果该数据已经被其它线程修改，则该线程将放弃修改数据。并且重复进行读取数据-比较数据-修改数据的过程。</li></ul><blockquote><p>如何判断数据是否被更新？</p></blockquote><p>线程在读取数据的时候，会先读出当前数据的版本号。然后修改的时候再读取一遍，比较两次读取的版本号，如果一样则表示数据没有被更新，从而可以对数据进行加锁操作。</p><h3 id="什么是-cas-比较与交换算法" tabindex="-1">什么是 CAS 比较与交换算法？ <a class="header-anchor" href="#什么是-cas-比较与交换算法" aria-label="Permalink to &quot;什么是 CAS 比较与交换算法？&quot;">​</a></h3><p>CAS（Compare And Swap）比较并交换算法是乐观锁的一种实现方式。</p><p>CAS 算法的过程是这样：涉及3个操作数：更新值、旧值、新值。</p><ol><li>只有当数据的旧值与新值相同时，才会将数据修改为更新值。</li><li>如果新值与旧值不同，则说明已经有其他线程对数据做了更新，则当前线程什么都不做。</li><li>否则，线程将数据更新为更新值，并返回更新值。</li></ol><h3 id="悲观锁" tabindex="-1">悲观锁 <a class="header-anchor" href="#悲观锁" aria-label="Permalink to &quot;悲观锁&quot;">​</a></h3><p>悲观锁是一种加锁思想。</p><p>悲观锁认为某个线程使用数据的过程中，其它线程肯定会过来修改这个数据。为了保证数据安全，其采用的是一种先加锁再访问的策略。</p><p>如果其它线程要想访问该数据，由于该数据已经被加锁，因此该线程只能进入阻塞等待状态、直到其获取到锁才可以访问。</p><p>Java中的synchronized修饰符就是一个典型的悲观锁。</p><h3 id="自旋锁" tabindex="-1">自旋锁 <a class="header-anchor" href="#自旋锁" aria-label="Permalink to &quot;自旋锁&quot;">​</a></h3><p>自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源。那么之前没有拿到锁的线程就不需要做内核态和用户态之间的切换，从而进入阻塞挂起状态。</p><p>那些没有拿到锁的线程只需要稍微等一等（自旋），等持有锁的线程释放锁后。开始重新去获取锁，这样就避免线程在内核态和用户态之间的切换，导致的消耗了。</p><blockquote><p>自旋等待的最大时间</p></blockquote><p>那么没有获取到锁的线程，要等待多长时间呢？</p><p>由于线程自旋是需要占用cpu的，相当于自旋线程让cpu在做无用功。因此需要设定一个自旋等待的最大时间。避免线程一直自旋，导致cpu的占用。</p><p>如果持有锁的线程执行的时间超过自旋等待的最大时间后，还是没有释放锁。那么其他自旋的线程会停止自旋进入阻塞等待状态。</p><blockquote><p>自旋锁的优缺点</p></blockquote><ul><li><p>优点：自旋锁可以尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说能大幅度的提升性能，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗。</p></li><li><p>缺点：对于锁的竞争激烈，或者需要持有锁的线程长时间占用的同步块来说，这时候就不适合使用自旋锁了，因为自旋锁的线程会导致 cpu 做无用功。同时有大量线程在自旋的时候会导致线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要 cpu 的线程又不能获取到 cpu，从而造成 cpu 的浪费。</p></li></ul><h3 id="公平锁与非公平锁" tabindex="-1">公平锁与非公平锁 <a class="header-anchor" href="#公平锁与非公平锁" aria-label="Permalink to &quot;公平锁与非公平锁&quot;">​</a></h3><ul><li>公平锁（Fair）：线程对数据加锁后，其他线程进行排队等待，先来先得</li><li>非公平锁（Nonfair）：线程对数据加锁后，其他线程不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。</li></ul><blockquote><p>公平锁和非公平锁的区别</p></blockquote><ol><li>非公平锁性能比公平锁高 5~10 倍，因为公平锁需要在多核的情况下维护一个队列</li><li>Java 中的 synchronized 是非公平锁。</li></ol><h3 id="synchronized" tabindex="-1">Synchronized <a class="header-anchor" href="#synchronized" aria-label="Permalink to &quot;Synchronized&quot;">​</a></h3><p>synchronized 它可以把任意一个非 NULL 的对象当作锁。它属于悲观锁，同时属于可重入锁。</p><p>Synchronized 作用范围</p><ol><li>作用于方法时，锁住的是实例化对象，即单个线程本身；</li><li>当作用于静态方法时，锁住的是类。因此作用于静态方法的时候相当于类的一个全局锁，会锁所有调用该静态方法的线程。</li></ol><h3 id="java-中-lock接口-锁接口-详解" tabindex="-1">java 中 Lock接口（锁接口）详解 <a class="header-anchor" href="#java-中-lock接口-锁接口-详解" aria-label="Permalink to &quot;java 中 Lock接口（锁接口）详解&quot;">​</a></h3><p>java.util.concurrent.locks包下有一些关于锁的类与接口。</p><p><img src="'+r+'" alt="java_20231129231847.png"></p><p>Lock和ReadWriteLock是关于锁的两大根接口，Lock根接口的主要实现类是ReentrantLock（可重入锁），ReadWriteLock根接口的主要实现类是ReentrantReadWriteLock（读写锁）。</p><h4 id="synchronized与lock根接口的区别" tabindex="-1">Synchronized与Lock根接口的区别？ <a class="header-anchor" href="#synchronized与lock根接口的区别" aria-label="Permalink to &quot;Synchronized与Lock根接口的区别？&quot;">​</a></h4><ul><li>synchronized是java中的一个关键字，也就是说是Java语言内置的特性。使用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；</li><li>Lock不是Java语言内置的特性。而是需要程序员去主动使用Lock接口。Lock 提供了比 synchronized 关键字更广泛的锁操作，它能更好的处理线程问题。</li></ul><h3 id="reentrantlock-可重入锁" tabindex="-1">ReentrantLock 可重入锁 <a class="header-anchor" href="#reentrantlock-可重入锁" aria-label="Permalink to &quot;ReentrantLock 可重入锁&quot;">​</a></h3><p>ReentantLock 是 Lock接口的主要实现类，它除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p><h3 id="readwritelock-读写锁" tabindex="-1">ReadWriteLock 读写锁 <a class="header-anchor" href="#readwritelock-读写锁" aria-label="Permalink to &quot;ReadWriteLock 读写锁&quot;">​</a></h3><p>Java 中的读写锁有一个根接口 java.util.concurrent.locks.ReadWriteLock ， 也有具体的实现类 ReentrantReadWriteLock。</p><p>读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的,在一定程度上提高了程序的执行效率。</p><h3 id="死锁与活锁的区别" tabindex="-1">死锁与活锁的区别？ <a class="header-anchor" href="#死锁与活锁的区别" aria-label="Permalink to &quot;死锁与活锁的区别？&quot;">​</a></h3><p>死锁：是指两个或两个以上的进程（或线程）在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</p><p>产生死锁的必要条件：</p><ol><li>互斥条件：所谓互斥就是进程在某一时间内独占资源。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:进程已获得资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><p>活锁：线程在执行过程中，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。类似于线程在不断重启关闭的循环中。</p><blockquote><p>活锁和死锁的区别</p></blockquote><p>活锁中的线程是在不断的重启中。活锁是能够解开的。</p><p>死锁中的线程是在不断等待其他线程释放资源，因此死锁一般情况下是很难解开的。</p><h3 id="线程调度方式" tabindex="-1">线程调度方式 <a class="header-anchor" href="#线程调度方式" aria-label="Permalink to &quot;线程调度方式&quot;">​</a></h3><p>系统有两种线程调度方式：抢占式调度和协同式调度。</p><blockquote><p>抢占式调度：</p></blockquote><p>抢占式调度指的是每条线程执行的时间、线程的切换都由系统控制。</p><p>系统控制指的是在系统某种运行机制下，可能每条线程都分同样的执行时间片，也可能是某些线程执行的时间片较长，甚至某些线程得不到执行的时间片。在这种机制下，一个线程的堵塞不会导致整个进程堵塞。</p><blockquote><p>协同式调度：</p></blockquote><p>协同式调度指某一线程执行完后主动通知系统,让系统切换到另一线程上执行，这种模式就像接力赛一样。协同式调度的情况下线程的执行时间由线程本身控制，线程切换可以预知，不存在多线程同步问题，但它有一个致命弱点：如果一个线程编写有问题，运行到一半就一直堵塞，那么可能导致整个系统崩溃。</p><p>总结：</p><ul><li>抢占式调度中，系统主动控制各个线程运行。线程是被动的。</li><li>协同式调度中，各个线程自己控制自己的运行。线程是主动的。</li></ul><h3 id="jvm-的线程调度方式-抢占式调度" tabindex="-1">JVM 的线程调度方式（抢占式调度） <a class="header-anchor" href="#jvm-的线程调度方式-抢占式调度" aria-label="Permalink to &quot;JVM 的线程调度方式（抢占式调度）&quot;">​</a></h3><p>java 使用的线程调度方式是抢占式调度。Java 中线程会按优先级分配 CPU 时间片运行，且优先级越高越优先执行，但优先级高并不代表能独自占用执行时间片，可能是优先级高得到越多的执行时间片，反之，优先级低的分到的执行时间少但不会分配不到执行时间片。</p>',84)]))}const b=e(t,[["render",p]]);export{k as __pageData,b as default};
