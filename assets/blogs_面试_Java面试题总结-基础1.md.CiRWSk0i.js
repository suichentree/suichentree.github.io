import{_ as i}from"./chunks/20221031112704.CA3nfC0x.js";import{_ as t,c as l,o as e,ak as s}from"./chunks/framework.CmzJUe0_.js";const r="/assets/java_20231128220607.e85xTEBg.png",n="/assets/java_20231128222039.C2QGD4mL.png",q=JSON.parse('{"title":"Java面试题总结-基础1","description":"","frontmatter":{"title":"Java面试题总结-基础1","date":"2023-08-11T00:00:00.000Z","sidebar":"auto","categories":["面试"],"tags":["Java"]},"headers":[],"relativePath":"blogs/面试/Java面试题总结-基础1.md","filePath":"blogs/面试/Java面试题总结-基础1.md"}'),h={name:"blogs/面试/Java面试题总结-基础1.md"};function o(p,a,d,u,c,k){return e(),l("div",null,a[0]||(a[0]=[s('<p>[toc]</p><h1 id="java面试题总结-基础1" tabindex="-1">Java面试题总结-基础1 <a class="header-anchor" href="#java面试题总结-基础1" aria-label="Permalink to &quot;Java面试题总结-基础1&quot;">​</a></h1><h2 id="面向对象编程三大特性-封装-继承-多态" tabindex="-1">面向对象编程三大特性: 封装 继承 多态 <a class="header-anchor" href="#面向对象编程三大特性-封装-继承-多态" aria-label="Permalink to &quot;面向对象编程三大特性: 封装 继承 多态&quot;">​</a></h2><blockquote><p>封装</p></blockquote><p>封装把类的属性私有化，同时提供一些可以被外界访问的属性的方法，如果某个属性不想被外界访问，可以不提供方法给外界访问。</p><p>封装主要通过4个访问修饰符来控制。</p><p>private default protected public</p><blockquote><p>继承</p></blockquote><p>继承是使用已存在的类的定义作为新类的基础。新类可以增加新的数据或新的功能，也可以直接用父类的功能。通过使用继承我们能够非常方便地复用以前的代码。</p><p>继承的注意事项：</p><ol><li>子类拥有父类非 private 的属性和方法。</li><li>子类不能继承父类的构造函数。</li><li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li><li>子类可以对父类的方法进行重写。</li></ol><blockquote><p>多态</p></blockquote><p>多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在 Java 中有两种形式可以实现多态。</p><ul><li>继承（多个子类对同一方法的重写）</li><li>接口（实现接口并覆盖接口中同一方法）。</li></ul><h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h2><h3 id="介绍一些java的8种基本数据类型" tabindex="-1">介绍一些java的8种基本数据类型？ <a class="header-anchor" href="#介绍一些java的8种基本数据类型" aria-label="Permalink to &quot;介绍一些java的8种基本数据类型？&quot;">​</a></h3><p>java定义了以下8种数据类型</p><p><img src="'+i+'" alt="20221031112704.png"></p><h3 id="介绍一下java的访问修饰符" tabindex="-1">介绍一下java的访问修饰符？ <a class="header-anchor" href="#介绍一下java的访问修饰符" aria-label="Permalink to &quot;介绍一下java的访问修饰符？&quot;">​</a></h3><p><span style="color:red;">在 Java 语言中，访问控制修饰符有 4 种。分别是 public、 private、protected 和 default，其中 default (即缺省，不使用任何关键字) 是一种没有定义专门的访问控制符的情况。</span></p><p>按隐藏程度：private &gt; default &gt; protected &gt; public</p><table tabindex="0"><thead><tr><th>访问权限级别</th><th>本类</th><th>同包</th><th>不同包的子类</th><th>不同的包的非子类</th></tr></thead><tbody><tr><td>公开 public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>保护 protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>默认 default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>私有 private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>√ 可访问 x 不可访问，意思是无法看到，无法调用。</p><h3 id="和-equals-的区别是什么" tabindex="-1">== 和 equals 的区别是什么 <a class="header-anchor" href="#和-equals-的区别是什么" aria-label="Permalink to &quot;== 和 equals 的区别是什么&quot;">​</a></h3><ul><li>对于基本数据类型的变量， == 比较的是实际值。</li><li>对于引用类型的变量，==比较的是引用的地址。</li></ul><p><span style="color:red;">一般情况下，equal都是比较地址。若类中重写了equal()的。equal()比较的是内容实际值。string类就是重写了equal()方法，所以比较的是具体值。</span></p><h3 id="hashcode-与equals" tabindex="-1">hashCode()与equals() <a class="header-anchor" href="#hashcode-与equals" aria-label="Permalink to &quot;hashCode()与equals()&quot;">​</a></h3><ul><li>hashCode()是Object类的方法，因此任何java类都包含有hashCode()。hashCode() 的作用是计算出对象的哈希码。</li><li>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况： <ul><li>情况1：类没有覆盖equals() 方法。等价于通过“==”比较这两个对象。</li><li>情况2：类覆盖了 equals() 方法。则根据重写的equals()方法来具体判断。</li></ul></li></ul><blockquote><p>hashCode()与equals()的相关规定</p></blockquote><p>若两个对象相等，则hashcode一定也是相同的。若两个对象有相同的hashcode值，它们也不一定是相等的。</p><h3 id="值传递和引用传递的区别" tabindex="-1">值传递和引用传递的区别 <a class="header-anchor" href="#值传递和引用传递的区别" aria-label="Permalink to &quot;值传递和引用传递的区别&quot;">​</a></h3><ul><li><p>值传递：在方法调用时，会将实参拷贝一份，然后赋值给形参。即实参和形参只是存储相同数据的两个参数，实参与形参是没有关联的。</p></li><li><p>引用传递：在方法调用时，形参接收的是实参的引用地址。也就是形参和实参是指向同一个地址的。即操控形参相当于操控实参。</p></li></ul><h3 id="为什么java只有值传递" tabindex="-1">为什么Java只有值传递? <a class="header-anchor" href="#为什么java只有值传递" aria-label="Permalink to &quot;为什么Java只有值传递?&quot;">​</a></h3><p>Java总是采用按值传递。因此java中方法形参就是方法实参的拷贝。</p><p>例如：在方法调用时，方法形参的值就是实参的引用地址的拷贝。</p><p>在方法内，形参中的属性数值改变了，会影响到实参。但是形参引用地址的改变是不会影响到实参的。因为方法结束后，形参就生命就结束了。</p><h3 id="有隐含的强制类型转换" tabindex="-1">+=有隐含的强制类型转换 <a class="header-anchor" href="#有隐含的强制类型转换" aria-label="Permalink to &quot;+=有隐含的强制类型转换&quot;">​</a></h3><p>short s1 = 1; s1 = s1 + 1; 会报错</p><ul><li>由于 1 是 int 类型，因此 s1+1 运算结果也是 int型，需要强制转换类型才能赋值给short 型。</li></ul><p>short s1 = 1; s1 += 1; 不会报错</p><ul><li>short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short)(s1 + 1);其中有隐含的强制类型转换</li></ul><h3 id="构造函数能不能被重写" tabindex="-1">构造函数能不能被重写？ <a class="header-anchor" href="#构造函数能不能被重写" aria-label="Permalink to &quot;构造函数能不能被重写？&quot;">​</a></h3><p>构造函数不能被继承，因此不能被重写，但可以被重载</p><h3 id="overload-和-override-的区别" tabindex="-1">Overload 和 Override 的区别？ <a class="header-anchor" href="#overload-和-override-的区别" aria-label="Permalink to &quot;Overload 和 Override 的区别？&quot;">​</a></h3><ul><li>重写 Override: 在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被子类重写了。重写是父类与子类之间多态性的一种表现。</li><li>重载 Overload： 是一个类中多态性的一种表现。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载。</li></ul><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><h3 id="final-finally-finalize区别" tabindex="-1">final finally finalize区别 <a class="header-anchor" href="#final-finally-finalize区别" aria-label="Permalink to &quot;final finally finalize区别&quot;">​</a></h3><p>final可以修饰类、变量、方法。</p><ul><li>final 类：表示该类不能被继承。</li><li>final 方法：表示该方法不能被重写。</li><li>final 变量：表示该变量是一个常量。若是基本类型变量，则无法被再次赋值。若是引用变量，则引用地址不可变，但值可变。</li></ul><p>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法写到finally代码块中，表示不管是否出现异常，该代码块都会执行。</p><p>finalize是属于Object类的一个方法，该方法一般由垃圾回收器来调用。当垃圾回收器来调用finalize()方法的时候，用于判断对象是否可回收。</p><h3 id="this和super的区别" tabindex="-1">this和super的区别 <a class="header-anchor" href="#this和super的区别" aria-label="Permalink to &quot;this和super的区别&quot;">​</a></h3><ul><li>this代表对象本身。可以理解为指向对象本身的一个指针。</li><li>super代表父类对象，可以理解为指向自己父类对象的一个指针。</li></ul><h3 id="介绍一下static" tabindex="-1">介绍一下static <a class="header-anchor" href="#介绍一下static" aria-label="Permalink to &quot;介绍一下static&quot;">​</a></h3><p>static可以修饰</p><ul><li>修饰成员变量: 静态变量</li><li>修饰成员方法：静态方法</li><li>修改代码块：静态代码块</li><li>修饰类（只能修饰内部类也就是静态内部类）</li></ul><blockquote><p>static变量和static方法的作用</p></blockquote><p>被static修饰的变量或者方法是独立于该类的任何对象。即静态变量和静态方法不属于任何一个实例对象，而是被类的实例对象所共享。</p><blockquote><p>static代码块的作用</p></blockquote><p>静态代码块主要作用是优化类的性能。因为类初次加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><p>我们可以将一些只需要进行一次的初始化操作，都放在类的static代码块中进行。这样可以提高类的性能。</p><blockquote><p>static注意事项</p></blockquote><ul><li>静态只能访问静态。</li><li>非静态既可以访问非静态的，也可以访问静态的。</li></ul><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><h3 id="java-中的异常层次结构" tabindex="-1">Java 中的异常层次结构 <a class="header-anchor" href="#java-中的异常层次结构" aria-label="Permalink to &quot;Java 中的异常层次结构&quot;">​</a></h3><p>在Java中，所有的异常都有一个共同的父类，即 Throwable类。Throwable类有两个重要的子类：Exception（异常） 和 Error（错误）。</p><ul><li>Error（错误）:是程序无法处理的错误。例如JVM的问题。</li><li>Exception（异常）:是程序本身可以处理的异常。</li></ul><p>Exception 又有两个分支，一个是运行时异常 RuntimeException, 一个是检查时异常ChekedException。</p><ul><li>运行时异常 RuntimeException 通过是程序员代码导致的异常。如NullPointerException 、 ClassCastException等。</li><li>检查时异常ChekedException 一般是外部错误，这种异常都发生在编译阶段，Java 会强制程序去捕获此类异常，即对可能出现异常的程序进行 try catch。</li></ul><h3 id="异常关键字" tabindex="-1">异常关键字 <a class="header-anchor" href="#异常关键字" aria-label="Permalink to &quot;异常关键字&quot;">​</a></h3><ul><li>try 块：用于监听代码是否发生异常。其后可接 catch 块。</li><li>catch 块：用来捕获try语句块中发生的异常。</li><li>finally 块：无论是否捕获到异常，finally 块里的语句都会被执行。</li><li>throw – 用于抛出具体的异常对象。</li><li>throws – 用在方法签名中，用于声明该方法可能抛出的异常。</li></ul><h3 id="异常处理的机制" tabindex="-1">异常处理的机制 <a class="header-anchor" href="#异常处理的机制" aria-label="Permalink to &quot;异常处理的机制&quot;">​</a></h3><p>在Java中，异常的处理机制分为声明异常，抛出异常和捕获异常。</p><p><img src="'+r+'" alt="java_20231128220607.png"><img src="'+n+`" alt="java_20231128222039.png"></p><blockquote><p>声明异常</p></blockquote><p>在方法签名处使用 throws 关键字声明可能会抛出的异常。</p><blockquote><p>抛出异常</p></blockquote><p>如果你觉得在这个方法内处理异常不合适或者异常解决不了，那么你可以在方法内将异常抛出到方法外，让方法的调用者去处理。</p><p>throw关键字作用是在方法内部抛出一个Throwable类型的异常。任何Java代码都可以通过throw语句抛出异常。</p><blockquote><p>捕获异常</p></blockquote><p>如果你想处理某个异常，可以通过try…catch…finally 进行异常捕获,之后根据不同的异常情况来进行相应的处理。</p><h3 id="throw-和-throws-的区别" tabindex="-1">throw 和 throws 的区别 <a class="header-anchor" href="#throw-和-throws-的区别" aria-label="Permalink to &quot;throw 和 throws 的区别&quot;">​</a></h3><ul><li>throws用在方法上，用来声明该方法可能会出现什么异常。如果一个方法用 throws 标识了可能抛出的异常，调用该方法的方法中必须包含可处理异常的代码，否则也要在方法签名中用 throws 关键字声明相应的异常。</li><li>throw用在方法内，后面跟上异常对象。表明用来抛出一个具体的异常对象。</li></ul><h3 id="常见的-runtimeexception-有哪些" tabindex="-1">常见的 RuntimeException 有哪些？ <a class="header-anchor" href="#常见的-runtimeexception-有哪些" aria-label="Permalink to &quot;常见的 RuntimeException 有哪些？&quot;">​</a></h3><ul><li>ClassCastException(类转换异常)</li><li>IndexOutOfBoundsException(索引越界异常)</li><li>NullPointerException(空指针异常)</li></ul><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><h3 id="介绍一下string" tabindex="-1">介绍一下String? <a class="header-anchor" href="#介绍一下string" aria-label="Permalink to &quot;介绍一下String?&quot;">​</a></h3><p>1）String 类是 final 型，固 String 类不能被继承，它的成员方法也都默认为 final 方法。String对象一旦创建就固定不变了，对 String 对象的任何改变都不影响到原对象，相关的任何改变操作都会生成新的 String 对象。</p><p>2）String 类是通过 char 数组来保存字符串的，String 对 equals 方法进行了重定，比较的是值相等。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; String b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; String c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>a、b 和字面上的 test 都是指向 JVM 字符串常量池中的&quot;test&quot;对象，他们指向同一个对象。而new 关键字一定会产生一个对象 test，该对象存储在堆中。所以 new String(&quot;test&quot;)产生了两个对象，保存在栈中的 c 和保存在堆中的 test。而在 java 中根本就不存在两个完全一模一样的字符串对象，故在堆中的 test 应该是引用字符串常量池中的 test。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//栈中开辟一块空间存放引用 str1，str1 指向池中 String 常量&quot;abc&quot; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//栈中开辟一块空间存放引用 str2，str2 指向池中 String 常量&quot;def&quot; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//栈中开辟一块空间存放引用 str3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//str1+str2 通过 StringBuilder 的最后一步 toString()方法返回一个新的 String 对象&quot;abcdef&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//会在堆中开辟一块空间存放此对象，引用str3指向堆中的(str1+str2)所返回的新String对象。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdef&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回 false 因为 str3 指向堆中的&quot;abcdef&quot;对象，而&quot;abcdef&quot;是字符池中的对象，所以结果为 false。JVM 对 String str=&quot;abc&quot;对象放在常量池是在编译时做的，而 String str3=str1+str2 是在运行时才知道的，new 对象也是在运行时才做的。</span></span></code></pre></div><h3 id="string的特性" tabindex="-1">String的特性 <a class="header-anchor" href="#string的特性" aria-label="Permalink to &quot;String的特性&quot;">​</a></h3><ul><li>不变性：String 是只读字符串。对它进行任何操作，其实都是创建一个新的对象，再把引用指向该对象。不变性的主要作用在于当一个对象需要被多线程共享并频繁访问时，可以保证数据的一致性。</li><li>常量池优化：String 对象创建之后，会在字符串常量池中进行缓存，如果下次创建同样的对象时，会直接返回缓存的引用。</li><li>final：使用 final 来定义 String 类，表示 String 类不能被继承，提高了系统的安全性。</li></ul><h3 id="string-为什么要设计成不可变的" tabindex="-1">String 为什么要设计成不可变的？ <a class="header-anchor" href="#string-为什么要设计成不可变的" aria-label="Permalink to &quot;String 为什么要设计成不可变的？&quot;">​</a></h3><p>1）字符串常量池需要 String 不可变。因为 String 设计成不可变，当创建一个 String 对象时，若此字符串值已经存在于常量池中，则不会创建一个新的对象，而是引用已经存在的对象。如果字符串变量允许必变，会导致各种逻辑错误，如改变一个对象会影响到另一个独立对象。</p><p>2）String 对象可以缓存 hashCode。字符串的不可变性保证了 hash 码的唯一性，因此可以缓存 String 的 hashCode，这样不用每次去重新计算哈希码。在进行字符串比较时，可以直接比较 hashCode，提高了比较性能；</p><p>3）安全性。String 被许多 java 类用来当作参数，如 url 地址，文件 path 路径，反射机制所需的 Strign 参数等，若 String 可变，将会引起各种安全隐患。</p><h3 id="string、stringbuffer、stringbuilder-有什么区别" tabindex="-1">String、StringBuffer、StringBuilder 有什么区别？ <a class="header-anchor" href="#string、stringbuffer、stringbuilder-有什么区别" aria-label="Permalink to &quot;String、StringBuffer、StringBuilder 有什么区别？&quot;">​</a></h3><p>String</p><ul><li>底层使用的是 private final char[] 常量字符数组保存字符串。因此String对象是不可变的。</li><li>因为对象不可变可以保证线程安全</li></ul><p>StringBuffer</p><ul><li>底层用char[] 字符数组保存字符串。因此StringBuffer对象是可变的。</li><li>内部方法都通过synchronized关键字修饰。线程安全</li></ul><p>StringBuilder</p><ul><li>底层用char[] 字符数组保存字符串。因此StringBuilder对象是可变的。</li><li>非线程安全。</li></ul><p>速度比较： StirngBuilder &gt; StringBuffer &gt; String</p><h2 id="io流" tabindex="-1">IO流 <a class="header-anchor" href="#io流" aria-label="Permalink to &quot;IO流&quot;">​</a></h2><h3 id="java-中的io流分为几种类型" tabindex="-1">Java 中的IO流分为几种类型？ <a class="header-anchor" href="#java-中的io流分为几种类型" aria-label="Permalink to &quot;Java 中的IO流分为几种类型？&quot;">​</a></h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><ol><li>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ol><h3 id="files的常用方法都有哪些" tabindex="-1">Files的常用方法都有哪些？ <a class="header-anchor" href="#files的常用方法都有哪些" aria-label="Permalink to &quot;Files的常用方法都有哪些？&quot;">​</a></h3><ul><li>Files. exists()：检测文件路径是否存在。</li><li>Files. createFile()：创建文件。</li><li>Files. createDirectory()：创建文件夹。</li><li>Files. delete()：删除一个文件或目录。</li><li>Files. copy()：复制文件。</li><li>Files. move()：移动文件。</li><li>Files. size()：查看文件个数。</li><li>Files. read()：读取文件。</li><li>Files. write()：写入文件。</li></ul><h2 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h2><h3 id="说说你对-java-反射的理解" tabindex="-1">说说你对 Java 反射的理解 <a class="header-anchor" href="#说说你对-java-反射的理解" aria-label="Permalink to &quot;说说你对 Java 反射的理解&quot;">​</a></h3><p>在程序运行过程中，对于任意一个类，只要直到该类的完整类名称。那么便可以通过反射机制，获取该类的实例化对象。从而调用该类的任意一个方法和变量。</p><p>这种能动态获取信息及动态调用对象方法的功能称为 java 语言的反射机制。</p><p>反射的例子如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1) 获取类的 Class 对象实例 Class clz = Class.forName(&quot;com.zhenai.api.Apple&quot;);</span></span>
<span class="line"><span>2) 根 据 Class 对 象 实 例 获 取 Constructor 对 象 Constructor appConstructor = clz.getConstructor();</span></span>
<span class="line"><span>3) 使 用 Constructor 对 象 的 newInstance 方 法 获 取 反 射 类 对 象 Object appleObj = appConstructor.newInstance();</span></span>
<span class="line"><span>4) 获取方法的 Method 对象 Method setPriceMethod = clz.getMethod(&quot;setPrice&quot;, int.class);</span></span>
<span class="line"><span>5) 利用 invoke 方法调用方法 setPriceMethod.invoke(appleObj, 14);</span></span></code></pre></div><blockquote><p>反射的优缺点</p></blockquote><ul><li>优点：通过反射可以灵活的对某个类进行实例化对象，提高代码灵活度。</li><li>缺点：反射要比new多一系列解释操作，性能比new要慢。</li></ul><h3 id="反射的应用场景有哪些" tabindex="-1">反射的应用场景有哪些？ <a class="header-anchor" href="#反射的应用场景有哪些" aria-label="Permalink to &quot;反射的应用场景有哪些？&quot;">​</a></h3><p>反射是框架设计的灵魂。有很多设计、开发都与反射机制有关。</p><p>例如spring框架中的配置文件,在spring框架启动后，spring框架先读取配置文件的信息后，根据配置文件上的配置名称。来获取类的完整路径，然后通过反射机制来创建相关配置类。</p><p>应用场景如下：</p><ol><li>JDBC连接数据库时使用Class.forName()通过反射加载数据库的驱动程序；</li><li>Spring 通过XML配置将Bean对象装载到IOC容器的过程 <ol><li>spring读取xml配置文件。</li><li>解析xml配置文件，得到bean对象的类名称信息。</li><li>通过反射机制，创建bean的实例化对象。</li></ol></li></ol><p><span style="color:red;">只要在代码或配置文件中看到类的完整路径，其底层原理基本上使用Java的反射机制来创建对于的实例化对象。</span></p><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><h3 id="java序列化是什么" tabindex="-1">java序列化是什么？ <a class="header-anchor" href="#java序列化是什么" aria-label="Permalink to &quot;java序列化是什么？&quot;">​</a></h3><p>通常情况下，java对象存在JVM中。这些java对象的生命周期不会比JVM的生命周期更长。但在应用中，就可能要求在JVM停止运行之后能够持久化指定的java对象，并在将来重新读取被持久化的java对象。</p><p>Java 对象序列化可以让java对象持久化到内存和硬盘上。</p><p>使用 Java 对象序列化，在持久化java对象时，会把其状态保存为一个字节数组，在未来，再将这些字节数组转换成java对象。</p><p>注意地是，Java 对象序列化保存的是Java对象的”状态”，即它的成员变量。不会保存静态变量。</p><blockquote><p>如果让java类进行序列化</p></blockquote><p>在 Java 中，只要一个类实现了 java.io.Serializable 接口，那么这个类就可以被序列化。</p><p>通过 ObjectOutputStream 和 ObjectInputStream 对java对象进行序列化及反序列化。</p>`,136)]))}const v=t(h,[["render",o]]);export{q as __pageData,v as default};
