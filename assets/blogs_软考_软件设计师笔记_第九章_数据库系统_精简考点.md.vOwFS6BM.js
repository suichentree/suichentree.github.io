import{_ as e}from"./chunks/ruankao_20241023174341.C4ofU6QZ.js";import{_ as l,a as r,b as i}from"./chunks/ruankao_20250405163049.CH106mFt.js";import{_ as t,c as o,o as _,ak as n}from"./chunks/framework.CmzJUe0_.js";const p="/assets/ruankao_20250523173141.7ikx7SuR.png",P=JSON.parse('{"title":"软件设计师笔记_第九章_数据库系统_精简考点","description":"","frontmatter":{"title":"软件设计师笔记_第九章_数据库系统_精简考点","date":"2025-05-19T00:00:00.000Z","sidebar":"auto","tags":["软考"]},"headers":[],"relativePath":"blogs/软考/软件设计师笔记_第九章_数据库系统_精简考点.md","filePath":"blogs/软考/软件设计师笔记_第九章_数据库系统_精简考点.md"}'),s={name:"blogs/软考/软件设计师笔记_第九章_数据库系统_精简考点.md"};function h(d,a,u,c,m,b){return _(),o("div",null,a[0]||(a[0]=[n('<p>[toc]</p><h1 id="软件设计师笔记-第九章-数据库系统-精简考点" tabindex="-1">软件设计师笔记_第九章_数据库系统_精简考点 <a class="header-anchor" href="#软件设计师笔记-第九章-数据库系统-精简考点" aria-label="Permalink to &quot;软件设计师笔记_第九章_数据库系统_精简考点&quot;">​</a></h1><h2 id="数据库三级模式两级映像" tabindex="-1">数据库三级模式两级映像 <a class="header-anchor" href="#数据库三级模式两级映像" aria-label="Permalink to &quot;数据库三级模式两级映像&quot;">​</a></h2><p>三级模式：外模式-视图；概念模式-基本表；内模式-物理文件。</p><p>两级映像：</p><ul><li>外模式-概念模式映射，保证数据逻辑独立性，即数据的逻辑结构发生变化后，用户程序也可以不修改。只需要修改外模式和概念模式之间的映像。</li><li>概念模式-内模式映射，保证数据物理独立性，即当数据的物理结构发生改变时，应用程序不用改变。只需要修改概念模式和内模式之间的映像。</li></ul><h2 id="e-r图" tabindex="-1">E-R图 <a class="header-anchor" href="#e-r图" aria-label="Permalink to &quot;E-R图&quot;">​</a></h2><blockquote><p>E-R 模型图</p></blockquote><p>E-R 图中的主要构件如图所示。</p><ul><li>实体：用矩形表示。</li><li>属性：用椭圆表示。</li><li>联系：用菱形表示，分为一对一（1:1）、一对多（1:n）、多对多（m:n）。</li></ul><p><img src="'+e+'" alt="ruankao_20241023174341.png"></p><h2 id="关系代数" tabindex="-1">关系代数 <a class="header-anchor" href="#关系代数" aria-label="Permalink to &quot;关系代数&quot;">​</a></h2><p><img src="'+l+'" alt="ruankao_20250405113959.png"></p><h3 id="自然连接关系运算符" tabindex="-1">自然连接关系运算符 <a class="header-anchor" href="#自然连接关系运算符" aria-label="Permalink to &quot;自然连接关系运算符&quot;">​</a></h3><p>属性列数 = 二者之和 - 重复的列数</p><h2 id="范式" tabindex="-1">范式 <a class="header-anchor" href="#范式" aria-label="Permalink to &quot;范式&quot;">​</a></h2><p>第一范式：在关系数据库中，若每个属性都是不可再分的，则该关系数据库满足第一范式。</p><h2 id="sql语言" tabindex="-1">SQL语言 <a class="header-anchor" href="#sql语言" aria-label="Permalink to &quot;SQL语言&quot;">​</a></h2><h3 id="普通查询" tabindex="-1">普通查询 <a class="header-anchor" href="#普通查询" aria-label="Permalink to &quot;普通查询&quot;">​</a></h3><p><img src="'+r+'" alt="ruankao_20250405163003.png"></p><p><img src="'+i+'" alt="ruankao_20250405163049.png"></p><h3 id="分组查询" tabindex="-1">分组查询 <a class="header-anchor" href="#分组查询" aria-label="Permalink to &quot;分组查询&quot;">​</a></h3><ul><li><p>GROUPBY子句：在WHERE子句后面加上GROUPBY子句可以对元组进行分组，保留字GROUPBY后面跟着一个分组属性列表。最简单的情况是，FROM子句后面只有一个关系，根据分组属性对其元组进行分组。SELECT子句中使用的聚集操作符仅用在每个分组上。</p></li><li><p>HAVING子句：假如元组在分组前按照某种方式加上限制，使得不需要的分组为空，则在GROUPBY子句后面跟一个HAVING子句即可。</p></li></ul><p>当元组含有空值时，应注意以下两点：</p><ul><li>a、空值在任何聚集操作中都被忽略。它对求和、求平均值和计数都没有影响，也不能是某列的最大值或最小值</li><li>b、NULL值可以在分组属性中看作一个一般的值。</li></ul><h3 id="权限控制" tabindex="-1">权限控制 <a class="header-anchor" href="#权限控制" aria-label="Permalink to &quot;权限控制&quot;">​</a></h3><p><img src="'+p+'" alt="ruankao_20250523173141.png"></p><h2 id="事务并发" tabindex="-1">事务并发 <a class="header-anchor" href="#事务并发" aria-label="Permalink to &quot;事务并发&quot;">​</a></h2><h3 id="事务特性" tabindex="-1">事务特性 <a class="header-anchor" href="#事务特性" aria-label="Permalink to &quot;事务特性&quot;">​</a></h3><p>事务特性为ACID</p><p>A 原子性： 事务是原子的，要么做，要么都不做。 C 一致性： 事务执行的结果会导致数据库状态从一个一致性状态转换为另一个一致性状态 I 隔离性：事务之间互相隔离。 D 持久性：一旦事务成功提交，则对数据库的更新操作是永久有效的。</p><h3 id="真题" tabindex="-1">真题 <a class="header-anchor" href="#真题" aria-label="Permalink to &quot;真题&quot;">​</a></h3><ul><li><p>采用三级模式结构的数据库系统中，如果对一个表创建聚簇索引，那么改变的是数据库的（ 内模式 ）。</p></li><li><p>数据的物理独立性和逻辑独立性分别是通过修改（ 模式与内模式之间的映像、外模式与模式之间的映像 ）来完成的。</p></li><li><p>数据库系统通常采用三级模式结构：外模式、模式和内模式。这三级模式分别对应数据库的视图、基本表和存储文件。</p></li><li><p>以下关于数据库两级映像的叙述中，正确的是（ 模式/内模式映像实现了概念模式到内模式之间的相互转换 ）。</p></li><li><p>采用三级结构/两级映像的数据库体系结构，如果对数据库的一张表创建聚簇索引，改变的是数据库的（ 内模式 ）。</p></li></ul>',33)]))}const x=t(s,[["render",h]]);export{P as __pageData,x as default};
