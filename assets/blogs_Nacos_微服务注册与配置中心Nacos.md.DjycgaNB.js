import{_ as i}from"./chunks/20220728161129.9vGko5Qv.js";import{_ as l,c as t,o as e,ak as n,j as s}from"./chunks/framework.CmzJUe0_.js";const h="/assets/nacos_20220729113837.AYy-nLQD.png",k="/assets/nacos_20220729113855.1iTbzDJS.png",r="/assets/nacos_20220729113919.CNnUhZ0i.png",o="/assets/nacos_20220729113935.fplVpTFt.png",c="/assets/nacos_20220729113955.Bb1oAfzN.png",d="/assets/20220728175719.DJ5pTgoN.png",p="/assets/20220728175810.DJAaHq7P.png",E="/assets/nacos20220801151426.DAieeQ02.png",g="/assets/nacos20220801151853.CWgVrxsJ.png",y="/assets/nacos20220803144427.DhESltNo.png",u="/assets/nacos_20231115194516.DpwuxXWL.png",b="/assets/20220729150653.ovQC6qeq.png",m="/assets/nacos20220809104932.CkuT18G7.png",F="/assets/nacos20220809105912.B4ue11Am.png",v="/assets/nacos20220809110513.BBleGsbq.png",D="/assets/nacos20220809154539.DxFciQtW.png",T=JSON.parse('{"title":"微服务注册与配置中心Nacos","description":"","frontmatter":{"title":"微服务注册与配置中心Nacos","date":"2022-07-28T00:00:00.000Z","sidebar":"auto","categories":["后端"],"tags":["Nacos"]},"headers":[],"relativePath":"blogs/Nacos/微服务注册与配置中心Nacos.md","filePath":"blogs/Nacos/微服务注册与配置中心Nacos.md"}'),A={name:"blogs/Nacos/微服务注册与配置中心Nacos.md"};function C(f,a,_,x,q,B){return e(),t("div",null,a[0]||(a[0]=[n('<p>[toc]</p><h1 id="微服务注册与配置中心nacos" tabindex="-1">微服务注册与配置中心Nacos <a class="header-anchor" href="#微服务注册与配置中心nacos" aria-label="Permalink to &quot;微服务注册与配置中心Nacos&quot;">​</a></h1><p>Nacos是一种工具，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。 在SpringCloudAlibaba微服务架构中,Nacos用于注册中心和配置中心。</p><p>目前SpringCloudAlibaba中各个组件的版本搭配</p><table tabindex="0"><thead><tr><th>Spring Cloud Alibaba Version</th><th>Sentinel Version</th><th>Nacos Version</th><th>RocketMQ Version</th><th>Dubbo Version</th><th>Seata Version</th></tr></thead><tbody><tr><td>2.2.8.RELEASE</td><td>1.8.4</td><td>2.1.0</td><td>4.9.3</td><td>~</td><td>1.5.1</td></tr></tbody></table><h2 id="nacos微服务注册中心" tabindex="-1">Nacos微服务注册中心 <a class="header-anchor" href="#nacos微服务注册中心" aria-label="Permalink to &quot;Nacos微服务注册中心&quot;">​</a></h2><p>下图为微服务架构图 <img src="'+i+'" alt="20220728161129.png"></p><h3 id="注册中心的演变" tabindex="-1">注册中心的演变 <a class="header-anchor" href="#注册中心的演变" aria-label="Permalink to &quot;注册中心的演变&quot;">​</a></h3><p>注册中心用于管理所有服务、解决服务与服务之间调用关系错综复杂、难以维护的问题;</p><p>第一代：直接通过网址调用其他服务。 <img src="'+h+'" alt="nacos_20220729113837.png"></p><p>第二代：通过注册表维护其他服务的网址 <img src="'+k+'" alt="nacos_20220729113855.png"></p><p>第三代：通过nginx来维护其他服务的网址 <img src="'+r+'" alt="nacos_20220729113919.png"></p><p>第四代：通过简单注册中心来维护服务网址和服务名称 <img src="'+o+'" alt="nacos_20220729113935.png"></p><p>第五代：给注册中心加上心跳机制，并且通过部署注册中心集群等方式来维护服务网址和服务名称 <img src="'+c+'" alt="nacos_20220729113955.png"></p><h3 id="nacos注册中心的核心功能" tabindex="-1">Nacos注册中心的核心功能 <a class="header-anchor" href="#nacos注册中心的核心功能" aria-label="Permalink to &quot;Nacos注册中心的核心功能&quot;">​</a></h3><p>使用Nacos注册中心，它能提供的核心功能如下：</p><ul><li>服务注册：Nacos Client会通过发送REST请求向Nacos Server注册自己的服务，提供自身的元数据，比如ip地址、端口等信息。Nacos Server接收到注册请求后，就会把这些元数据信息存储在一个双层的内存Map中。</li><li>服务心跳：在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防止被剔除。默认5s发送一次心跳。</li><li>服务同步：Nacos Server集群之间会互相同步服务实例，用来保证服务信息的一致性。</li><li>服务发现：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面注册的服务清单，并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个定时任务定时拉取Nacos服务端最新的注册表信息更新到本地缓存中。</li><li>服务健康检查：Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳的实例会将它的healthy属性置为false(客户端服务发现时不会发现)，如果某个实例超过30秒没有收到心跳，直接剔除该实例(被剔除的实例如果恢复发送心跳则会重新注册)</li></ul><h3 id="nacos的安装与运行" tabindex="-1">Nacos的安装与运行 <a class="header-anchor" href="#nacos的安装与运行" aria-label="Permalink to &quot;Nacos的安装与运行&quot;">​</a></h3><h4 id="windows环境下nacos服务端的单机运行" tabindex="-1">windows环境下nacos服务端的单机运行 <a class="header-anchor" href="#windows环境下nacos服务端的单机运行" aria-label="Permalink to &quot;windows环境下nacos服务端的单机运行&quot;">​</a></h4><ol><li>github上找到nacos的压缩包，下载解压。注意nacos的版本。目前最新为2.1.0版本</li><li>nacos默认是集群运行的，因此应该编辑startup.cmd。将nacos从默认的集群模式，修改为单机模式。</li><li>双击运行startup.cmd 或者运行命令<code>startup.cmd -m standalone</code>，启动nacos服务端。下面是nacos启动截图</li></ol><p><img src="'+d+'" alt="20220728175719.png"><img src="'+p+`" alt="20220728175810.png"></p><ol start="4"><li>控制台界面地址：<code>http://xxxxx:8848/nacos/index.html</code>。</li></ol><p>登录页面输入用户名和密码就可以，默认的用户名和密码都是 nacos</p><p><span style="color:red;">注意：nacos单机运行的时候自带有数据源。</span></p><h4 id="windows环境下nacos服务端的集群运行" tabindex="-1">windows环境下nacos服务端的集群运行 <a class="header-anchor" href="#windows环境下nacos服务端的集群运行" aria-label="Permalink to &quot;windows环境下nacos服务端的集群运行&quot;">​</a></h4><p><span style="color:red;">注意：nacos集群运行需要使用外部数据源mysql。3个或3个以上Nacos节点才能构成集群</span></p><ol><li>github上找到nacos的压缩包，下载解压。注意nacos的版本。目前最新为2.1.0版本</li><li>nacos集群部署需要连接外部数据源mysql。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>连接外部数据源mysql步骤：</span></span>
<span class="line"><span>1. 先把/conf/nacos-mysql.sql文件运行到mysql数据库中，建库建表。</span></span>
<span class="line"><span>2. 修改/conf/application.properties文件中的数据库配置。将下面配置的注释解除</span></span>
<span class="line"><span>spring.datasource.platform=mysql</span></span>
<span class="line"><span>db.num=1</span></span>
<span class="line"><span>db.url.0=jdbc:mysql://127.0.0.1:3306/nacos-mysql?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span>
<span class="line"><span>db.user.0=root</span></span>
<span class="line"><span>db.password.0=root</span></span></code></pre></div><ol start="3"><li>修改集群配置文件。将conf/cluster.conf.example文件更名为cluster.conf,根据相应安排，添加nacos节点配置。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 这里由于nacos都是运行在同一台机器上所以ip相同。实际根据具体情况来</span></span>
<span class="line"><span>192.168.11.109:8848</span></span>
<span class="line"><span>192.168.11.109:8850</span></span>
<span class="line"><span>192.168.11.109:8852</span></span></code></pre></div><p><span style="color:red;">注意：在nacos2.x版本中,每启动一个nacos，会有3个端口被nacos使用。例如：若某个nacos端口为8848，则9848（8848+1000）端口和9849（8848+1001）会被启用。所以设置集群nacos端口时，不要设置连续端口号。</span></p><ol><li>进入bin目录，编辑startup.cmd文件，将nacos启动模式改为集群。set MODE=&quot;cluster&quot;</li><li>将下载的nacos目录复制3份，必须先停止nacos再复制，否则会报错</li><li>分别进入conf/application.properties配置文件，更改端口号，与cluster.conf文件相对应。</li><li>分别执行这三个nacos的/bin/startup.cmd文件</li></ol><p><img src="`+E+'" alt="nacos20220801151426.png"></p><ol start="8"><li>进入任意一个nacos可视化界面</li></ol><p><img src="'+g+`" alt="nacos20220801151853.png"></p><p>当部署了nacos节点的时候，有两种方式把服务端应用和nacos集群连接在一起。</p><ol start="9"><li>方式一：在每个服务的application.properties中配置多个nacos集群节点的地址</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 多个nacos注册中心地址</span></span>
<span class="line"><span>spring.cloud.nacos.discovery.server‐addr=192.168.11.109:8848,192.168.11.109:8850,192.168.11.109:8852</span></span></code></pre></div><ol start="10"><li>方式二：使用nginx为nacos集群做反向代理。在服务与服务之间做一层负载均衡。</li></ol><p><img src="`+y+`" alt="nacos20220803144427.png"></p><p>①：下载nginx，修改nginx配置文件,之后启动nginx</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>upstream nacos-cluster {</span></span>
<span class="line"><span>    # nacos节点地址</span></span>
<span class="line"><span>    server 192.168.11.109:8848;</span></span>
<span class="line"><span>    server 192.168.11.109:8850;</span></span>
<span class="line"><span>    server 192.168.11.109:8852;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>    listen       7070;</span></span>
<span class="line"><span>    server_name  localhost;</span></span>
<span class="line"><span>    location /nacos {</span></span>
<span class="line"><span>        proxy_pass http://nacos-cluster;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>②：访问nacos图形化界面 <a href="http://192.168.11.109:7070/nacos" target="_blank" rel="noreferrer">http://192.168.11.109:7070/nacos</a></p><p>③：修改application.properties配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># nacos注册中心地址</span></span>
<span class="line"><span># 若使用nginx对nacos进行负载均衡，这里则填上nginx对nacos代理的地址</span></span>
<span class="line"><span>spring.cloud.nacos.discovery.server‐addr=192.168.11.109:7070/nacos</span></span></code></pre></div><h4 id="docker环境中搭建nacos容器" tabindex="-1">Docker环境中搭建nacos容器 <a class="header-anchor" href="#docker环境中搭建nacos容器" aria-label="Permalink to &quot;Docker环境中搭建nacos容器&quot;">​</a></h4><p>步骤① 先安装docker环境，自行百度。</p><p>步骤② 下载nacos镜像文件。最新版或某个旧版本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载最新版的nacos镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos/nacos-server</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载2.1.0版本的nacos镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos/nacos-server:v2.1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载2.1.1版本的精简版nacos镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos/nacos-server:v2.1.1-slim</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><p>注意：v2.1.0版本和v2.1.1-slim版本的区别是带有slim的版本是精简版。</p><p>步骤③：创建并启动nacos容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建启动容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myNacos</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MODE=standalone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 38848:8848</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 39848:9848</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 39849:9849</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/docker/nacos/logs:/home/nacos/logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/docker/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos/nacos-server:v2.1.1-slim</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询容器日志，看是否成功启动。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myNacos</span></span></code></pre></div><p><span style="color:red;">注意：在nacos2.x版本中,会有3个端口被nacos使用。例如：若某个nacos端口为8848，则9848（8848+1000）端口和9849（8848+1001）会被启用。所以如果设置集群nacos端口时，不要设置连续端口号。</span></p><p>如图是windwos的docker客户端安装nacos容器。 <img src="`+u+'" alt="nacos_20231115194516.png"></p><p>步骤④：访问nacos控制台界面</p><p>控制台界面地址：<code>http://localhost:8848/nacos/index.html</code></p><p>登录页面输入用户名和密码就可以，默认的用户名和密码都是 nacos</p><p><img src="'+p+`" alt="20220728175810.png"></p><h3 id="spring-cloud-alibaba-引入-nacos注册中心" tabindex="-1">Spring Cloud Alibaba 引入 Nacos注册中心 <a class="header-anchor" href="#spring-cloud-alibaba-引入-nacos注册中心" aria-label="Permalink to &quot;Spring Cloud Alibaba 引入 Nacos注册中心&quot;">​</a></h3><p><span style="color:red;">注意：示例为使用springbootalibaba微服务架构的项目</span></p><ol><li>确保父项目Pom中引入spring cloud和spring cloud alibaba依赖</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencyManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-dependencies&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hoxton.SR12&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;pom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;import&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-alibaba-dependencies&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.2.8.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;pom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;import&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencyManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li>给当前子项目pom引入Nacos Discovery依赖</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><span style="color:red;"><p>注意 1.此处不用写版本号，是因为父项目pom引入了spring-cloud-alibaba的依赖，该依赖中包含了nacos-discovery的版本号. 2.若写了版本号，则表示是当前子项目单独引入nacos-discovery依赖，而不是继承父项目alibaba依赖中的nacos依赖。</p></span><ol start="3"><li>当前项目application.properties中配置</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 服务端口</span></span>
<span class="line"><span>server.port=9090</span></span>
<span class="line"><span># 服务名称</span></span>
<span class="line"><span>spring.application.name=user-service</span></span>
<span class="line"><span># 是否启用nacos注册中心</span></span>
<span class="line"><span>spring.cloud.nacos.discovery.enabled=true</span></span>
<span class="line"><span># nacos注册中心地址</span></span>
<span class="line"><span>spring.cloud.nacos.discovery.server‐addr=localhost:8848</span></span></code></pre></div><ol start="4"><li>启动当前项目，访问nacos管理页面 <code>http://localhost:8848/nacos</code> 上看到当前服务注册到nacos中</li></ol><p><img src="`+b+`" alt="20220729150653.png"></p><ol start="5"><li>测试调用服务 使用restTemplate调用注册中心的服务，注意要给restTemplate添加@LoadBalanced注解，该注解用于开启负载均衡。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-------------这里是启动类UserApplication.java</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LoadBalanced</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RestTemplate </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RestTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-------------这里是控制层类userController.java</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RestTemplate restTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/rest1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //用restTemplate调用注册中心的服务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //这里调用其他服务接口的时候，不填写ip端口，直接填写nacos注册中心的服务名。例如：user-service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> restTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getForObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://user-service/user/get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,String.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/rest2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restTemplate2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //用restTemplate调用注册中心的服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> restTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getForObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://order-service/order/get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,String.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/rest3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restTemplate3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //用restTemplate调用注册中心的服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> restTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getForObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://product-service/product/get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,String.class);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Nacos注册中心的的部分配置信息,详细配置参考官网</p></blockquote>`,72),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"配置项"),s("th",null,"Key"),s("th",null,"默认值"),s("th",null,"说明")])]),s("tbody",null,[s("tr",null,[s("td",null,"服务端地址"),s("td",null,"spring.cloud.nacos.discovery.server-addr"),s("td",null,"无"),s("td",null,"Nacos Server 启动监听的ip地址和端口")]),s("tr",null,[s("td",null,"服务名"),s("td",null,"spring.cloud.nacos.discovery.service"),s("td",{"spring.application.name":""},"$"),s("td",null,"给当前的服务命名")]),s("tr",null,[s("td",null,"服务分组"),s("td",null,"spring.cloud.nacos.discovery.group"),s("td",null,"DEFAULT_GROUP"),s("td",null,"设置服务所处的分组")]),s("tr",null,[s("td",null,"命名空间"),s("td",null,"spring.cloud.nacos.discovery.namespace"),s("td",null,"无"),s("td",null,"常用场景之一是不同环境的注册的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等")]),s("tr",null,[s("td",null,"是否启用nacos注册中心"),s("td",null,"spring.cloud.nacos.discovery.enabled"),s("td",null,"true"),s("td",null,"是否启用nacos注册中心")])])],-1),n('<h2 id="nacos微服务配置中心" tabindex="-1">Nacos微服务配置中心 <a class="header-anchor" href="#nacos微服务配置中心" aria-label="Permalink to &quot;Nacos微服务配置中心&quot;">​</a></h2><p>下图为微服务架构图 <img src="'+i+'" alt="20220728161129.png"></p><h3 id="配置中心介绍" tabindex="-1">配置中心介绍 <a class="header-anchor" href="#配置中心介绍" aria-label="Permalink to &quot;配置中心介绍&quot;">​</a></h3><p>在微服务架构中，配置中心就是统一管理各个微服务配置文件的服务。每个微服务都有自己的配置文件，为了统一维护，方便管理，所以出现了配置中心的概念。所有的微服务配置文件都在配置中心中管理和读取，因此，出现了配置中心的概念。</p><p>nacos配置中心有三个要点：命名空间Namespace,分组Group,配置集DataId。</p><p><img src="'+m+'" alt="nacos20220809104932.png"></p><p>① 新增命名空间Namespace <img src="'+F+'" alt="nacos20220809105912.png"></p><p>命名空间默认值为public，如果不单独配置命名空间，那么默认所有的配置信息都在public命名空间中。若配置了命名空间，则namespace的值为命令空间id Namespace 的常用场景是不同环境的配置的区分隔离，例如开发测试环境和生产环境的隔离等。</p><p>② 新增配置文件：分组Group,配置集DataId <img src="'+v+`" alt="nacos20220809110513.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Data ID是配置项的唯一标识，它的命名是有一定规范的。</span></span>
<span class="line"><span>Data ID的命名规范是：</span></span>
<span class="line"><span>\${prefix}-\${spring.profiles.active}.\${file-extension}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* prefix 默认为配置项spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.prefix来配置。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* spring.profiles.active 即为当前环境对应的 profile。 </span></span>
<span class="line"><span>注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 \${prefix}.\${file-extension}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。默认为properties类型。目前只支持 properties 和 yaml 类型。</span></span></code></pre></div><p><span style="color:red;">例如：某个微服务服务名叫user-service，开发环境为dev。file-extension扩展格式为yaml，则该微服务对应的配置文件的Data ID要命名为user-service-dev.yaml。</span></p><h3 id="spring-cloud-alibaba引入nacos配置中心服务" tabindex="-1">Spring Cloud Alibaba引入Nacos配置中心服务 <a class="header-anchor" href="#spring-cloud-alibaba引入nacos配置中心服务" aria-label="Permalink to &quot;Spring Cloud Alibaba引入Nacos配置中心服务&quot;">​</a></h3><p>① 给某个微服务引入Nacos配置中心依赖</p><p>该依赖是从父项目继承来的，所以无需填写版本号。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-config&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>② 创建bootstrap.properties配置文件</p><p><span style="color:red;">当项目启动后，项目拉取nacos配置中心的数据，是在读取application.yml文件之前。因此需要在项目中创建bootstrap.properties配置文件。bootstrap.yml配置文件是先于application.yml文件加载到项目中。启动后的项目会根据bootstrap.properties配置文件去拉取nacos配置中心数据。</span></p><p>spring.application.name和spring.profiles.active配置可以不写在bootstrap.properties配置文件中,这里是为了方便展示</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 服务名称</span></span>
<span class="line"><span>spring.application.name=user-service</span></span>
<span class="line"><span># 当前环境</span></span>
<span class="line"><span>spring.profiles.active=dev</span></span>
<span class="line"><span># 配置中心地址</span></span>
<span class="line"><span>spring.cloud.nacos.config.server‐addr=localhost:8848</span></span>
<span class="line"><span># 配置文件命名空间，不定义的时候默认为public，定义的时候，namespace值为命令空间的ID</span></span>
<span class="line"><span># spring.cloud.nacos.config.namespace=public</span></span>
<span class="line"><span># 配置文件分组，默认为DEFAULT_GROUP</span></span>
<span class="line"><span>spring.cloud.nacos.config.group=DEFAULT_GROUP</span></span>
<span class="line"><span># 配置文件后缀，默认为properties</span></span>
<span class="line"><span>spring.cloud.nacos.config.file-extension=properties</span></span></code></pre></div><p>根据上面例子的配置，该微服务会拉取public命名空间下DEFAULT_GROUP分组下的user-service-dev.properties配置文件。</p><p><span style="color:red;">注意：只有在配置文件中不定义namespace=public，微服务可以读取配置中心public命令空间中的数据。否则不行。此处为Nacos的一个bug。</span></p><p>③：读取配置中心的配置信息</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//@Value注解可以获取到配置中心的值，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//但是无法动态获取配置中心实时修改后的值，需要利用@RefreshScope注解进行动态刷新</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.example.user.controller;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RestController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/userConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RefreshScope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserConfigController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${username}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String username;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${age}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/getConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>④：重启服务运行</p><p><img src="`+D+`" alt="nacos20220809154539.png"></p><p>当微服务正确监听到配置中心数据后，nacos配置中心可以查询到配置文件正在被那个服务端进行监听。</p><h3 id="自定义扩展的-data-id-配置" tabindex="-1">自定义扩展的 Data Id 配置 <a class="header-anchor" href="#自定义扩展的-data-id-配置" aria-label="Permalink to &quot;自定义扩展的 Data Id 配置&quot;">​</a></h3><p>nacos配置中心支持自定义扩展的 Data Id 配置。可以解决多个应用间配置共享的问题，又可以支持一个应用有多个配置文件。</p><p>bootstrap.properties配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 配置中心地址</span></span>
<span class="line"><span>spring.cloud.nacos.config.server‐addr=localhost:7070/nacos</span></span>
<span class="line"><span># 配置文件命名空间，不定义的时候默认为public，定义的时候，namespace值为命令空间的ID</span></span>
<span class="line"><span># spring.cloud.nacos.config.namespace=public</span></span>
<span class="line"><span># 配置文件分组，默认为DEFAULT_GROUP</span></span>
<span class="line"><span>spring.cloud.nacos.config.group=DEFAULT_GROUP</span></span>
<span class="line"><span># 配置文件后缀，默认为properties</span></span>
<span class="line"><span>spring.cloud.nacos.config.file-extension=properties</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 通过shared-configs可以支持读取多个配置文件,数组形式</span></span>
<span class="line"><span>#  不同工程下的通用配置 支持共享的 DataId</span></span>
<span class="line"><span>spring.cloud.nacos.config.shared-configs[0].data-id=shared01.properties</span></span>
<span class="line"><span>spring.cloud.nacos.config.shared-configs[0].group=DEFAULT_GROUP</span></span>
<span class="line"><span>spring.cloud.nacos.config.shared-configs[0].refresh=true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## 通过extension-configs可以支持读取多个配置文件,数组形式</span></span>
<span class="line"><span># 支持一个应用多个 DataId 的配置 一定要加扩展名</span></span>
<span class="line"><span>spring.cloud.nacos.config.extension-configs[0].data-id=extension01.properties</span></span>
<span class="line"><span>spring.cloud.nacos.config.extension-configs[0].group=DEFAULT_GROUP</span></span>
<span class="line"><span>spring.cloud.nacos.config.extension-configs[0].refresh=true</span></span></code></pre></div><ul><li>shared-configs：主要用于不同工程下的通用配置。</li><li>extension-configs： 主要用于一个工程下的扩展配置。</li></ul><p>不同Data Id 配置的优先级关系：</p><p>优先级从高到低： 1) useservice-dev.properties 精准配置。不带有profile形式 2) useservice.properties 同工程不同环境的通用配置。带有profile形式 3) extension-configs: 不同工程 扩展配置 4) shared-configs 不同工程通用配置</p><p><span style="color:red;">当bootstrap.properties配置文件同时出现上面三种DataID设置时。对于同一个属性，高优先级的会覆盖低优先级的。例如高优先级的username属性会覆盖低优先级的username属性。</span></p>`,34)]))}const I=l(A,[["render",C]]);export{T as __pageData,I as default};
