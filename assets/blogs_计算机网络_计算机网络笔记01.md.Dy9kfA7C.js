import{_ as o,c as a,o as t,ak as i}from"./chunks/framework.CmzJUe0_.js";const l="/assets/blog_20240807113426.cg-G9U5A.png",s="/assets/blog_20240807115033.CRngmdPc.png",p="/assets/blog_20240807150252.DZFEmcC3.png",r="/assets/blog_20240807151317.E-AunPoF.png",n="/assets/blog_20240807151348.D-wgjbBE.png",d="/assets/blog_20240807151421.DCo4ZCL1.png",c="/assets/python_20240815155039.BiS1kH5w.png",S=JSON.parse('{"title":"计算机网络笔记01","description":"","frontmatter":{"title":"计算机网络笔记01","date":"2023-12-05T00:00:00.000Z","sidebar":"auto","categories":["计算机网络"],"tags":["计算机网络"]},"headers":[],"relativePath":"blogs/计算机网络/计算机网络笔记01.md","filePath":"blogs/计算机网络/计算机网络笔记01.md"}'),h={name:"blogs/计算机网络/计算机网络笔记01.md"};function T(u,e,P,q,b,k){return t(),a("div",null,e[0]||(e[0]=[i('<p>[toc]</p><h1 id="计算机网络笔记01" tabindex="-1">计算机网络笔记01 <a class="header-anchor" href="#计算机网络笔记01" aria-label="Permalink to &quot;计算机网络笔记01&quot;">​</a></h1><h2 id="http的基本原理" tabindex="-1">HTTP的基本原理 <a class="header-anchor" href="#http的基本原理" aria-label="Permalink to &quot;HTTP的基本原理&quot;">​</a></h2><h3 id="超文本" tabindex="-1">超文本 <a class="header-anchor" href="#超文本" aria-label="Permalink to &quot;超文本&quot;">​</a></h3><p>超文本（Hyper Text），我们在浏览器中看到的网页就是超文本解析而成的。</p><p>因此超文本就是HTML网页。</p><h3 id="http-和-https" tabindex="-1">HTTP 和 HTTPS <a class="header-anchor" href="#http-和-https" aria-label="Permalink to &quot;HTTP 和 HTTPS&quot;">​</a></h3><p>HTTP全称是超文本传输协议( Hyper Text Transfer Protocol )。HTTP协议是用于从网络中把超文本（HTML网页）传输到浏览器的协议。</p><p>HTTPS全称是超文本安全传输协议( Hyper Text Transfer Protocol over Secure Socket Layer )。HTTPS协议是HTTP协议的安全版，即在HTTP下加入了SSL层，简称为HTTPS协议。</p><p>HTTPS的安全基础是SSL，因此通过HTTPS协议传输的数据都是经过SSL加密的。它的主要作用分为两种：</p><ul><li>建立一个信息安全通道，来保证数据传输的安全。</li><li>确认网站的真实性，凡是使用了HTTPS的网站。都可以通过点击浏览器地址栏的锁头标志，来查询网站的认证信息，从而确定网站的真实性。</li></ul><h3 id="http的请求过程" tabindex="-1">HTTP的请求过程 <a class="header-anchor" href="#http的请求过程" aria-label="Permalink to &quot;HTTP的请求过程&quot;">​</a></h3><p>请求过程大致如下：</p><ol><li>浏览器输入网站地址（URL），此时相当于浏览器向网站所在的服务器发送一个请求。</li><li>网站服务器接受到这个请求后，进行处理和解析。</li><li>当网站处理完请求后，返回一个响应给浏览器。这个响应包含网页或数据。</li><li>浏览器接受到响应后，对响应进行解析和处理。最终将网页或数据呈现在浏览器上。</li></ol><p><img src="'+l+'" alt="blog_20240807113426.png"></p><h3 id="http请求" tabindex="-1">HTTP请求 <a class="header-anchor" href="#http请求" aria-label="Permalink to &quot;HTTP请求&quot;">​</a></h3><p>通常情况下，客户端向服务器发出一个请求。这个请求是一串数据文本。</p><p>通常一个HTTP请求可以分为4部分：请求方式（Request Method），请求链接（Request URL），请求头（Request Headers），请求体（Request Body）。</p><h4 id="请求方式-request-method" tabindex="-1">请求方式（Request Method） <a class="header-anchor" href="#请求方式-request-method" aria-label="Permalink to &quot;请求方式（Request Method）&quot;">​</a></h4><p>常见的请求方式主要分为两种：GET请求 和 POST请求。</p><blockquote><p>GET请求 和 POST请求的区别</p></blockquote><ul><li>GET请求中的请求参数是写在请求链接（Request URL）中的，请求参数是可以在URL中看到的。而POST请求的请求参数是写在请求体中的。</li><li>由于请求链接（Request URL）是有长度限制，请求体（Request Body）没有长度限制。因此GET请求的请求参数最多只有1024字节。而POST请求的请求参数长度没有限制。</li></ul><p>绝大部分请求都是GET请求 和 POST请求。除此之外还有其他请求。如图所示。</p><p><img src="'+s+'" alt="blog_20240807115033.png"></p><h4 id="请求链接-request-url" tabindex="-1">请求链接（Request URL） <a class="header-anchor" href="#请求链接-request-url" aria-label="Permalink to &quot;请求链接（Request URL）&quot;">​</a></h4><p>请求链接就是我们想要获取的数据资源的位置。</p><h4 id="请求头-request-headers" tabindex="-1">请求头（Request Headers） <a class="header-anchor" href="#请求头-request-headers" aria-label="Permalink to &quot;请求头（Request Headers）&quot;">​</a></h4><p>由于请求本质上是一串数据文本。而请求头用来设置请求中的各种附加信息。</p><p>下面是常见的请求头：</p><ul><li>Accept: 请求报头域，用来指定发送请求的客户端可以接受那种类型的数据。</li><li>Accept-Language: 指定客户端可接受的语言。</li><li>Accept-Encoding: 指定客户端可接受的数据编码格式。</li><li>Host: 指定客户端的IP和端口号。</li><li>Cookie: 主要功能是维持当前访问会话。用户登录网站成功后，Cookie会存储服务器发送过来的会话消息。之后每次向该网站发送请求的时候，会携带这个Cookie。此时服务器会识别用户，并且查询出当前用户是已登录状态。</li><li>Referer: 用来标识请求的来源。服务器可以拿到这个信息并进行处理。例如来源统计，图片防盗链处理。</li><li>User-Agent: 简称UA，用来设置客户端的设备信息。例如客户端使用的操作系统，浏览器信息。</li><li>Content-Type: 用来标识请求体中的数据类型。例如 <code>text/html</code>代表请求体中的数据是html格式的。<code>image/gif</code>代表GIF图片。<code>application/json</code>代表json类型数据。</li></ul><h4 id="请求体-request-body" tabindex="-1">请求体（Request Body） <a class="header-anchor" href="#请求体-request-body" aria-label="Permalink to &quot;请求体（Request Body）&quot;">​</a></h4><p>请求体一般承载的内容是POST请求中的请求参数。GET请求没有请求体。</p><p>通常情况下，请求体中的数据可以有多种格式。我们主要是通过请求头中的<code>Content-Type</code>属性来标识请求体中的数据是什么格式。</p><blockquote><p>请求头中的<code>Content-Type</code>属性与请求体数据的关系</p></blockquote><p><img src="'+p+'" alt="blog_20240807150252.png"></p><p>例如当请求体中的数据是json格式的时候，我们需要在请求头的<code>Content-Type</code>属性设置为<code>application/json</code>。表示请求体中的数据是json格式。</p><p>当服务器接受到这个请求的时候，它会先读取请求头的<code>Content-Type</code>属性，然后根据属性值，来解析并处理请求体中的数据。</p><h3 id="http响应" tabindex="-1">HTTP响应 <a class="header-anchor" href="#http响应" aria-label="Permalink to &quot;HTTP响应&quot;">​</a></h3><p>通常情况下，响应是指服务器给客户端发送的请求。响应分为三个部分：响应状态码（Response Status Code）、响应头（Response Headers）和 响应体（Response Body）。</p><h4 id="响应状态码-response-status-code" tabindex="-1">响应状态码（Response Status Code） <a class="header-anchor" href="#响应状态码-response-status-code" aria-label="Permalink to &quot;响应状态码（Response Status Code）&quot;">​</a></h4><p>响应状态码表示服务器的响应状态。</p><p>我们可以根据服务器的响应状态码，来判断请求是否成功。如图是常见的响应状态码。</p><p><img src="'+r+'" alt="blog_20240807151317.png"><img src="'+n+'" alt="blog_20240807151348.png"><img src="'+d+'" alt="blog_20240807151421.png"></p><h4 id="响应头-response-headers" tabindex="-1">响应头（Response Headers） <a class="header-anchor" href="#响应头-response-headers" aria-label="Permalink to &quot;响应头（Response Headers）&quot;">​</a></h4><p>由于响应本质上是一串数据文本。而响应头用来设置响应中的各种附加信息。其中包含了服务器对请求的应答信息。</p><p>下面是常见的请求头：</p><ul><li>Date: 响应产生的时间。</li><li>Last-Modified: 指定资源的最后修改时间。</li><li>Content-Encoding: 指定响应中数据的编码格式。</li><li>Server：包含服务器的信息，例如名称，版本号等。</li><li>Content-Type: 指定响应体中的数据类型。例如 <code>text/html</code>代表响应体中的数据是html格式的。<code>image/gif</code>代表GIF图片。<code>application/json</code>代表json类型数据。</li><li>Set-Cookie: 设置Cookile。告诉客户端需要把此内容放到Cookie中。</li><li>Expires: 指定响应的过期时间。可以让代理服务器或浏览器将响应内容更新到缓存中。如果再次访问的时候，就可以直接在缓存中加载，直到过期时间为止。</li></ul><h4 id="响应体-response-body" tabindex="-1">响应体（Response Body） <a class="header-anchor" href="#响应体-response-body" aria-label="Permalink to &quot;响应体（Response Body）&quot;">​</a></h4><p>通常情况下，响应体中的数据可以有多种格式。我们主要是通过响应头中的<code>Content-Type</code>属性来标识响应体中的数据是什么格式。</p><p>响应体与请求体同理。不再赘述。</p><h3 id="http的无状态性" tabindex="-1">HTTP的无状态性 <a class="header-anchor" href="#http的无状态性" aria-label="Permalink to &quot;HTTP的无状态性&quot;">​</a></h3><p>HTTP有一个特性，叫作无状态性。</p><p>HTTP的无状态性是指 HTTP协议 对事务处理是没有记忆能力。即服务器不知道客户端的状态是什么。</p><p>当客户端向服务器发送多个请求后，服务器解析这多个请求，然后返回响应。在这个过程中，服务器不会记录多个请求的关联性，服务器只负责接受请求，并且分析处理，响应即可。</p><p>也就是说服务器缺少状态记录。这意味着如果后续需要服务器再次处理之前的请求，则必须要客户端重新发送之前的请求。</p><p>为了能够让HTTP保持状态，会话和Cookie 技术便出现了。</p><h4 id="会话session-和-cookie" tabindex="-1">会话Session 和 Cookie <a class="header-anchor" href="#会话session-和-cookie" aria-label="Permalink to &quot;会话Session 和 Cookie&quot;">​</a></h4><p>会话 本义是指有始有终的一系列动作或消息。例如打电话时，从拿起电话-&gt; 互相交流 -&gt; 挂断电话。这一系列过程都可以称为一个会话。</p><p>在WEB中，会话是指保存在服务器上的用户状态信息。当用户发送多个请求给服务器的时候，服务器会一直保存该用户的会话信息。</p><p>在WEB中，Cookie是指保存在客户端（浏览器）中的用户状态信息。主要是为了辨别用户身份，并进行会话跟踪。</p><blockquote><p>如何通过会话Session 和 Cookie，从而让HTTP请求保持状态？</p></blockquote><ol><li>当客户端第一次向服务器发送请求的时候，服务器会返回一个响应。响应头中包含<code>Set-Cookie</code>属性。</li><li>客户端读取响应中的<code>Set-Cookie</code>属性，其中包含会话信息。之后把属性值作为Cookie保存起来。</li><li>当客户端再一次请求该服务器的时候，客户端会把Cookie 放到请求头，并一起发送给服务器。</li><li>Cookies 携带了会话 ID 信息，服务器解析该 Cookies 即可找到对应的会话是什么，然后再判断会话是属于哪个用户的。</li><li>若服务器发现该会话信息是有效的，则证明该用户是属于登录状态，那么服务器就响应数据。否则响应失败，或者让用户重新登录。</li></ol><p>因此 会话 和 Cookie需要互相配合，一个保存在服务器上，一个保存在客户端上，二者共同协作，就实现了 登录会话控制。从而让HTTP请求保持状态。</p><h4 id="cookie-状态管理" tabindex="-1">Cookie 状态管理 <a class="header-anchor" href="#cookie-状态管理" aria-label="Permalink to &quot;Cookie 状态管理&quot;">​</a></h4><p>Cookie和Session 都是用来保存状态信息的。Cookie是状态信息保存在客户端（浏览器）上，而Session是将状态信息保存在服务端上。它们都是用来解决 HTTP 无状态的问题而出现的概念。</p><p>Cookie是客户端上存储的一小段文本，并且Cookie会随着每一个请求发送给服务端上。</p><p>Cookie的工作方式：服务端给每个会话Session分配一个唯一的JSESSEIONID，并作为cookie将其发送给客户端。当客户端对该服务器发送请求的时候，客户端会携带上这个cookie。这样服务端会接受到cookie，解析出JSESSEIONID，从而知道这个请求是哪个客户端发送的。</p><p><img src="'+c+'" alt="python_20240815155039.png"></p><h2 id="代理的基本原理" tabindex="-1">代理的基本原理 <a class="header-anchor" href="#代理的基本原理" aria-label="Permalink to &quot;代理的基本原理&quot;">​</a></h2><p>一般情况下，网站会采取一些反爬虫措施。</p><p>比如，服务器会检测某个 IP 在单位时间内的请求次数，如果超过了这个阔值，就会直接拒绝服务，返问一些错误信息，这种情况可以称为封 IP。</p><p>针对封IP，一种有效的应对措施，就是使用代理服务器。通过代理服务器来伪装客户端的真实IP，当代理服务器的IP被封的时候，直接更换代理服务器即可。</p><h3 id="什么是代理服务器" tabindex="-1">什么是代理服务器？ <a class="header-anchor" href="#什么是代理服务器" aria-label="Permalink to &quot;什么是代理服务器？&quot;">​</a></h3><p>代理服务器相当于网络的中转站。</p><p>在我们正常请求一个网站时， 是发送了请求给目标服务器，然后目标服务器把响应传回给我们。如果设置了代理服务器相当于在本机和目标服务器之间搭建了一个中转站。 此时本机不是直接向目标服务器发起请求，而是把请求发送给代理服务器，然后由代理服务器再发送给目标服务器，接着由代理服务器再把目标服务器返回的响应转发给本机。</p><p>在这个过程中目标服务器识别的真实IP地址，不是本地的IP地址，而是目标服务器的IP地址。这就是代理的基本原理。</p><h3 id="代理的作用" tabindex="-1">代理的作用 <a class="header-anchor" href="#代理的作用" aria-label="Permalink to &quot;代理的作用&quot;">​</a></h3><ul><li>突破 IP 访问限制，访问一些平时不能访问的站点。</li><li>访问一些单位或组织机构的内网。</li><li>提高访问速度。</li><li>隐藏真实IP。对于爬虫来说，用代理就是为了隐藏自身IP。防止自身的IP被封锁，被攻击。</li></ul><h3 id="代理的分类" tabindex="-1">代理的分类 <a class="header-anchor" href="#代理的分类" aria-label="Permalink to &quot;代理的分类&quot;">​</a></h3><p>代理分类时，既可以根据协议区分，也可以根据其匿名程度区分。</p><p>①根据协议区分：</p><ul><li>FTP 代理服务器： 用于访问FTP服务器，有上传，下载功能。端口一般为21，2121等。</li><li>HTTP 代理服务器：用于访问网页。端口一般为80，8080，3128等功能。</li><li>SSL/TLS 代理服务器：用于访问加密网站，有SSL或TLS加密功能，端口一般为443。</li><li>RTSP 代理服务器：用于访问流媒体服务器。端口为554。</li><li>Telnet 代理服务器：用于telnet远程控制，端口为23。</li><li>POP3/STMP 代理服务器： 主要用于POP3/SMTP 方式收发邮件， 具有缓存功能，端口一般为110,25等</li><li>SOCKS 代理服务器：主要用于收发数据包，端口一般为1080。</li></ul><p>②根据匿名程序分类：</p><ul><li>透明代理服务器：透明代理服务器会改动数据包，还会告诉目标服务器，客户端的真实IP。这种代理服务器一般用于缓存和内容过滤。除此之外，并无其他显著作用。</li><li>普通匿名代理服务器：普通匿名代理服务器会改动数据包。目标服务器可能会发现这是一个代理服务器，也有一定几率追查到客户端的真实IP。代理服务器通常会加入的HTTP请求头有<code>HTTP_VIA</code>和<code>HTTP_X_FORWARDED_FOR</code>。</li><li>高度匿名代理服务器：高度匿名代理服务器不会改动数据包，只会将数据包进行转发。在目标服务器看这就是一个普通客户端在访问，并且查询的真实IP也是高度匿名代理服务器的IP。</li><li>间谍代理服务器：是指组织或机构创建的用于记录用户输入数据，并进行分析研究的代理服务器。</li></ul>',84)]))}const m=o(h,[["render",T]]);export{S as __pageData,m as default};
