import{_ as s,c as i,o as e,ak as t}from"./chunks/framework.CmzJUe0_.js";const l="/assets/blog_20240730161049.3nMEDsbd.png",u=JSON.parse('{"title":"多租户系统","description":"","frontmatter":{"title":"多租户系统","date":"2024-07-30T00:00:00.000Z","sidebar":"auto","categories":["随笔"]},"headers":[],"relativePath":"blogs/随笔/多租户系统.md","filePath":"blogs/随笔/多租户系统.md"}'),p={name:"blogs/随笔/多租户系统.md"};function h(n,a,o,r,d,k){return e(),i("div",null,a[0]||(a[0]=[t('<p>[toc]</p><h1 id="多租户系统" tabindex="-1">多租户系统 <a class="header-anchor" href="#多租户系统" aria-label="Permalink to &quot;多租户系统&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><blockquote><p>什么是多租户系统？</p></blockquote><p>一般情况下，如果我们设计一个学生管理系统，需要提供给不同的学校客户使用。那么我们需要把这个系统给每个学校去单独部署一套。</p><p>但是对于多租户的学生管理系统，可以让不同的学校客户共用这一套系统，但是学校客户又感知不到这点，就像为他们单独部署了一套学生管理系统一样。</p><p><span style="color:red;">多租户系统的定义：多租户是一种软件架构技术，实现如何在多用户的环境下，共用相同的系统或程序组件，并可保持各用户间数据的隔离性。</span></p><p>这里的用户即租户，租户狭义上理解就是使用系统的人。广义上来说还应该包括创建的系统、数据等一切与当前租户有关的系统资源。</p><blockquote><p>如何实现多租户的效果？</p></blockquote><p>多租户系统相比传统系统最明显的区别就是数据隔离。多租户系统通过数据隔离的方式，可以让不同的用户共用一套系统或程序组件，并可保持各个用户间数据的隔离性。</p><h2 id="数据隔离的模式" tabindex="-1">数据隔离的模式 <a class="header-anchor" href="#数据隔离的模式" aria-label="Permalink to &quot;数据隔离的模式&quot;">​</a></h2><p>数据隔离有以下几种方式。</p><ol><li>share everthing：数据库和schema共享，通过租户标识逻辑分离；</li><li>共享数据库和共享schema：新租户单独生产新的独立schema；</li><li>独立数据库：为每个租户分配独立数据库；</li></ol><h3 id="字段隔离模式" tabindex="-1">字段隔离模式 <a class="header-anchor" href="#字段隔离模式" aria-label="Permalink to &quot;字段隔离模式&quot;">​</a></h3><p>字段隔离模式是指，所有用户共用一个数据库实例，但是通过给表中额外增加一个字段，来区分不同来源的数据。从而将将多租户系统中的数据进行数据隔离。</p><p>例如查询出xxx学校中的小明学生。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;小明&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xxx学校&quot;</span></span></code></pre></div><h3 id="用户隔离模式" tabindex="-1">用户隔离模式 <a class="header-anchor" href="#用户隔离模式" aria-label="Permalink to &quot;用户隔离模式&quot;">​</a></h3><p>字段隔离模式是指，所有用户共用一个数据库实例，但是通过给数据库创建不同的用户。以Mysql数据库为例，就是建立多个Mysql用户，每个Mysql用户下都有完整的独立的表。</p><p>通过不同的Mysql用户的方式，来将多租户系统中的数据进行数据隔离。</p><h3 id="独立数据库模式" tabindex="-1">独立数据库模式 <a class="header-anchor" href="#独立数据库模式" aria-label="Permalink to &quot;独立数据库模式&quot;">​</a></h3><p>独立数据库模式是指，多租户系统中的数据，通过不同的数据库来把数据进行隔离。以Mysql数据库为例，就是装有很多个Mysql服务，每个租户对应一个实例 ，每个实例下具有相同的Schema和表 。</p><p>之后根据租户动态进行数据源切换，获取对应租户的数据库实例。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>总之，要做好租户之间的数据隔离，一个租户不应该看到其他租户下的数据，以满足业务需求。</p><ul><li>独立数据库模式，隔离性好，但资源利用率低。</li><li>完全共享模式，隔离性弱，但资源利用率高。</li><li>具体采用哪种方式，可以根据租户需求和付费情况，具备灵活配置迁移的能力。</li></ul><p><img src="'+l+'" alt="blog_20240730161049.png"></p><p>在当前云原生技术下，资源弹性、部署都比较简单。完全可以为单独的大租户动态扩展一套独立的容器集群为该租户服务，实现该租户独享一组容器资源，而非共享。</p><p>简而言之，通过</p>',29)]))}const _=s(p,[["render",h]]);export{u as __pageData,_ as default};
