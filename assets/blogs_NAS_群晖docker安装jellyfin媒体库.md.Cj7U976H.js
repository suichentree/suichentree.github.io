import{_ as l}from"./chunks/20230102145428.DETfjDaF.js";import{_ as a,c as n,o as i,ak as s}from"./chunks/framework.CmzJUe0_.js";const t="/assets/20230102144145.DgCXpuUB.png",r="/assets/20230102144904.DfBrMcvz.png",p="/assets/20230102145012.YkIHPNU5.png",o="/assets/20230102145850.ks99uKYJ.png",c="/assets/20230102150252.Cq5SQnML.png",f="/assets/20230102151016.D-rHp140.png",d="/assets/20230102151755.DlPNirQT.png",_="/assets/20230102152003.DQ_tQeJJ.png",P=JSON.parse('{"title":"群晖docker安装jellyfin媒体库","description":"","frontmatter":{"title":"群晖docker安装jellyfin媒体库","date":"2023-01-02T00:00:00.000Z","sidebar":"auto","categories":["NAS"],"tags":["群晖"]},"headers":[],"relativePath":"blogs/NAS/群晖docker安装jellyfin媒体库.md","filePath":"blogs/NAS/群晖docker安装jellyfin媒体库.md"}'),y={name:"blogs/NAS/群晖docker安装jellyfin媒体库.md"};function h(j,e,m,g,k,b){return i(),n("div",null,e[0]||(e[0]=[s(`<p>[toc]</p><h2 id="群晖docker安装jellyfin媒体库" tabindex="-1">群晖docker安装jellyfin媒体库 <a class="header-anchor" href="#群晖docker安装jellyfin媒体库" aria-label="Permalink to &quot;群晖docker安装jellyfin媒体库&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>jellyfin媒体库</span></span>
<span class="line"><span>Jellyfin 是一个自由的软件媒体系统，用于控制和管理媒体和流媒体。</span></span>
<span class="line"><span>它是 emby 和 plex 的替代品，它通过多个应用程序从专用服务器向终端用户设备提供媒体。</span></span>
<span class="line"><span>Jellyfin 属于 Emby 3.5.2 的下一代，并移植.NET 核心框架，以支持完全的跨平台支持。</span></span>
<span class="line"><span>总之可以理解为免费版本的emby</span></span></code></pre></div><p>PS: 需要提前在群晖系统中安装docker套件</p><h3 id="_1-提前创建jellyfin文件夹" tabindex="-1">1 提前创建jellyfin文件夹 <a class="header-anchor" href="#_1-提前创建jellyfin文件夹" aria-label="Permalink to &quot;1 提前创建jellyfin文件夹&quot;">​</a></h3><p>在docker共享文件夹中创建jellyfin文件夹，并在其中创建3个子目录config,cache,media。若没有docker共享文件夹，则自己创建一个。我一般在固态硬盘上创建docker共享文件夹。</p><p><img src="`+t+'" alt="20230102144145.png"></p><h3 id="_2-设置jellyfin文件夹的权限" tabindex="-1">2 设置jellyfin文件夹的权限 <a class="header-anchor" href="#_2-设置jellyfin文件夹的权限" aria-label="Permalink to &quot;2 设置jellyfin文件夹的权限&quot;">​</a></h3><p>右键jellyfin文件夹，选择属性，选择权限，点击新增，然后在用户或组里选Everyone，接着，权限全部打勾，最后确定。</p><p>注意选择应用到这个文件夹，子文件夹，文件。</p><p><img src="'+l+'" alt="20230102145428.png"></p><h3 id="_3-在docker中下载jellyfin映像" tabindex="-1">3 在docker中下载jellyfin映像 <a class="header-anchor" href="#_3-在docker中下载jellyfin映像" aria-label="Permalink to &quot;3 在docker中下载jellyfin映像&quot;">​</a></h3><p><img src="'+r+'" alt="20230102144904.png"><img src="'+p+'" alt="20230102145012.png"></p><h3 id="_4-创建jellyfin容器-进行容器设置" tabindex="-1">4 创建jellyfin容器，进行容器设置 <a class="header-anchor" href="#_4-创建jellyfin容器-进行容器设置" aria-label="Permalink to &quot;4 创建jellyfin容器，进行容器设置&quot;">​</a></h3><p>启动jellyfin镜像文件，创建jellyfin容器。有几个地方需要手动设置，其他选择默认即可。</p><p>jellyfin默认端口为8096</p><p><img src="'+o+'" alt="20230102145850.png"><img src="'+c+'" alt="20230102150252.png"><img src="'+f+'" alt="20230102151016.png"></p><h3 id="_5-容器启动后-输入jellyfin的网址-http-ip-8096-登录jellyfin媒体库。一开始使用需要注册" tabindex="-1">5 容器启动后，输入jellyfin的网址（<a href="http://ip:8096" target="_blank" rel="noreferrer">http://ip:8096</a>），登录jellyfin媒体库。一开始使用需要注册 <a class="header-anchor" href="#_5-容器启动后-输入jellyfin的网址-http-ip-8096-登录jellyfin媒体库。一开始使用需要注册" aria-label="Permalink to &quot;5 容器启动后，输入jellyfin的网址（http://ip:8096），登录jellyfin媒体库。一开始使用需要注册&quot;">​</a></h3><p><img src="'+d+'" alt="20230102151755.png"><img src="'+_+'" alt="20230102152003.png"></p><h3 id="_6-后续jellyfin媒体库如何使用-自行百度。" tabindex="-1">6 后续jellyfin媒体库如何使用，自行百度。 <a class="header-anchor" href="#_6-后续jellyfin媒体库如何使用-自行百度。" aria-label="Permalink to &quot;6 后续jellyfin媒体库如何使用，自行百度。&quot;">​</a></h3>',20)]))}const x=a(y,[["render",h]]);export{P as __pageData,x as default};
