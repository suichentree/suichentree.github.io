import{_ as a,c as t,o as l,ak as n}from"./chunks/framework.CmzJUe0_.js";const e="/assets/elk_20240620162848.CO2nlrcd.png",p="/assets/es_20240624163732.yJiL745b.png",h="/assets/es_20240625153617.Cry3XQXh.png",k="/assets/es_20240623004557.B5aTUBJ-.png",r="/assets/es_20240624165431.BCqr2FPr.png",c="/assets/es_20240624170117.CWCg4_uR.png",o="/assets/es_20240624170233.DemhhCs1.png",d="/assets/es_20240624170444.G-_1EXyZ.png",g="/assets/es_20240624170553.-tJuAZOa.png",i="/assets/es_20240624170717.BkQm4Ozx.png",E="/assets/es_20240625160120.Dwm_YESP.png",y="/assets/es_20240621095745.DzAP6q7n.png",u="/assets/es_20240621100550.B0-h1vcG.png",F="/assets/es_20240621101830.BkIVdlQV.png",b="/assets/es_20240621102350.BZZMgYDI.png",m="/assets/es_20240621103634.D2bwOtuR.png",C="/assets/es_20240624175212.BDAbudnl.png",q="/assets/es_20240624175353.nq9tyuRx.png",_="/assets/es_20240625104443.BA6eFfGC.png",D="/assets/es_20240625105252.DzZw2dcv.png",B="/assets/es_20240621115723.BQCqCFlp.png",A="/assets/es_20240621120120.Dyu3E8k2.png",x="/assets/es_20240621120213.Bmg44DMf.png",v="/assets/es_20240621141816.CKUry4Hm.png",f="/assets/es_20240621145332.ChB-hewj.png",O=JSON.parse('{"title":"Elasticsearch笔记1","description":"","frontmatter":{"title":"Elasticsearch笔记1","date":"2024-06-20T00:00:00.000Z","sidebar":"auto","categories":["Elasticsearch"],"tags":["Elasticsearch"]},"headers":[],"relativePath":"blogs/Elasticsearch/Elasticsearch笔记1.md","filePath":"blogs/Elasticsearch/Elasticsearch笔记1.md"}'),S={name:"blogs/Elasticsearch/Elasticsearch笔记1.md"};function P(K,s,I,w,T,L){return l(),t("div",null,s[0]||(s[0]=[n('<p>[toc]</p><h1 id="elasticsearch笔记1" tabindex="-1">Elasticsearch笔记1 <a class="header-anchor" href="#elasticsearch笔记1" aria-label="Permalink to &quot;Elasticsearch笔记1&quot;">​</a></h1><ul><li>Elasticsearch版本为8.13.4</li><li>kibana版本为8.13.4</li></ul><h2 id="elasticsearch介绍" tabindex="-1">Elasticsearch介绍 <a class="header-anchor" href="#elasticsearch介绍" aria-label="Permalink to &quot;Elasticsearch介绍&quot;">​</a></h2><blockquote><p>什么是Elasticsearch？</p></blockquote><p>Elasticsearch是一个知名的，开源的，免费的分布式搜索引擎，可以用来实现搜索、日志统计、分析、系统监控等功能。</p><blockquote><p>Elasticsearch的发展历史</p></blockquote><p>elasticsearch底层是基于lucene来实现的。</p><ul><li>1999年DougCutting研发了Lucene。Lucene是一个Java语言的搜索引擎类库，是Apache公司的顶级项目。</li><li>2004年Shay Banon基于Lucene开发了Compass</li><li>2010年Shay Banon 重写了Compass，取名为Elasticsearch。</li></ul><h2 id="elk-技术栈" tabindex="-1">ELK 技术栈 <a class="header-anchor" href="#elk-技术栈" aria-label="Permalink to &quot;ELK 技术栈&quot;">​</a></h2><p>elasticsearch结合beats、Logstash、kibana。可以组成一整套的技术栈，叫做ELK 技术栈。</p><p>ELK 技术栈目前广泛的应用在各个系统中的日志数据分析、实时监控等领域。</p><ul><li>elasticsearch是ELK技术栈的核心，负责存储、搜索、分析数据。</li><li>kibana 负责数据的可视化。</li><li>Logstash、Beats 负责抓取数据。</li></ul><p><img src="'+e+`" alt="elk_20240620162848.png"></p><h2 id="elasticsearch-和-kibana-安装" tabindex="-1">Elasticsearch 和 kibana 安装 <a class="header-anchor" href="#elasticsearch-和-kibana-安装" aria-label="Permalink to &quot;Elasticsearch 和 kibana 安装&quot;">​</a></h2><ul><li>elasticsearch是ELK技术栈的核心，负责存储、搜索、分析数据。</li><li>kibana 负责数据的可视化。</li></ul><p>在安装部署Elasticsearch容器 和 kibana容器之前。我们先创建一个docker网络。这样才能很方便的让Elasticsearch容器 和 kibana容器互相通信。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建一个docker网络</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-elk-net</span></span></code></pre></div><h3 id="docker环境下安装部署elasticsearch容器" tabindex="-1">Docker环境下安装部署Elasticsearch容器 <a class="header-anchor" href="#docker环境下安装部署elasticsearch容器" aria-label="Permalink to &quot;Docker环境下安装部署Elasticsearch容器&quot;">​</a></h3><blockquote><p>步骤① 先安装docker环境，自行百度。若已安装，则直接下一步。</p></blockquote><blockquote><p>步骤② 下载Elasticsearch镜像文件。最新版或某个版本</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载Elasticsearch镜像文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span></span></code></pre></div><blockquote><p>步骤③ 创建并启动Elasticsearch容器</p></blockquote><p>有两种方式来创建es容器。</p><blockquote><blockquote><p>方式1：禁用xpack安全认证（非默认情况下,本地测试环境下）</p></blockquote></blockquote><p>禁用 xpack 安全性，就可以不需要账户密码，以及SSL的方式来访问 Elasticsearch 服务器。</p><p>建议：在本地环境下可以用这种方式，在生产环境下还是开启xpack安全认证。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建容器并启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElasticsearch&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-elk-net&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xpack.security.enabled=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> discovery.type=&quot;single-node&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 39200:9200</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 39300:9300</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询es容器日志，看是否成功启动。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myElasticsearch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令解释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --network=&quot;my-elk-net&quot; ：把容器加入一个名为my-elk-net的docker网络中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;：由于es是运行在JVM中的，此处设置JVM内存大小。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -e &quot;discovery.type=single-node&quot;：非集群模式，单点模式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -p 39200:9200：端口映射配置,9200是访问端口。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -p 39300:9300：端口映射配置,9300是集群节点之间的通信端口。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -e xpack.security.enabled=false 禁用xpack安全认证</span></span></code></pre></div><blockquote><blockquote><p>方式2：启用xpack安全认证（默认情况）</p></blockquote></blockquote><p>elasticsearch8.0以上的版本是默认开启xpack安全认证。开启xpack安全认证后，我们需要用账户密码，以及SSL的方式来访问 Elasticsearch 服务器。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建容器并启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myElasticsearch&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-elk-net&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ELASTIC_PASSWORD=&quot;elastic&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> discovery.type=&quot;single-node&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 39200:9200</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 39300:9300</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询es容器日志，看是否成功启动。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myElasticsearch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令解释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -e ELASTIC_PASSWORD=&quot;elastic&quot; 设置密码为elastic。默认的账户就是elastic</span></span></code></pre></div><blockquote><p>步骤④ 测试</p></blockquote><p>elasticsearch并没有提供可视化界面，因此我们需要通过调用elasticsearch的API接口，来测试elasticsearch是否成功运行。</p><p>有两种方式来访问测试elasticsearch8.0以上的版本。</p><ul><li>若es容器开启了xpack安全认证，需要访问<code>https://localhost:39200/</code>地址，并且输入用户名密码，才能访问。（之前在创建es容器的时候，设置了密码为elastic，账户默认为elastic）</li><li>若es容器禁用了xpack安全认证，直接访问<code>http://localhost:39200/</code>地址。</li></ul><p>开启xpack安全认证的访问截图 <img src="`+p+'" alt="es_20240624163732.png"></p><p>禁用xpack安全认证的访问截图 <img src="'+h+'" alt="es_20240625153617.png"></p><h4 id="重置密码" tabindex="-1">重置密码 <a class="header-anchor" href="#重置密码" aria-label="Permalink to &quot;重置密码&quot;">​</a></h4><p>当es容器开启了xpack安全认证后，我们需要账户密码，才能访问es。一般情况下账户默认为elastic。</p><p>如果我们想要重置密码。可以使用以下方式。</p><ol><li>进入es容器的bash终端中。</li><li>输入重置密码命令。<code>bin/elasticsearch-reset-password -u elastic</code></li><li>记住重置的新密码。</li></ol><p><img src="'+k+'" alt="es_20240623004557.png"></p><ol start="4"><li>访问<code>https://localhost:39200/</code>地址。输入用户名elastic，密码为重置的新密码。之后即可看到elasticsearch的响应结果。</li></ol><h4 id="创建访问令牌token" tabindex="-1">创建访问令牌token <a class="header-anchor" href="#创建访问令牌token" aria-label="Permalink to &quot;创建访问令牌token&quot;">​</a></h4><p>当es容器开启了xpack安全认证后，如果kibana想要访问es，那么需要先在es容器内部创建一个访问令牌token才行。</p><ol><li>进入es容器的bash终端中。</li><li>输入创建令牌命令。<code>/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana</code></li><li>记住创建好的token。</li></ol><p><img src="'+r+`" alt="es_20240624165431.png"></p><h4 id="禁用es的xpack安全认证" tabindex="-1">禁用ES的xpack安全认证 <a class="header-anchor" href="#禁用es的xpack安全认证" aria-label="Permalink to &quot;禁用ES的xpack安全认证&quot;">​</a></h4><p>有两种方式可以禁用ES的xpack安全认证。</p><p>方式1：在创建ES容器的时候，添加<code>-e xpack.security.enabled=false</code>环境变量来禁用xpack安全认证。</p><p>方式2：当ES容器运行后，可以在容器内找到配置文件elasticsearch.yml。然后修改配置文件中的<code>xpack.security.enabled=false</code>属性。最后重启ES容器即可。</p><p>配置文件elasticsearch.yml的位置一般在<code>/usr/share/elasticsearch/config/elasticsearch.yml</code></p><h3 id="docker环境下安装部署kibana容器" tabindex="-1">Docker环境下安装部署kibana容器 <a class="header-anchor" href="#docker环境下安装部署kibana容器" aria-label="Permalink to &quot;Docker环境下安装部署kibana容器&quot;">​</a></h3><p>kibana可以给elasticsearch提供一个可视化界面。方便我们可视化操作elasticsearch。</p><blockquote><p>步骤① 下载 kibana 镜像文件。最新版或某个版本</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载 kibana 镜像文件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/kibana/kibana:8.13.4</span></span></code></pre></div><blockquote><p>步骤② 创建并启动kibana容器。</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建容器并启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myKibana&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-elk-net&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 35601:5601</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.elastic.co/kibana/kibana:8.13.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询容器日志，看是否成功启动。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myKibana</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令解释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --network=&quot;my-elk-net&quot; 把容器加入一个名为my-elk-net的docker网络中</span></span></code></pre></div><blockquote><p>步骤③ 访问</p></blockquote><p>有两种方式使用kibana容器。</p><blockquote><blockquote><p>方式1：如果我们的ES容器开启了xpack安全认证。那么可以按照下面步骤来。</p></blockquote></blockquote><ol><li>当kibana容器第一次启动后，查询容器日志。可以看到日志中有一个带有验证码的链接。我们需要访问带有这个验证码的地址才行。否则后续还需要填入这个验证码。</li></ol><p><img src="`+c+'" alt="es_20240624170117.png"></p><ol start="2"><li>浏览器输入地址访问：<code>http://localhost:35601/?code=176566</code>，访问Kibana的界面。</li></ol><p><img src="'+o+'" alt="es_20240624170233.png"></p><ol start="3"><li><p>之后我们需要先在es容器中，创建访问令牌token（具体方法在上面）。然后将token，填入到输入框中。kibana会自动识别到es的访问地址。 <img src="'+d+'" alt="es_20240624170444.png"></p></li><li><p>然后填入es的账户密码。此处是elastic/elastic <img src="'+g+'" alt="es_20240624170553.png"></p></li><li><p>最后就进入到了kibana的首页了。 <img src="'+i+'" alt="es_20240624170717.png"></p></li></ol><blockquote><blockquote><p>方式2：如果我们的ES容器关闭了xpack安全认证。那么可以按照下面步骤来。</p></blockquote></blockquote><ol><li>如果ES容器关闭了xpack安全认证，那么就无法在ES容器中创建令牌token。</li><li>进入到Kibana容器中，找到配置文件。一般位置在/usr/share/kibana/config/kibana.yml</li><li>修改配置文件中的es容器访问地址。</li></ol><p>ip地址可以改为es容器的ip地址，如果es容器和kibana容器在同一个docker网络中，那么ip地址可以改为es容器的名称。</p><p><img src="'+E+'" alt="es_20240625160120.png"></p><ol start="4"><li>之后重启kibana容器即可。重新访问<code>http://localhost:35601</code>地址。</li></ol><p><img src="'+i+'" alt="es_20240624170717.png"></p><h2 id="elasticsearch的基本概念" tabindex="-1">Elasticsearch的基本概念 <a class="header-anchor" href="#elasticsearch的基本概念" aria-label="Permalink to &quot;Elasticsearch的基本概念&quot;">​</a></h2><h3 id="倒排索引" tabindex="-1">倒排索引 <a class="header-anchor" href="#倒排索引" aria-label="Permalink to &quot;倒排索引&quot;">​</a></h3><p>倒排索引是相对传统数据库的正向索引而言的，并且倒排索引与正向索引是相辅相成的。</p><blockquote><p>正向索引的查询流程</p></blockquote><ol><li>用户输入查询条件，假设查询条件是模糊的。</li><li>开始逐行扫描全表数据。</li><li>判断数据是否符合查询条件</li><li>如果符合则放入结果集，不符合则丢弃。回到步骤1</li></ol><p>正向索引：基本上就是全表逐行扫描的查询。随着数据量增加，其查询效率也会越来越低。</p><blockquote><p>倒排索引中两个非常重要的概念</p></blockquote><ul><li>文档（Document）：文档就是被查询的数据。例如一个商品信息，一个订单信息。每条数据就是每个文档。</li><li>词条（Term）：词条就是文档数据的关键字（类似于标签）。例如一个小米手机信息，这个文档数据对应的词条就是 小米，手机。</li></ul><blockquote><p>如何建立倒排索引？</p></blockquote><ol><li>读取文档数据，将每一个文档的数据利用算法分词，得到一个个词条。</li><li>然后创建词条表，表中的每行数据包括词条、词条所在文档id、位置等信息。</li></ol><p>如图所示 <img src="'+y+'" alt="es_20240621095745.png"></p><blockquote><p>倒排索引的查询流程</p></blockquote><ol><li>假设用户输入查询条件（华为手机）</li><li>首先会对查询条件进行分词处理。即把华为手机转换为多个词条：华为，手机。</li><li>然后会根据词条，在倒排索引中进行查询，可以得到多个词条对应的文档id(1,2,3)。</li><li>然后根据文档id，查询具体的文档数据。</li></ol><p>如图所示 <img src="'+u+'" alt="es_20240621100550.png"></p><blockquote><p>正向索引和倒排索引的区别</p></blockquote><ul><li>正向索引是最传统的，根据id索引的方式。但根据词条查询时，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是根据文档找词条的过程。</li><li>倒排索引则相反，是先找到用户要搜索的词条，根据词条得到保护词条的文档的id，然后根据id获取文档。是根据词条找文档的过程。</li></ul><p>因此正向索引擅长精准查询，倒排索引擅长模糊查询。</p><h3 id="文档和字段" tabindex="-1">文档和字段 <a class="header-anchor" href="#文档和字段" aria-label="Permalink to &quot;文档和字段&quot;">​</a></h3><p>elasticsearch是面向文档（Document）存储的。文档数据会被序列化为json格式后存储在elasticsearch中。</p><p>在elasticsearch中文档数据就相当于表格中的一条条记录。每条文档数据中包含许多字段，类似于表格中的列。</p><p>如图所示，左边是表格数据，右边是文档数据 <img src="'+F+'" alt="es_20240621101830.png"></p><h3 id="词条" tabindex="-1">词条 <a class="header-anchor" href="#词条" aria-label="Permalink to &quot;词条&quot;">​</a></h3><p>对文档中的内容进行分词处理后，得到的词语就是词条。</p><p>例如对华为手机进行分词处理。可以转换为多个词条：华为，手机。</p><h3 id="索引和映射" tabindex="-1">索引和映射 <a class="header-anchor" href="#索引和映射" aria-label="Permalink to &quot;索引和映射&quot;">​</a></h3><p>在elasticsearch中，索引相当于传统数据库中的表格，映射相当于传统数据库中定义的表结构定义。</p><p>索引：即相同类型的文档数据的集合。 映射：即文档数据中的各个字段定义，约束。</p><ul><li>例如所有用户相关的文档数据，就可以组织在一起，称为用户索引； <ul><li>用户索引中包含id，title,price 映射。</li></ul></li><li>例如所有商品相关的文档数据，就可以组织在一起，称为商品索引； <ul><li>用户索引中包含id，name,age 映射。</li></ul></li><li>例如所有订单相关的文档数据，就可以组织在一起，称为订单索引； <ul><li>用户索引中包含id，userId,goodsId,totalFee 映射。</li></ul></li></ul><p>如图所示 <img src="'+b+'" alt="es_20240621102350.png"></p><h3 id="elasticsearch和传统数据库的对比" tabindex="-1">Elasticsearch和传统数据库的对比 <a class="header-anchor" href="#elasticsearch和传统数据库的对比" aria-label="Permalink to &quot;Elasticsearch和传统数据库的对比&quot;">​</a></h3><p>我们可以将Elasticsearch和传统数据库（例如Mysql）进行对比。</p><ul><li>Mysql：擅长事务类型操作，可以确保数据的安全和一致性。</li><li>Elasticsearch：擅长海量数据的搜索、分析、计算。</li></ul><p>各个概念对比</p><table tabindex="0"><thead><tr><th>MySQL</th><th>Elasticsearch</th><th>说明</th></tr></thead><tbody><tr><td>Table表格</td><td>Index索引</td><td>索引(index)，就是文档的集合，类似数据库的表(table)</td></tr><tr><td>Row行记录</td><td>Document文档</td><td>文档，就是一条条的数据，类似数据库中的行记录Row</td></tr><tr><td>Column</td><td>Field字段</td><td>文档中的字段，类似数据库中的列（Column）</td></tr><tr><td>Schema</td><td>Mapping映射</td><td>Mapping是文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td>SQL</td><td>DSL</td><td>DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD。类似与SQL语句。</td></tr></tbody></table><p>在大型系统中，往往是两者结合使用。</p><ul><li>对安全性要求较高的写操作，使用mysql实现</li><li>对查询性能要求较高的搜索需求，使用elasticsearch实现</li><li>两者再基于某种方式，实现数据的同步，保证一致性</li></ul><p>如图所示 <img src="'+m+`" alt="es_20240621103634.png"></p><h2 id="分词器" tabindex="-1">分词器 <a class="header-anchor" href="#分词器" aria-label="Permalink to &quot;分词器&quot;">​</a></h2><p>分词器的作用就是将文档内容，进行分词处理。从而得到一个个词条。</p><h3 id="默认分词器" tabindex="-1">默认分词器 <a class="header-anchor" href="#默认分词器" aria-label="Permalink to &quot;默认分词器&quot;">​</a></h3><p>Elasticsearch内置了默认分词器。默认分词器对于英文分词好用,对于中文分词不好用。</p><blockquote><p>测试 默认分词器standard</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_analyze</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;standard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java and python&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_analyze</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;standard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;华为手机&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>英文分词效果 <img src="`+C+'" alt="es_20240624175212.png"> 中文分词效果 <img src="'+q+`" alt="es_20240624175353.png"></p><h3 id="ik分词器" tabindex="-1">IK分词器 <a class="header-anchor" href="#ik分词器" aria-label="Permalink to &quot;IK分词器&quot;">​</a></h3><p>默认分词器对于中文分词不太友好。因此我们需要额外安装中文分词器插件，通过这个中文分词器来进行中文分词处理。</p><h4 id="什么是ik分词器" tabindex="-1">什么是IK分词器？ <a class="header-anchor" href="#什么是ik分词器" aria-label="Permalink to &quot;什么是IK分词器？&quot;">​</a></h4><p>免费开源的java分词器，目前比较流行的中文分词器之一，简单、稳定。如果想要特别好的效果，需要自行维护词库，支持自定义词典。</p><p>IK分词器的开源地址：<a href="https://github.com/infinilabs/analysis-ik" target="_blank" rel="noreferrer">https://github.com/infinilabs/analysis-ik</a></p><p>IK分词器各个版本的安装包下载地址：<a href="https://release.infinilabs.com/analysis-ik/stable/" target="_blank" rel="noreferrer">https://release.infinilabs.com/analysis-ik/stable/</a></p><h4 id="安装ik分词器" tabindex="-1">安装IK分词器 <a class="header-anchor" href="#安装ik分词器" aria-label="Permalink to &quot;安装IK分词器&quot;">​</a></h4><p>在线安装IK分词器插件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入Elasticsearch容器内部</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myElasticsearch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在线下载并安装IK分词器插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/elasticsearch-plugin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://release.infinilabs.com/analysis-ik/stable/elasticsearch-analysis-ik-8.13.4.zip</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#退出容器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#重启容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myElasticsearch</span></span></code></pre></div><p>安装截图 <img src="`+_+`" alt="es_20240625104443.png"></p><p>注意IK分词器的版本需要与Elasticsearch版本一致。</p><h4 id="测试ik分词器" tabindex="-1">测试IK分词器 <a class="header-anchor" href="#测试ik分词器" aria-label="Permalink to &quot;测试IK分词器&quot;">​</a></h4><p>在kibana的Dev tools中输入以下代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//下面代码中，就是GET请求 /_analyze接口，传入两个参数。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_analyze</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;analyzer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ik_max_word&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;华为手机&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// GET是请求方式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// /_analyze是接口名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {...} 是请求数据</span></span></code></pre></div><ul><li>/_analyze 接口是elasticsearch中进行分词处理的接口。</li><li>analyzer参数是分词器模式。IK分词器中有两种分词器模式。ik_smart 智能切分模式，ik_max_word 最细切分模式。</li><li>text参数是需要进行分词处理的文档内容。</li></ul><p>如果所示，右边是分词处理的结果 <img src="`+D+`" alt="es_20240625105252.png"></p><h4 id="自定义扩展词字典" tabindex="-1">自定义扩展词字典 <a class="header-anchor" href="#自定义扩展词字典" aria-label="Permalink to &quot;自定义扩展词字典&quot;">​</a></h4><p>我们可以自定义IK分词器的扩展词字典。</p><ol><li>新增一个扩展词字典文件my_ext01.dic</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>白嫖</span></span>
<span class="line"><span>给力</span></span>
<span class="line"><span>泰酷辣</span></span>
<span class="line"><span>一键三连</span></span></code></pre></div><ol start="2"><li>在es容器中找到IK分词器存放词汇字典的目录。</li></ol><p>目录的地址为：/usr/share/elasticsearch/config/analysis-ik</p><p><img src="`+B+`" alt="es_20240621115723.png"></p><ol start="3"><li>修改目录中的IKAnalyzer.cfg.xml文件内容</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DOCTYPE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;IK Analyzer 扩展配置&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--用户可以在这里配置自己的扩展词字典 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ext_dict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;my_ext01.dic&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ext_stopwords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在xml文件中，把新建的扩展词字典文件my_ext01.dic配置进去。</p><ol start="4"><li>最后将my_ext01.dic文件，放入到analysis-ik目录中。然后重启elasticsearch容器。</li></ol><p><img src="`+A+'" alt="es_20240621120120.png"></p><ol start="5"><li>测试效果</li></ol><p>针对<code>一键三连</code>这个词汇进行分词处理。使用ik_smart 智能切分模式。</p><p>添加扩展词字典文件之前的分词效果。 <img src="'+x+'" alt="es_20240621120213.png"></p><p>添加扩展词字典文件之后的分词效果。 <img src="'+v+`" alt="es_20240621141816.png"></p><h4 id="自定义停止词字典" tabindex="-1">自定义停止词字典 <a class="header-anchor" href="#自定义停止词字典" aria-label="Permalink to &quot;自定义停止词字典&quot;">​</a></h4><p>IK分词器也提供了强大的停用词功能，让我们在进行分词处理的时候直接忽略停用词字典中的内容。</p><p>停止词可以是一些语气词汇，也可以是指一些敏感词汇。例如关于宗教、政治等敏感词语。</p><ol><li>新建停止词字典my_stopword01.dic</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>啊</span></span>
<span class="line"><span>哦</span></span></code></pre></div><ol start="2"><li>在IKAnalyzer.cfg.xml配置文件内容添加</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DOCTYPE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;IK Analyzer 扩展配置&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ext_dict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;my_ext01.dic&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ext_stopwords&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;my_stopword01.dic&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li>将my_stopword01.dic文件添加到analysis-ik目录中。然后重启elasticsearch容器。</li><li>测试效果</li></ol><p>如图所示。针对停止词<code>啊</code>，不进行分词处理。 <img src="`+f+'" alt="es_20240621145332.png"></p>',157)]))}const J=a(S,[["render",P]]);export{O as __pageData,J as default};
