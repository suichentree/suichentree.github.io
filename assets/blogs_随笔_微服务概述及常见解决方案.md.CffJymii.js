import{_ as i,c as a,o as e,ak as o}from"./chunks/framework.CmzJUe0_.js";const p=JSON.parse('{"title":"微服务概述及常见解决方案","description":"","frontmatter":{"title":"微服务概述及常见解决方案","date":"2022-11-11T00:00:00.000Z","sidebar":"auto","categories":["随笔"]},"headers":[],"relativePath":"blogs/随笔/微服务概述及常见解决方案.md","filePath":"blogs/随笔/微服务概述及常见解决方案.md"}'),r={name:"blogs/随笔/微服务概述及常见解决方案.md"};function t(u,l,n,h,s,b){return e(),a("div",null,l[0]||(l[0]=[o('<p>[toc]</p><h1 id="微服务概述及常见解决方案" tabindex="-1">微服务概述及常见解决方案 <a class="header-anchor" href="#微服务概述及常见解决方案" aria-label="Permalink to &quot;微服务概述及常见解决方案&quot;">​</a></h1><h2 id="微服务概述" tabindex="-1">微服务概述 <a class="header-anchor" href="#微服务概述" aria-label="Permalink to &quot;微服务概述&quot;">​</a></h2><p>微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一个个小的服务，每个服务运行在其独立的自己的进程中，服务之间互相协调、互相配合。</p><p>优点：</p><ul><li>微服务是松藕合的，无论是在开发阶段或部署阶段都是独立的。能够快速响应, 局部修改容易, 一个服务出现问题不会影响整个应用。</li><li>易于和第三方应用系统集成, 支持使用不同的语言开发, 允许你利用融合最新技术。</li><li>每个微服务都很小，足够内聚，足够小，代码容易理解。团队能够更关注自己的工作成果, 聚焦指定的业务功能或业务需求。</li><li>开发简单、开发效率提高，一个服务可能就是专一的只干一件事, 能够被小团队单独开发，这个小团队可以是 2 到 5 人的开发人员组成。</li></ul><p>缺点：</p><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度,随着服务的增加，运维的压力也在增大</li><li>系统部署依赖高、服务间通信成本高、数据一致性要求高、系统集成测试难度大、性能监控要求高</li></ul><h2 id="微服务架构方案" tabindex="-1">微服务架构方案 <a class="header-anchor" href="#微服务架构方案" aria-label="Permalink to &quot;微服务架构方案&quot;">​</a></h2><p>为了解决微服务的缺点，所以也就有了一系列的微服务解决方案，本质是工具集。</p><h3 id="第一套解决方案-apache-dubbo-zookeeper" tabindex="-1">第一套解决方案：Apache Dubbo Zookeeper <a class="header-anchor" href="#第一套解决方案-apache-dubbo-zookeeper" aria-label="Permalink to &quot;第一套解决方案：Apache Dubbo Zookeeper&quot;">​</a></h3><p>技术架构：</p><ul><li>Zookeeper（服务注册中心）</li><li>Dubbo-monitor（服务监控）</li></ul><p>备注：Dubbo相当不完善，需要借助很多第三方组件</p><h3 id="第二套解决方案-spring-cloud-netflix-【已闭源】" tabindex="-1">第二套解决方案：Spring Cloud Netflix 【已闭源】 <a class="header-anchor" href="#第二套解决方案-spring-cloud-netflix-【已闭源】" aria-label="Permalink to &quot;第二套解决方案：Spring Cloud Netflix 【已闭源】&quot;">​</a></h3><p>技术架构：</p><ul><li>Eureka (服务注册与发现)</li><li>Feign（整合了ribbon和Hystrix，负载均衡和熔断限流等）</li><li>Ribbon（负载均衡）</li><li>Hystrix （熔断限流，合并请求等）</li><li>Hystrix Dashboard （提供了服务监控的功能，提供了数据监控和友好的图形化界面）</li><li>Hystrix Turbine （Hystrix Turbine将每个服务的Hystrix Dashboard数据进行了整合。也是监控系统的功能）</li><li>Zuul （智能路由和过滤）</li><li>config (配置中心)</li></ul><p>备注：2018年年底，Netflix宣布停止开发，进入维护模式。</p><h3 id="第三套解决方案-spring-cloud-alibaba" tabindex="-1">第三套解决方案：Spring Cloud Alibaba <a class="header-anchor" href="#第三套解决方案-spring-cloud-alibaba" aria-label="Permalink to &quot;第三套解决方案：Spring Cloud Alibaba&quot;">​</a></h3><p>技术架构：</p><ul><li>Nacos：动态服务发现、配置管理和服务管理平台。兼顾注册中心与配置中心。</li><li>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li>RocketMQ：开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li>Dubbo：一款高性能 Java RPC 框架。</li><li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Arthas：开源的Java动态追踪工具，基于字节码增强技术，功能非常强大。</li></ul><h3 id="技术栈对比" tabindex="-1">技术栈对比 <a class="header-anchor" href="#技术栈对比" aria-label="Permalink to &quot;技术栈对比&quot;">​</a></h3><h4 id="服务注册中心" tabindex="-1">服务注册中心 <a class="header-anchor" href="#服务注册中心" aria-label="Permalink to &quot;服务注册中心&quot;">​</a></h4><ul><li>Eureka （所属 Netflix ，包括EurekaServer和EurekaClient）</li><li>Consul（所属SpringCloud，GO语言实现）</li><li>Zookeeper （所属Apache，JAVA语言实现 ）</li><li>Nacos：（所属Alibaba，JAVA语言实现）</li></ul><h4 id="服务配置中心" tabindex="-1">服务配置中心 <a class="header-anchor" href="#服务配置中心" aria-label="Permalink to &quot;服务配置中心&quot;">​</a></h4><ul><li>Spring Cloud Config：提供统一配置的功能。</li><li>Spring Cloud Bus（消息总线）：通过MQ将微服务的所有节点连接到一起通过消息总线实现自动配置刷新。</li><li>Nacos：所属Alibaba，兼顾配置注册中心和配置中心。</li></ul><h4 id="服务间通信组件" tabindex="-1">服务间通信组件 <a class="header-anchor" href="#服务间通信组件" aria-label="Permalink to &quot;服务间通信组件&quot;">​</a></h4><p>两种实现方式：</p><ul><li>Dubbo的RPC方式。</li><li>SpringCloud的HTTP Restful方式。</li></ul><p>HTTP Restful方式有两种实现方案：</p><ul><li>RestTemplate（路径写死、没有负载均衡）+Ribbon（所属Netflix ，实现负载均衡）</li><li>OpenFeign（所属SpringCloud，封装了Netflix 的Feign，自带负载均衡）</li></ul><h4 id="服务熔断组件" tabindex="-1">服务熔断组件 <a class="header-anchor" href="#服务熔断组件" aria-label="Permalink to &quot;服务熔断组件&quot;">​</a></h4><p>采用服务熔断或服务降级的方式解决服务雪崩问题。</p><ul><li>Hystrix (所属Netflix)</li><li>Sentinel（所属Alibaba）</li></ul><h4 id="服务网关组件" tabindex="-1">服务网关组件 <a class="header-anchor" href="#服务网关组件" aria-label="Permalink to &quot;服务网关组件&quot;">​</a></h4><p>用来统一服务总入口，实现路由转发和过滤。</p><ul><li>Zuul1.x、Zuul2.x (所属Netflix)</li><li>Gateway（所属SpringCloud）</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>综上，目前最佳方案是：</p><ul><li>服务注册中心 Nacos</li><li>服务配置中心 Nacos</li><li>服务熔断组件 Sentinel</li><li>服务间通信组件 OpenFeign</li><li>服务网关组件 Gateway</li></ul>',40)]))}const c=i(r,[["render",t]]);export{p as __pageData,c as default};
