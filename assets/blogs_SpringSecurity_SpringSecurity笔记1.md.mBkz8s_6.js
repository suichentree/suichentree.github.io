import{_ as s,c as a,o as t,ak as n}from"./chunks/framework.CmzJUe0_.js";const p="/assets/springsecurity_20240202212649.BJ3jsr9l.png",l="/assets/springsecurity_20240202212922.CRaVjUlz.png",y=JSON.parse('{"title":"Spring Security笔记1","description":"","frontmatter":{"title":"Spring Security笔记1","date":"2024-02-02T00:00:00.000Z","sidebar":"auto","categories":["后端"],"tags":["Spring","Spring Security"]},"headers":[],"relativePath":"blogs/SpringSecurity/SpringSecurity笔记1.md","filePath":"blogs/SpringSecurity/SpringSecurity笔记1.md"}'),e={name:"blogs/SpringSecurity/SpringSecurity笔记1.md"};function r(h,i,k,g,E,c){return t(),a("div",null,i[0]||(i[0]=[n(`<p>[toc]</p><h1 id="spring-security笔记1" tabindex="-1">Spring Security笔记1 <a class="header-anchor" href="#spring-security笔记1" aria-label="Permalink to &quot;Spring Security笔记1&quot;">​</a></h1><h2 id="spring-security-介绍" tabindex="-1">Spring Security 介绍 <a class="header-anchor" href="#spring-security-介绍" aria-label="Permalink to &quot;Spring Security 介绍&quot;">​</a></h2><p>Spring Security是 Spring 官方开源的一个安全框架。利用Spring的IOC/AOP功能，为整个系统提供安全访问功能。</p><p>Spring Security框架的目的是减少系统中安全控制相关代码的重复工作。能够最大效率的帮助开发者快速开发系统中的安全访问功能。</p><blockquote><p>什么是系统中的安全访问功能？</p></blockquote><p>通常来讲系统中的安全访问功能主要包括两点：认证 和 授权。</p><ul><li>认证：是指系统判断当前用户是否能够登录到系统中。</li><li>授权：是指系统判断用户的当前操作是否有权限执行。</li></ul><h2 id="第一个spring-security-项目" tabindex="-1">第一个Spring Security 项目 <a class="header-anchor" href="#第一个spring-security-项目" aria-label="Permalink to &quot;第一个Spring Security 项目&quot;">​</a></h2><p>① 创建一个springboot工程</p><p>② 导入Spring Security依赖</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--Spring Security的依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-security&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--web依赖用来测试的--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>Security的依赖是直接继承springboot的依赖，所以不用写版本号。</li><li>web依赖中内置了tomcat web容器。是用来测试的。</li></ul><p>③ 添加配置</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## 服务运行端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">38020</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## 服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shuyx-security</span></span></code></pre></div><p>④ 启动服务，访问登录页面</p><p>访问 <code>http://localhost:38020/login</code>路径，可以发现下面的login页面。</p><p><img src="`+p+'" alt="springsecurity_20240202212649.png"></p><ul><li>这个login登录页面，是Spring Security自动生成的登录页面。</li><li>登录页面的账户是user，密码是随机生成的，可以在控制台上找到。</li></ul><p><img src="'+l+'" alt="springsecurity_20240202212922.png"></p><ul><li>登录成功后，我们才可以访问其他路径。</li><li>如果登录失败，或者没有登录，那么我们只能访问/login路径，访问其他路径会被自动跳转到/login路径。</li></ul>',21)]))}const o=s(e,[["render",r]]);export{y as __pageData,o as default};
