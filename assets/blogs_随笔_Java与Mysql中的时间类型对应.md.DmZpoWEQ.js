import{_ as s,c as i,o as t,ak as l}from"./chunks/framework.CmzJUe0_.js";const p="/assets/blog_20240413153625.BSTZrkkp.png",e="/assets/blog_20240413154558.Bp80_nyc.png",n="/assets/blog_20240413153854.Dy4UGQIU.png",h="/assets/blog_20240413154657.D7BCPWeO.png",m=JSON.parse('{"title":"Java与Mysql中的时间类型对应","description":"","frontmatter":{"title":"Java与Mysql中的时间类型对应","date":"2024-04-13T00:00:00.000Z","sidebar":"auto","categories":["随笔"],"tags":["Java"]},"headers":[],"relativePath":"blogs/随笔/Java与Mysql中的时间类型对应.md","filePath":"blogs/随笔/Java与Mysql中的时间类型对应.md"}'),o={name:"blogs/随笔/Java与Mysql中的时间类型对应.md"};function k(r,a,d,c,g,y){return t(),i("div",null,a[0]||(a[0]=[l('<p>[toc]</p><h1 id="java与mysql中的时间类型对应" tabindex="-1">Java与Mysql中的时间类型对应 <a class="header-anchor" href="#java与mysql中的时间类型对应" aria-label="Permalink to &quot;Java与Mysql中的时间类型对应&quot;">​</a></h1><h2 id="mysql中的时间类型" tabindex="-1">Mysql中的时间类型 <a class="header-anchor" href="#mysql中的时间类型" aria-label="Permalink to &quot;Mysql中的时间类型&quot;">​</a></h2><ul><li>date：用于存储日期值（年、月、日），格式为&#39;YYYY-MM-DD&#39;。</li><li>datetime：用于同时存储日期和时间值，格式为&#39;YYYY-MM-DD HH:MM:SS&#39;。</li><li>time：用于存储时间值（小时、分钟、秒），格式为&#39;HH:MM:SS&#39;。</li><li>timestamp：用于同时存储日期和时间值，格式为&#39;YYYY-MM-DD HH:MM:SS&#39;。但比datetime类型支持更广泛的时间范围。例如支持时区。</li></ul><blockquote><p>date 类型</p></blockquote><p><img src="'+p+'" alt="blog_20240413153625.png"></p><p>date 是一种日期类型的数据类型。它采用格式为 &#39;YYYY-MM-DD&#39; 的字符串表示方式。其中 YYYY 表示四位数的年份，MM 表示两位数的月份，DD 表示两位数的日期。</p><p>注意：插入日期时，必须使用正确的格式。并且该日期必须是有效的。否则，将会抛出错误或者导致不可预期的结果。另外date类型的有效值从&#39;1000-01-01&#39; 到 &#39;9999-12-31&#39;。</p><blockquote><p>datetime 类型</p></blockquote><p><img src="'+e+'" alt="blog_20240413154558.png"></p><p>datetime 类型是一种日期时间类型的数据类型，用于同时存储日期和时间值。</p><p>它采用格式为 &#39;YYYY-MM-DD HH:MM:SS&#39; 的字符串表示方式，其中 YYYY 表示四位数的年份，MM 表示两位数的月份，DD 表示两位数的日期，HH 表示小时，MM 表示分钟，SS 表示秒。</p><p>datetime 类型的有效期：1000-01-01 00:00:00&#39; 到 &#39;9999-12-31 23:59:59</p><blockquote><p>time类型</p></blockquote><p><img src="'+n+'" alt="blog_20240413153854.png"></p><p>time 是一种时间类型的数据类型，用于存储时间值（小时、分钟、秒）。</p><p>它采用格式为 &#39;HH:MM:SS&#39; 的字符串表示方式，其中 HH 表示两位数的小时，MM 表示两位数的分钟，SS 表示两位数的秒。</p><blockquote><p>timestamp 类型</p></blockquote><p><img src="'+h+`" alt="blog_20240413154657.png"></p><p>timestamp 是一种日期时间类型的数据类型，用于存储日期和时间值。</p><p>它采用格式为 &#39;YYYY-MM-DD HH:MM:SS&#39; 的字符串表示方式，其中 YYYY 表示四位数的年份，MM 表示两位数的月份，DD 表示两位数的日期，HH 表示小时，MM 表示分钟，SS 表示秒。</p><p>另外 timestamp 数据类型还支持自动更新功能，可以在插入或更新记录时自动设置为当前时间戳。</p><h2 id="java中的时间类型" tabindex="-1">Java中的时间类型 <a class="header-anchor" href="#java中的时间类型" aria-label="Permalink to &quot;Java中的时间类型&quot;">​</a></h2><p>在 Java 中，可以使用不同的类来映射数据库中的日期时间类型。以下是一些常见的数据类型和它们对应的 Java 类型：</p><ul><li>mysql数据库：date类型 =》 对应 java中的 java.util.Date;</li><li>mysql数据库：time类型 =》 对应 java中的 java.sql.Time;</li><li>mysql数据库：datetime类型 =》 对应 java中的 java.util.Date;</li></ul><h2 id="后端date类型返回给前端变为时间戳的解决方法" tabindex="-1">后端Date类型返回给前端变为时间戳的解决方法 <a class="header-anchor" href="#后端date类型返回给前端变为时间戳的解决方法" aria-label="Permalink to &quot;后端Date类型返回给前端变为时间戳的解决方法&quot;">​</a></h2><p>当java实体类中有一个birthday属性是java.util.Date类型的时候。</p><p>前端发送&quot;YYYY-MM-DD&quot;格式的日期字符串，是可以被birthday属性接收的。并且数据库中存储的值也是&quot;YYYY-MM-DD&quot;格式的日期。</p><p>但是后端返回给前端数据的时候，&quot;YYYY-MM-DD&quot;格式的birthday属性值会变成&#39;YYYY-MM-DD HH:MM:SS&#39;格式的字符串。</p><blockquote><p>解决方法</p></blockquote><p>给该属性加上@JsonFormat注解。并设置格式为&quot;yyyy-MM-dd&quot;。</p><p>这时后端传输给前端的时候，生日会直接变成yyyy-MM-dd这种格式</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Date;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.fasterxml.jackson.annotation.JsonFormat;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserEntity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serialVersionUID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">JsonFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yyyy-MM-dd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date birthday;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//生日</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="后端拿到的时间数据和数据库中的时间数据相差8个小时" tabindex="-1">后端拿到的时间数据和数据库中的时间数据相差8个小时 <a class="header-anchor" href="#后端拿到的时间数据和数据库中的时间数据相差8个小时" aria-label="Permalink to &quot;后端拿到的时间数据和数据库中的时间数据相差8个小时&quot;">​</a></h2><p>后端返回的时间数据和数据库中的时间数据相差8个小时的原因有几个。</p><ol><li>默认使用 UTC 时区。Java 中的日期和时间默认使用 UTC（协调世界时）进行存储和处理。</li><li>Spring Jackson 序列化和反序列化时区问题。Spring 在将日期和时间转换为 JSON 或从 JSON 转换回来时，默认使用的时区可能与你期望的时不匹配。</li></ol><blockquote><p>解决方案：配置 Spring 使用正确的时区</p></blockquote><p>添加如下配置，告诉 Spring 在序列化或反序列化日期和时间时始终使用 GMT+8 时区。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  jackson:</span></span>
<span class="line"><span>    time-zone: GMT+8</span></span></code></pre></div>`,39)]))}const u=s(o,[["render",k]]);export{m as __pageData,u as default};
