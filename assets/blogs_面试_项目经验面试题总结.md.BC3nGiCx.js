import{_ as s,c as i,o as e,ak as l}from"./chunks/framework.CmzJUe0_.js";const t="/assets/java_20231212140704.Gasxezw4.png",u=JSON.parse('{"title":"项目经验面试题总结","description":"","frontmatter":{"title":"项目经验面试题总结","date":"2023-12-12T00:00:00.000Z","sidebar":"auto","categories":["面试"]},"headers":[],"relativePath":"blogs/面试/项目经验面试题总结.md","filePath":"blogs/面试/项目经验面试题总结.md"}'),p={name:"blogs/面试/项目经验面试题总结.md"};function n(h,a,o,d,r,c){return e(),i("div",null,a[0]||(a[0]=[l('<p>[toc]</p><h1 id="项目经验面试题总结" tabindex="-1">项目经验面试题总结 <a class="header-anchor" href="#项目经验面试题总结" aria-label="Permalink to &quot;项目经验面试题总结&quot;">​</a></h1><h2 id="当发现服务器的cpu占用过高怎么办" tabindex="-1">当发现服务器的CPU占用过高怎么办？ <a class="header-anchor" href="#当发现服务器的cpu占用过高怎么办" aria-label="Permalink to &quot;当发现服务器的CPU占用过高怎么办？&quot;">​</a></h2><p>这道面试题主要是部署运维方面的。</p><p>问题要点：</p><ol><li>如何查询Linux服务器的CPU占比情况？</li><li>如何定位到产生问题的Java代码所在线程是什么？</li><li>如何判断出当前问题线程到底在执行什么方法?</li></ol><p>① 通过<code>TOP</code>命令找到占用CPU高的Java进程</p><p><img src="'+t+`" alt="java_20231212140704.png"></p><p>② 通过<code>jps -lv</code>命令可以查询所有的java进程和所属的java服务。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lv</span></span></code></pre></div><p>③ 通过<code>top -H -p 进程号</code>命令可以查询进程中线程的使用情况。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可以查询出进程中占用CPU高的线程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">top</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8432</span></span></code></pre></div><p>由于Java是多线程程序。可以通过这个命令，找出CPU占用过高的java线程。</p><p>④ 通过<code>jstack</code>命令，打印出线程具体信息。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 输出线程ID为8432的信息，到info.log文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jstack</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8432</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info.log</span></span></code></pre></div><p>⑤ 打开刚刚生成的日志文件info.log。并在日志文件中，通过16进制的线程ID号。来定位线程正在执行的方法是什么。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 先通过下面的命令，将线程ID号转换为16进制。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">printf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%x\\n&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8432</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 然后打开日志文件。在日志文件中根据16进制的线程ID号，来搜索。</span></span></code></pre></div><h2 id="项目技术使用方面" tabindex="-1">项目技术使用方面 <a class="header-anchor" href="#项目技术使用方面" aria-label="Permalink to &quot;项目技术使用方面&quot;">​</a></h2><h3 id="你在面试开发中遇到的最难的问题是什么" tabindex="-1">你在面试开发中遇到的最难的问题是什么？ <a class="header-anchor" href="#你在面试开发中遇到的最难的问题是什么" aria-label="Permalink to &quot;你在面试开发中遇到的最难的问题是什么？&quot;">​</a></h3><p>我觉得我自己在开发中遇到最难的问题是上手。如果你中途接手一个项目，由于你不熟练，那么最难的就是交接。特别是没有文档，或者文档不全的情况下。你要接手项目就需要大量的测试，或者问别人。</p><h3 id="你项目中的redis的怎么用的" tabindex="-1">你项目中的redis的怎么用的？ <a class="header-anchor" href="#你项目中的redis的怎么用的" aria-label="Permalink to &quot;你项目中的redis的怎么用的？&quot;">​</a></h3><p>在门户子系统中，有多个地方都用到redis。</p><ul><li>例如即时消息模块中，我们用list类型数据缓存用户之间的聊天记录到redis中，并针对redis进行持久化。</li><li>在工作台模块中，会把用户收藏的菜单，代办事项等数据缓存到redis,并持久化。</li><li>在用户模块中，会把用户的基本消息，用户所属角色信息，用户可访问菜单信息缓存到redis，并持久化。</li><li>在权限模块中，会全表查询一遍，子系统信息，组织机构信息，菜单信息，都缓存到redis中。</li><li>对于各种分页数据，我们可以把这些分页数据也缓存到redis中，可以用zset类型数据缓存分页数据。其中key名为：user:page:{pageNum},表格数据的id作为分数用于排序。</li></ul><blockquote><p>分页表格数据的redis缓存方案</p></blockquote><p>查询分页数据，然后user:{id}的形式缓存到redis中，再次查询分页数据的时候，计算出要查询的是哪些，然后再从redis中取出来。如果某个数据更新了，那就单独再redis中删除这条数据。下次再查询，就追加到redis缓存中。</p><blockquote><p>如果保持缓存与数据库的数据一致性？</p></blockquote><p>推荐的方案：先更新数据库，再删除缓存的方案，并配合消息队列的方式。</p><ul><li>读请求首先读缓存，如果缓存中不存在，再从数据库中读取，并更新到缓存。</li><li>写请求只写数据库。修改数据后，删除对应的缓存。</li><li>写入缓存中的数据，根据不同的缓存数据，设置不同的过期时间。</li></ul><h3 id="你项目中是怎么用rocketmq的" tabindex="-1">你项目中是怎么用RocketMq的？ <a class="header-anchor" href="#你项目中是怎么用rocketmq的" aria-label="Permalink to &quot;你项目中是怎么用RocketMq的？&quot;">​</a></h3><p>在文件模块中，如果文件发送成功，会会发送一条单向消息去通知接收方。 在xx子系统中，当办理业务的时候，会进行业务的办理日志。此时可以通过mq来把业务办理消息发送到mq中，提供给日志中心进行消费。日志中心会把业务办理记录存储到数据库中。</p><h3 id="如何保障接口幂等性问题" tabindex="-1">如何保障接口幂等性问题？ <a class="header-anchor" href="#如何保障接口幂等性问题" aria-label="Permalink to &quot;如何保障接口幂等性问题？&quot;">​</a></h3><p>接口幂等性是指多次执行同一操作的结果与单次执行该操作的接口相同。简而言之就是如何防止接口被多次重复调用的问题。</p><ul><li>对于需要保障幂等性的接口，调接口时传入唯一请求ID。</li><li>在后端接口中增加请求ID校验逻辑。确保接口不会重复调用。可以通过redis存储已调用的请求ID。</li></ul>`,33)]))}const g=s(p,[["render",n]]);export{u as __pageData,g as default};
