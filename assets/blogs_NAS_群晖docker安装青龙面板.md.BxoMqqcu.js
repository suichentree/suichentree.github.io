import{_ as s}from"./chunks/20230102145428.DETfjDaF.js";import{_ as n,c as p,o as e,ak as t}from"./chunks/framework.CmzJUe0_.js";const i="/assets/20230102154723.uOA0fiwV.png",l="/assets/20230102155108.PtsKs4Sf.png",o="/assets/20230102155156.D1gwgbt_.png",r="/assets/20230102155537.B2xx4Him.png",c="/assets/20230102160132.B9D-AOi2.png",d="/assets/20230102155634.t-JgjP5I.png",g="/assets/20230102160427.BBq7yD9l.png",h="/assets/20230102160326.CXmclk49.png",_="/assets/20230102160944.Cy2Epil-.png",u="/assets/20230102161757.BboxiqIv.png",m="/assets/20230102163119.BN_1GOMI.png",b="/assets/20230102163620.WHt-YWUJ.png",k="/assets/20230102164005.PkbQ_6RB.png",N=JSON.parse('{"title":"群晖docker安装青龙面板","description":"","frontmatter":{"title":"群晖docker安装青龙面板","date":"2023-01-02T00:00:00.000Z","sidebar":"auto","categories":["NAS"],"tags":["群晖"]},"headers":[],"relativePath":"blogs/NAS/群晖docker安装青龙面板.md","filePath":"blogs/NAS/群晖docker安装青龙面板.md"}'),q={name:"blogs/NAS/群晖docker安装青龙面板.md"};function f(x,a,v,j,y,P){return e(),p("div",null,a[0]||(a[0]=[t(`<p>[toc]</p><h1 id="群晖docker安装青龙面板" tabindex="-1">群晖docker安装青龙面板 <a class="header-anchor" href="#群晖docker安装青龙面板" aria-label="Permalink to &quot;群晖docker安装青龙面板&quot;">​</a></h1><p>安装的青龙面板版本为2.11.3。最新版本青龙面板中下载Linux依赖安装总是失败。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>青龙面板</span></span>
<span class="line"><span>一个支持python3、javaScript、shell、typescript 的定时任务管理面板。主要用它跑定时脚本。</span></span></code></pre></div><p><a href="https://hub.docker.com/r/whyour/qinglong" target="_blank" rel="noreferrer">青龙面板-dockerhub地址</a></p><p>PS: 需要提前在群晖系统中安装docker套件</p><h2 id="_1-提前创建qinglong文件夹" tabindex="-1">1 提前创建qinglong文件夹 <a class="header-anchor" href="#_1-提前创建qinglong文件夹" aria-label="Permalink to &quot;1 提前创建qinglong文件夹&quot;">​</a></h2><p>在docker共享文件夹中创建qinglong文件夹，并在其中创建图中的子目录。 <img src="`+i+'" alt="20230102154723.png"></p><h2 id="_2-设置qinglong文件夹的权限" tabindex="-1">2 设置qinglong文件夹的权限 <a class="header-anchor" href="#_2-设置qinglong文件夹的权限" aria-label="Permalink to &quot;2 设置qinglong文件夹的权限&quot;">​</a></h2><p>右键qinglong文件夹，选择属性，选择权限，点击新增，然后在用户或组里选Everyone，接着，权限全部打勾，最后确定。</p><p>注意选择应用到这个文件夹，子文件夹，文件。</p><p><img src="'+s+'" alt="20230102145428.png"></p><h2 id="_3-在docker中下载青龙面板映像" tabindex="-1">3 在docker中下载青龙面板映像 <a class="header-anchor" href="#_3-在docker中下载青龙面板映像" aria-label="Permalink to &quot;3 在docker中下载青龙面板映像&quot;">​</a></h2><p><img src="'+l+'" alt="20230102155108.png"><img src="'+o+'" alt="20230102155156.png"></p><h2 id="_4-创建青龙面板容器-进行容器设置" tabindex="-1">4 创建青龙面板容器，进行容器设置 <a class="header-anchor" href="#_4-创建青龙面板容器-进行容器设置" aria-label="Permalink to &quot;4 创建青龙面板容器，进行容器设置&quot;">​</a></h2><p>启动青龙面板镜像文件，创建容器。有几个地方需要手动设置，其他选择默认即可。</p><p>青龙面板默认端口为5700</p><p><img src="'+r+'" alt="20230102155537.png"><img src="'+c+'" alt="20230102160132.png"><img src="'+d+'" alt="20230102155634.png"></p><h2 id="_5-登录青龙面板" tabindex="-1">5 登录青龙面板 <a class="header-anchor" href="#_5-登录青龙面板" aria-label="Permalink to &quot;5 登录青龙面板&quot;">​</a></h2><p>容器启动后，输入青龙面板的网址（<a href="http://ip:5700" target="_blank" rel="noreferrer">http://ip:5700</a>），登录青龙面板。一开始使用需要注册</p><p><img src="'+g+'" alt="20230102160427.png"><img src="'+h+'" alt="20230102160326.png"></p><h1 id="青龙面板的使用" tabindex="-1">青龙面板的使用 <a class="header-anchor" href="#青龙面板的使用" aria-label="Permalink to &quot;青龙面板的使用&quot;">​</a></h1><h2 id="_1-依赖包说明" tabindex="-1">1 依赖包说明 <a class="header-anchor" href="#_1-依赖包说明" aria-label="Permalink to &quot;1 依赖包说明&quot;">​</a></h2><p>一开始使用青龙面板，需要先下载依赖包。依赖包主要分为3种，nodejs依赖，python依赖，linux依赖。因为青龙面板中的脚本文件需要靠依赖包才能运行。</p><p>青龙面板应该内置了nodejs环境，python环境，linux环境。</p><p><img src="'+_+`" alt="20230102160944.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>网上3种依赖包范例：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>node依赖=============</span></span>
<span class="line"><span>@types/node  </span></span>
<span class="line"><span>require</span></span>
<span class="line"><span>typescript</span></span>
<span class="line"><span>crypto-js</span></span>
<span class="line"><span>prettytable</span></span>
<span class="line"><span>dotenv</span></span>
<span class="line"><span>jsdom</span></span>
<span class="line"><span>date-fns</span></span>
<span class="line"><span>tough-cookie</span></span>
<span class="line"><span>tslib</span></span>
<span class="line"><span>ws@7.4.3</span></span>
<span class="line"><span>ts-md5</span></span>
<span class="line"><span>jsdom -g</span></span>
<span class="line"><span>jieba</span></span>
<span class="line"><span>form-data</span></span>
<span class="line"><span>json5</span></span>
<span class="line"><span>global-agent </span></span>
<span class="line"><span>js-base64</span></span>
<span class="line"><span>axios</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Python依赖====================</span></span>
<span class="line"><span>requests</span></span>
<span class="line"><span>canvas  </span></span>
<span class="line"><span>ping3</span></span>
<span class="line"><span>jieba</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Linux依赖====================</span></span>
<span class="line"><span>bizCode</span></span>
<span class="line"><span>bizMsg  </span></span>
<span class="line"><span>lxml</span></span></code></pre></div><h2 id="_2-下载依赖包" tabindex="-1">2.下载依赖包 <a class="header-anchor" href="#_2-下载依赖包" aria-label="Permalink to &quot;2.下载依赖包&quot;">​</a></h2><p>选择依赖管理，点击新增依赖，设置依赖类型，输入依赖名称。（若要同时下载多个依赖，则选择自动拆分）</p><p><img src="`+u+`" alt="20230102161757.png"></p><h2 id="_3-拉取脚本仓库" tabindex="-1">3.拉取脚本仓库 <a class="header-anchor" href="#_3-拉取脚本仓库" aria-label="Permalink to &quot;3.拉取脚本仓库&quot;">​</a></h2><p>网上有许多脚本仓库。这些脚本仓库其实是作者写好的定时脚本文件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>smiek2121的脚本库</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ql repo https://github.com/smiek2121/scripts.git &quot;jd_|gua_&quot; &quot;&quot; &quot;ZooFaker_Necklace.js|JDJRValidator_Pure.js|sign_graphics_validate.js|cleancart_activity.js|jdCookie.js|sendNotify.js&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Faker仓库脚本</span></span>
<span class="line"><span>ql repo https://github.com/shufflewzc/faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd1|USER|utils|ZooFaker_Necklace.js|JDJRValidator_Pure|sign_graphics_validate&quot;</span></span></code></pre></div><ol><li><p>选择定时任务，点击新建任务，设置任务名称，命令，定时规则。点击确定。 <img src="`+m+'" alt="20230102163119.png"></p></li><li><p>在定时任务中找到新建的任务。运行该任务。</p></li><li><p>当任务执行完之后，你会发现定时任务界面增加了许多其他定时任务。这些定时任务是仓库脚本里面自带的。 <img src="'+b+'" alt="20230102163620.png"></p></li><li><p>之后可以在定时任务界面中执行或批量执行这些定时脚本文件。</p></li></ol><h2 id="_4-配置环境变量" tabindex="-1">4.配置环境变量 <a class="header-anchor" href="#_4-配置环境变量" aria-label="Permalink to &quot;4.配置环境变量&quot;">​</a></h2><p>有些定时脚本需要环境变量才能运行。所以我们需要在青龙面板中设置环境变量。例如京东定时签到脚本，就需要JD_COOKIE环境变量。</p><p>选择环境变量，点击新建变量，填写名称，值。点击确定。</p><p><img src="'+k+'" alt="20230102164005.png"></p><p>JDcookie环境变量的格式为：pt_key=XXXX;pt_pin=XXXX;</p><h1 id="自己写的青龙脚本" tabindex="-1">自己写的青龙脚本 <a class="header-anchor" href="#自己写的青龙脚本" aria-label="Permalink to &quot;自己写的青龙脚本&quot;">​</a></h1><p>参考了网上其他大神写的青龙脚本，按照自己的想法稍微修改了一下。</p><p>github仓库链接：<a href="https://github.com/suichentree/shu_script.git" target="_blank" rel="noreferrer">https://github.com/suichentree/shu_script.git</a></p>',42)]))}const D=n(q,[["render",f]]);export{N as __pageData,D as default};
