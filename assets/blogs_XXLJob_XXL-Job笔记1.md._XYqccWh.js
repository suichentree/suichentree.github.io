import{_ as i,c as a,o as n,ak as l}from"./chunks/framework.CmzJUe0_.js";const p="/assets/xxljob_20240403164039.BIz8f8P2.png",t="/assets/xxljob_20240404162632.C9Guz-jr.png",h="/assets/xxljob_20240404155532.D6-_G3Qx.png",e="/assets/xxljob_20240405110601.B-DcOlb8.png",k="/assets/xxljob_20240405111540.BIhjukac.png",o="/assets/xxljob_20240405114004.BT34Phd8.png",r="/assets/xxljob_20240405134218.Tagg0sYf.png",E="/assets/xxljob_20240405134626.Dsp6JXi2.png",d="/assets/xxljob_20240405134505.BacsYAGa.png",g="/assets/xxljob_20240405135453.6tdAmAV6.png",c="/assets/xxljob_20240405135604.DZnA8Q4e.png",y="/assets/xxljob_20240405135644.C0YbDkKG.png",x="/assets/xxljob_20240405140107.BCb0QTnF.png",b="/assets/xxljob_20240405140222.DFnsuYFO.png",_=JSON.parse('{"title":"XXL-job笔记1","description":"","frontmatter":{"title":"XXL-job笔记1","date":"2024-04-03T00:00:00.000Z","sidebar":"auto","categories":["后端"],"tags":["XXL-job"]},"headers":[],"relativePath":"blogs/XXLJob/XXL-Job笔记1.md","filePath":"blogs/XXLJob/XXL-Job笔记1.md"}'),u={name:"blogs/XXLJob/XXL-Job笔记1.md"};function F(m,s,A,D,j,q){return n(),a("div",null,s[0]||(s[0]=[l('<p>[toc]</p><h1 id="xxl-job笔记1" tabindex="-1">XXL-job笔记1 <a class="header-anchor" href="#xxl-job笔记1" aria-label="Permalink to &quot;XXL-job笔记1&quot;">​</a></h1><p><a href="https://www.xuxueli.com/xxl-job/" target="_blank" rel="noreferrer">xxl-job官网文档</a></p><p>XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。</p><p>XXL是作者名字的首字母的缩写。</p><blockquote><p>什么是任务调度平台？</p></blockquote><p>任务调度平台本质上就是一个定时任务的实现方案。</p><p>在生活中，经常有一些业务场景需要定时任务来执行。例如在某个时间点批量处理数据或者每隔10分钟需要执行一次特定任务等。</p><h2 id="docker-部署xxl-job的调度中心" tabindex="-1">docker 部署XXL-job的调度中心 <a class="header-anchor" href="#docker-部署xxl-job的调度中心" aria-label="Permalink to &quot;docker 部署XXL-job的调度中心&quot;">​</a></h2><p>XXL-job的调度中心需要依赖Mysql。因此部署调度中心，需要先在Mysql中创建xxl-job相关的数据库表。</p><blockquote><p>步骤① 创建xxl-job数据库</p></blockquote><p>去Github下载最新发布的xxl-job源码，<code>https://github.com/xuxueli/xxl-job/releases</code>，找到<code>/xxl-job/doc/db/tables_xxl_job.sql</code>文件。在mysql中执行sql文件即可，脚本里面包含xxl_job数据库的创建。</p><p><img src="'+p+`" alt="xxljob_20240403164039.png"></p><blockquote><p>步骤② 创建并启动xxl-job容器</p></blockquote><p>xxl-job的docker镜像地址：<code>https://hub.docker.com/r/xuxueli/xxl-job-admin</code></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载指定版本的xxl-job镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xuxueli/xxl-job-admin:2.4.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建xxl-job容器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如需自定义 mysql 等配置，可通过 &quot;-e PARAMS&quot; 指定，参数格式 PARAMS=&quot;--key=value  --key2=value2&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 配置项参考文件：/xxl-job/xxl-job-admin/src/main/resources/application.properties</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如需自定义 JVM内存参数 等配置，可通过 &quot;-e JAVA_OPTS&quot; 指定，参数格式 JAVA_OPTS=&quot;-Xmx512m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /d/DockerVolumes/xxljob 容器数据卷。指代D盘的DockerVolumes目录中的。。。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PARAMS=&quot;--spring.datasource.url=jdbc:mysql://172.17.0.2:3306/xxl_job?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=123456&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 37100:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/xxljob/data/applogs:/data/applogs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myXXLjob-admin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xuxueli/xxl-job-admin:2.4.0</span></span></code></pre></div><span style="color:red;"><p>注意事项：</p><ol><li><code>172.17.0.2</code>是mysql容器的ip。<code>3306</code>是mysql容器的端口，切记是3306端口，而不是mysql容器的映射到宿主机上的端口，映射端口是给宿主机访问使用的，容器之间互相访问不需要映射端口。另外xxl-job容器需要依赖mysql，否则xxl-job容器无法成功启动。</li><li><code>/d/DockerVolumes/xxljob/data/applogs</code>是xxl-job容器的容器数据卷。用来保存xxl-job容器的数据。</li><li>mysql容器重启之后，mysql容器的ip容易发生改变。解决方法：更换xxl-job容器的配置。或者通过docker network来连接mysql容器。</li><li>另外调度中心的配置文件是源代码中的<code>/xxl-job/xxl-job-admin/src/main/resources/application.properties</code>。可以自行在容器命令中进行修改。</li></ol></span><p>调度中心完整配置内容如下所示。上面就是通过命令行的方式来替换为自己的配置。</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心连接mysql的连接地址，可替换为自己的mysql连接地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=jdbc:mysql://127.0.0.1:3306/xxl_job?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=utf8&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">autoReconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">allowPublicKeyRetrieval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">useSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=Asia/Shanghai</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认的mysql账号密码，可以替换为自己的mysql账号密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=root_pwd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.datasource.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 报警邮箱</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=smtp.qq.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=25</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxx@qq.com</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=xxx</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.auth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.starttls.enable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.starttls.required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">spring.mail.properties.mail.smtp.socketFactory.class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=javax.net.ssl.SSLSocketFactory</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心通讯TOKEN [选填]：非空时启用；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心国际化配置 [必填]： 默认为 &quot;zh_CN&quot;/中文简体, 可选范围为 &quot;zh_CN&quot;/中文简体, &quot;zh_TC&quot;/中文繁体 and &quot;en&quot;/英文；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=zh_CN</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 调度线程池最大线程配置【必填】</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.triggerpool.fast.max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=200</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.triggerpool.slow.max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心日志表数据保存天数 [必填]：过期日志自动清理；限制大于等于7时生效，否则, 如-1，关闭自动清理功能；</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">xxl.job.logretentiondays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30</span></span></code></pre></div><blockquote><p>步骤③ 当xxl-job容器成功运行之后</p></blockquote><p>访问调度中心访问地址：<code>http://localhost:37100/xxl-job-admin</code> (该地址执行器将会使用到，作为回调地址)</p><p>默认登录账号 “admin/123456”, 登录后运行界面如下图所示。至此xxl-job调度中心部署成功。</p><p><img src="`+t+'" alt="xxljob_20240404162632.png"><img src="'+h+`" alt="xxljob_20240404155532.png"></p><h2 id="创建并部署xxl-job的执行器" tabindex="-1">创建并部署XXL-job的执行器 <a class="header-anchor" href="#创建并部署xxl-job的执行器" aria-label="Permalink to &quot;创建并部署XXL-job的执行器&quot;">​</a></h2><p>xxl-job的执行器本质上就是一个java应用服务。通过在调度中心中配置执行器之后，调度中心就可以让执行器去执行定时任务。</p><p>xxl-job执行定时任务的调用顺序：调度中心 -》 执行器 -》 定时任务。</p><p>执行器的作用：接收“调度中心”的调度并执行定时任务。我们可直接部署官方提供的执行器项目，也可以将执行器集成到现有业务项目中。</p><blockquote><p>步骤① 创建一个空的java项目，作为自己的执行器项目。项目中导入xxl-job的依赖。</p></blockquote><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- xxl-job-core 依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.xuxueli&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;xxl-job-core&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.4.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>步骤② 配置执行器项目的配置文件</p></blockquote><p>xxl-job官方提供了一个执行器项目模板。在xxl-job源码<code>https://github.com/xuxueli/xxl-job/releases</code>中，找到<code>/xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/src/main/resources/application.properties</code>文件。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 调度中心部署根地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;；为空则关闭自动注册；</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器通讯TOKEN [选填]：非空时启用；</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.accessToken=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器应用名称AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.executor.appname=xxl-job-executor-sample</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务&quot;xxl.job.executor.port和xxl.job.executor.ip&quot;作为注册地址。从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.executor.address=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 &quot;执行器注册&quot; 和 &quot;调度中心请求并触发任务&quot;；</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.executor.ip=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.executor.port=9999</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">xxl.job.executor.logretentiondays=30</span></span></code></pre></div><p>这个文件是官方执行器项目模板的配置文件。我们可以根据这个配置文件来修改自己的执行器项目配置。</p><p>自己的执行器项目配置如下。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## 服务运行端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">38060</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shuyx-xxljob</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xxl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      addresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://localhost:37100/xxl-job-admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 调度中心地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    accessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">default_token</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    executor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">172.25.0.1:9999</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # address就是ip和port的综合方式。可填可不填</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      appname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">shuyx-xxl-job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9999</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  #指定一个端口，用来与调度中心进行通信</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      ip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172.25.0.1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              #该ip是执行器的ip,该ip用来与调度中心进行通信</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 日志保存地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      logpath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data/applogs/xxl-job/jobhandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 日志保存时间</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      logretentiondays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span></span></code></pre></div><span style="color:red;"><p>注意事项：</p><ol><li><code>xxl.job.executor.ip</code>配置是执行器所在的IP地址。调度中心需要通过它与执行器互相通信。因此如果调度中心是部署在docker容器中，而执行器是在宿主机中，那么此处填写的就是执行器所在的docker0网卡的ip地址，而不是localhost或127等IP，否则调度中心找不到执行器。</li><li><code>xxl.job.executor.port</code>配置是执行器与调度中心进行互相通信的端口。与执行器项目的默认启动端口不同。该配置默认为9999。</li></ol></span><blockquote><p>步骤③ 配置执行器项目的配置类</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XxlJobConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.admin.addresses}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String adminAddresses;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.appname}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String appName;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.ip}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String ip;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.port}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.accessToken}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String accessToken;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.logpath}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String logPath;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${xxl.job.executor.logretentiondays}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logRetentionDays;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">initMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">destroyMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;destroy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobSpringExecutor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xxlJobExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        XxlJobSpringExecutor xxlJobSpringExecutor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XxlJobSpringExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAdminAddresses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(adminAddresses);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAppname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appName);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //xxlJobSpringExecutor.setIp(ip);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(port);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAccessToken</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(accessToken);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logPath);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xxlJobSpringExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogRetentionDays</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logRetentionDays);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxlJobSpringExecutor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>步骤④ 运行执行器项目。</p></blockquote><p>若执行器项目运行成功，那么执行器项目便创建完成了。</p><h3 id="启动xxl-job的执行器项目报错" tabindex="-1">启动XXL-job的执行器项目报错 <a class="header-anchor" href="#启动xxl-job的执行器项目报错" aria-label="Permalink to &quot;启动XXL-job的执行器项目报错&quot;">​</a></h3><p>报错问题：当运行执行器项目的时候，报如下错误的时候。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xxl-job registry fail ... [code=500, msg=The access token is wrong., content=null]</span></span></code></pre></div><p>报错原因: 在使用springboot整合xxl-job中，执行器向调度中心注册的时候提示注册失败，原因是因为token出错。</p><p>解决办法：</p><ol><li>如果使用的xxl-job是2.4.0版本以上的。需要在执行器项目的配置文件中配置<code>xxl.job.accessToken: default_token</code>。</li><li>另外还需要再xxl-job的配置类中通过@Value将<code>xxl.job.accessToken</code>的值获取到并注入到xxlJobSpringExecutor中。</li></ol><p>之所以要添加<code>xxl.job.accessToken</code>这个配置参数。是因为最新的2.4.0版本的xxl-job中该配置参数变成了默认选项。执行器必须加上<code>xxl.job.accessToken</code>配置参数。</p><h2 id="xxl-job的运行模式" tabindex="-1">xxl-job的运行模式 <a class="header-anchor" href="#xxl-job的运行模式" aria-label="Permalink to &quot;xxl-job的运行模式&quot;">​</a></h2><h3 id="bean模式" tabindex="-1">Bean模式 <a class="header-anchor" href="#bean模式" aria-label="Permalink to &quot;Bean模式&quot;">​</a></h3><p>Bean模式是指基于Java方法的开发方式，每个定时任务对应执行器中的一个Java方法。</p><blockquote><p>优点： 每个任务代表一个方法，并添加”@XxlJob”注解即可，更加方便、快速。支持自动扫描任务并注入到执行器容器。 缺点：要求Spring容器环境；</p></blockquote><p>Bean模式实现方式</p><blockquote><p>步骤① 在执行器项目中创建任务</p></blockquote><p>任务本质上就是一段代码。我们需要在执行器项目中创建一个定时任务。</p><ol><li>先在执行器项目中创建一个任务类。在任务类中编写具体方法。</li><li>在方法上添加@XxlJob注解，注解值为自定义任务的名称。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XxlJobController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">XxlJob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testTask1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testTask1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String param </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getJobParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //XxlJobHelper.log会把信息呈现在调度中心中。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试开始&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //打印任务参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务开始执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务参数为:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,param);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;任务执行完成&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        XxlJobHelper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试结束&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>步骤② 创建执行器</p></blockquote><p>在调度中心，创建执行器。该执行器指向对应的执行器java项目。</p><p><img src="`+e+'" alt="xxljob_20240405110601.png"></p><blockquote><p>步骤③ 在调度中心中创建任务。指向执行器项目中的任务。</p></blockquote><p><img src="'+k+'" alt="xxljob_20240405111540.png"></p><ol><li>JobHandler属性填写任务注解“@XxlJob”中定义的值</li><li>调度类型可以选择定时或者不定时。</li><li>任务参数会传递给<code>XxlJobHelper.getJobParam();</code></li></ol><blockquote><p>步骤④ 执行任务</p></blockquote><p>在调度中心中执行一次任务。 <img src="'+o+'" alt="xxljob_20240405114004.png"> 输入任务参数和机器地址（选填），点击保存 <img src="'+r+'" alt="xxljob_20240405134218.png"> 当任务执行完成后，可以查看调度中心的日志信息 <img src="'+E+'" alt="xxljob_20240405134626.png"> 执行器项目中的运行截图如下 <img src="'+d+'" alt="xxljob_20240405134505.png"></p><h3 id="glue模式-java" tabindex="-1">GLUE模式(Java) <a class="header-anchor" href="#glue模式-java" aria-label="Permalink to &quot;GLUE模式(Java)&quot;">​</a></h3><p>GLUE模式(Java)中的任务代码，直接在调度中心在线维护任务代码。调度中心支持Web IDE在线更新带啊吗，实时编译和生效，因此不需要指定JobHandler。</p><blockquote><p>步骤1 在调度中心，新建调度任务</p></blockquote><p><img src="'+g+'" alt="xxljob_20240405135453.png"></p><blockquote><p>步骤2 维护调度任务代码</p></blockquote><p>选中指定任务，点击该任务右侧“GLUE IDE”按钮，将会前往Web IDE界面，在该界面支持对任务代码进行开发（也可以在IDE中开发完成后，复制粘贴到编辑中）。</p><p><img src="'+c+'" alt="xxljob_20240405135604.png"> Web IDE界面如图所示 <img src="'+y+'" alt="xxljob_20240405135644.png"></p><blockquote><p>步骤3 执行任务</p></blockquote><p>后面自行执行任务，然后查询日志信息即可。</p><h3 id="glue模式-shell" tabindex="-1">GLUE模式(Shell) <a class="header-anchor" href="#glue模式-shell" aria-label="Permalink to &quot;GLUE模式(Shell)&quot;">​</a></h3><p>同理，GLUE模式(Shell)是指可以在调度中心在线维护任务。该任务就是一段shell脚本。</p><p><img src="'+x+'" alt="xxljob_20240405140107.png"></p><h3 id="glue模式-python" tabindex="-1">GLUE模式(Python) <a class="header-anchor" href="#glue模式-python" aria-label="Permalink to &quot;GLUE模式(Python)&quot;">​</a></h3><p>该模式的任务实际上是一段 “python” 脚本。</p><p><img src="'+b+'" alt="xxljob_20240405140222.png"></p><h3 id="glue模式-nodejs" tabindex="-1">GLUE模式(NodeJS) <a class="header-anchor" href="#glue模式-nodejs" aria-label="Permalink to &quot;GLUE模式(NodeJS)&quot;">​</a></h3><p>该模式的任务实际上是一段 “nodeJS” 脚本；</p><h3 id="glue模式-php" tabindex="-1">GLUE模式(PHP) <a class="header-anchor" href="#glue模式-php" aria-label="Permalink to &quot;GLUE模式(PHP)&quot;">​</a></h3><p>同上</p><h3 id="glue模式-powershell" tabindex="-1">GLUE模式(PowerShell) <a class="header-anchor" href="#glue模式-powershell" aria-label="Permalink to &quot;GLUE模式(PowerShell)&quot;">​</a></h3><p>同上</p>',85)]))}const B=i(u,[["render",F]]);export{_ as __pageData,B as default};
