import{_ as i,c as a,o as n,ak as t}from"./chunks/framework.CmzJUe0_.js";const d=JSON.parse('{"title":"可执行jar包和普通jar包的区别","description":"","frontmatter":{"title":"可执行jar包和普通jar包的区别","date":"2023-11-12T00:00:00.000Z","sidebar":"auto","categories":["后端"],"tags":["SpringBoot","maven"]},"headers":[],"relativePath":"blogs/SpringBoot/可执行jar包和普通jar包的区别.md","filePath":"blogs/SpringBoot/可执行jar包和普通jar包的区别.md"}'),p={name:"blogs/SpringBoot/可执行jar包和普通jar包的区别.md"};function l(h,s,k,E,r,e){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="可执行jar包和普通jar包的区别" tabindex="-1">可执行jar包和普通jar包的区别 <a class="header-anchor" href="#可执行jar包和普通jar包的区别" aria-label="Permalink to &quot;可执行jar包和普通jar包的区别&quot;">​</a></h1><p>通常情况下对Spring Boot项目执行 mvn package 命令，默认打包成的jar包叫做可执行jar包。</p><p>而对普通java项目执行mvn package命令，打包成的jar包是普通jar包。</p><blockquote><p>可执行jar包和普通jar包的区别</p></blockquote><ol><li><p>可执行jar包可以通过java -jar xxx.jar 命令执行。而普通jar包不可以通过java -jar xxx.jar 命令执行，普通jar包只能当作依赖包，被其他应用依赖。</p></li><li><p>可执行jar包与普通jar包中的目录结构不同</p></li></ol><p>可执行jar包中存放了需要依赖的jar包，解压打开后会有一个BOOT-INF目录，里面存放了这个jar包需要依赖的其他jar包。相当于所有的jar包都存放在一起。这也是可执行jar包能直接用java -jar命令执行的原因。</p><p>而普通jar包没有需要依赖的jar包，解压打开后只有源代码。</p><p>主要区别就是可执行jar包中会存放其他依赖jar包，而普通jar包没有存放。</p><blockquote><p>如何打出可执行jar包</p></blockquote><p>springboot项目能打出可执行jar包，主要是因为spring-boot-maven-plugin插件。</p><p>当在项目的pom文件中配置了spring-boot-maven-plugin插件。那么该项目就能打出可执行jar包。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p>如何一次打出可执行jar包和普通jar包</p></blockquote><p>一般来说，SpringBoot项目直接打包成可执行jar包即可，不建议将打出普通的jar包被其他的项目所依赖。</p><p>给spring-boot-maven-plugin插件添加如下配置,就可以让SpringBoot项目同时打包出可执行jar包和普通jar包。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-boot-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;exec&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">classifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>classifier表示可执行jar包的名字，配置了这个之后，在插件执行命令时，就不会给可执行jar包重命名。</p>`,17)]))}const o=i(p,[["render",l]]);export{d as __pageData,o as default};
