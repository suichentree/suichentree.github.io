import{_ as s,c as i,o as l,ak as e}from"./chunks/framework.CmzJUe0_.js";const c=JSON.parse('{"title":"java实体类为什么要序列化","description":"","frontmatter":{"title":"java实体类为什么要序列化","date":"2024-04-10T00:00:00.000Z","sidebar":"auto","categories":["随笔"],"tags":["Java"]},"headers":[],"relativePath":"blogs/随笔/Java实体类为什么要序列化.md","filePath":"blogs/随笔/Java实体类为什么要序列化.md"}'),t={name:"blogs/随笔/Java实体类为什么要序列化.md"};function n(p,a,k,h,r,o){return l(),i("div",null,a[0]||(a[0]=[e(`<p>[toc]</p><h1 id="java实体类为什么要序列化" tabindex="-1">java实体类为什么要序列化 <a class="header-anchor" href="#java实体类为什么要序列化" aria-label="Permalink to &quot;java实体类为什么要序列化&quot;">​</a></h1><blockquote><p>什么是序列化和反序列化？</p></blockquote><ul><li>序列化：把java对象转换为字节序列的过程称为对象的序列化。</li><li>反序列化：把字节序列恢复为java对象的过程称为对象的反序列化。</li></ul><p>例如当后端向前端发送响应消息时。我们通常会将java对象转化为Json数据，然后发送给前端。而这种java对象转化为Json字符串的过程就是序列化。反过来, 从 Json字符串转换成 Java 对象的过程就是反序列化的过程。</p><blockquote><p>为什么序列化需要 implements Serialzable?</p></blockquote><ul><li>一个类只有实现了 Serializable 接口，它的实例化对象才是可序列化的。因此如果要序列化类的对象，类就必须实现 Serializable 接口。而实际上，Serializable 的源码是一个空接口，没有什么具体内容，它的目的只是简单的标识一个类的对象可以被序列化。</li><li>serialization 允许你将实现了 Serializable 接口的对象转换为字节序列，这些字节序列可以被完全存储起来，以备以后重新生成原来的对象。</li></ul><blockquote><p>什么时候需要用到序列化？</p></blockquote><p>当需要把一个 Java 对象中的各个信息保存到文件或者是数据库的时候。这个时候通常会把java对象进行序列化，从而方便保存java对象。</p><blockquote><p>为什么要显示声明 serialVersionUID</p></blockquote><p>serialVersionUID 的作用是验证java对象在序列化和反序列化的过程中，java对象是否保持一致(即java对象是否发生改变)。所以在一般情况下我们需要显示的声明serialVersionUID。</p><p>如果java对象在序列化和反序列化的过程中被修改了。那么serialVersionUID的数值就会发生改变。从而导致java报错，InvalidClassException 错误。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Student类实现Serializable接口。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//并且显示声明 serialVersionUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serialVersionUID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13)]))}const v=s(t,[["render",n]]);export{c as __pageData,v as default};
