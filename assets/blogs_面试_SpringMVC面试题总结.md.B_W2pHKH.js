import{_ as e}from"./chunks/springmvc_20230731143158.BE19rVYl.js";import{_ as r,c as i,o as l,ak as n}from"./chunks/framework.CmzJUe0_.js";const s="/assets/springmvc_20231202174034.CBAtCKYq.png",V=JSON.parse('{"title":"SpringMVC面试题总结","description":"","frontmatter":{"title":"SpringMVC面试题总结","date":"2023-08-11T00:00:00.000Z","sidebar":"auto","categories":["面试"],"tags":["SpringMVC"]},"headers":[],"relativePath":"blogs/面试/SpringMVC面试题总结.md","filePath":"blogs/面试/SpringMVC面试题总结.md"}'),p={name:"blogs/面试/SpringMVC面试题总结.md"};function t(o,a,c,d,g,h){return l(),i("div",null,a[0]||(a[0]=[n('<p>[toc]</p><h1 id="springmvc面试题总结" tabindex="-1">SpringMVC面试题总结 <a class="header-anchor" href="#springmvc面试题总结" aria-label="Permalink to &quot;SpringMVC面试题总结&quot;">​</a></h1><h2 id="什么是-spring-mvc" tabindex="-1">什么是 Spring MVC？ <a class="header-anchor" href="#什么是-spring-mvc" aria-label="Permalink to &quot;什么是 Spring MVC？&quot;">​</a></h2><p>Spring MVC是一个实现了MVC设计模式的轻量级 Web框架。Spring MVC 通过把模型-视图-控制器分离，从而达到简化开发web应用程序的目的。</p><h2 id="mvc是什么" tabindex="-1">MVC是什么？ <a class="header-anchor" href="#mvc是什么" aria-label="Permalink to &quot;MVC是什么？&quot;">​</a></h2><p>mvc是一种设计模式。模型（model）-视图（view）-控制器（controller）三层架构的 设计模式。</p><p>MVC模式用于实现前端页面的展现与后端业务数据处理的分离。</p><blockquote><p>mvc设计模式的好处</p></blockquote><ol><li>实现了业务系统各个组件之间的解耦，有利于业务系统的可扩展性，可维护性。</li><li>有利于系统的并行开发，提升开发效率。</li></ol><h2 id="spring-mvc的主要组件" tabindex="-1">Spring MVC的主要组件？ <a class="header-anchor" href="#spring-mvc的主要组件" aria-label="Permalink to &quot;Spring MVC的主要组件？&quot;">​</a></h2><ul><li>前端控制器 DispatcherServlet （不需要程序员开发）：用来接收请求并转发。</li><li>处理器映射器HandlerMapping （不需要程序员开发）：根据请求的URL来查找匹配的Handler处理器。</li><li>处理器适配器HandlerAdapter：处理器Handler的时候要按照HandlerAdapter要求的规则去编写。这样HandlerAdapter才能执行处理器Handler。</li><li>处理器Handler （需要程序员开发）: 对请求如何业务处理的部分。</li><li>视图解析器 ViewResolver （不需要程序员开发）：进行视图的解析，并渲染为视图。</li><li>视图View （需要程序员开发jsp）：通常指一个jsp或freemarker页面。</li></ul><h2 id="springmvc-工作流程" tabindex="-1">SpringMVC 工作流程？ <a class="header-anchor" href="#springmvc-工作流程" aria-label="Permalink to &quot;SpringMVC 工作流程？&quot;">​</a></h2><p><img src="'+e+`" alt="springmvc_20230731143158.png"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>（1）客户端（浏览器）发送请求到 DispatcherServlet前端控制器。</span></span>
<span class="line"><span>（2）DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。</span></span>
<span class="line"><span>（3）解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。</span></span>
<span class="line"><span>（4）HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑。</span></span>
<span class="line"><span>（5）处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。</span></span>
<span class="line"><span>（6）ViewResolver 会根据逻辑 View 查找实际的 View。</span></span>
<span class="line"><span>（7）DispaterServlet 把返回的 Model 传给 View（视图渲染）。</span></span>
<span class="line"><span>（8）把 View 返回给请求者（浏览器）</span></span></code></pre></div><p><img src="`+s+'" alt="springmvc_20231202174034.png"></p><p>简化：</p><ol><li>客户端向服务端发出请求。</li><li>请求被DispatcherServlet前端控制器接收。</li><li>前端控制器根据请求路径匹配对应的请求处理器。</li><li>请求处理器来处理请求，并返回ModelAndView模型视图对象。</li><li>前端控制器将模型视图对象交给视图解析器ViewResolver解析。并返回一个渲染后的视图。</li><li>前端控制器将视图响应给客户端。</li></ol><h2 id="spring-mvc常用的注解有哪些" tabindex="-1">Spring MVC常用的注解有哪些？ <a class="header-anchor" href="#spring-mvc常用的注解有哪些" aria-label="Permalink to &quot;Spring MVC常用的注解有哪些？&quot;">​</a></h2><ul><li>@RequestMapping：用于将请求url与类或方法进行绑定。</li><li>@RequestBody：获取http请求中body区域的数据，并赋值给注解标记的参数上。</li><li>@ResponseBody：将方法返回值转换为json对象。并塞入响应的body数据区域中。</li><li>@PathVariable注解 ：用于将请求路径中的变量参数，绑定到方法的参数上。</li><li>@RequestParam注解 : 用于将请求中的请求数据，绑定到方法的参数上。</li></ul><h2 id="controller注解的作用" tabindex="-1">@Controller注解的作用 <a class="header-anchor" href="#controller注解的作用" aria-label="Permalink to &quot;@Controller注解的作用&quot;">​</a></h2><p>在Spring MVC中，控制器Controller主要负责处理由DispatcherServlet转发的请求。</p><p>而@Controller注解用于标记在一个类上，让被标记的类成为一个Spring MVC的 Controller 控制器对象。</p><h2 id="springmvc-拦截器怎么实现" tabindex="-1">SpringMVC 拦截器怎么实现？ <a class="header-anchor" href="#springmvc-拦截器怎么实现" aria-label="Permalink to &quot;SpringMVC 拦截器怎么实现？&quot;">​</a></h2><ol><li>创建一个自定义拦截器类，自定义拦截器类需要实现HandlerInterceptor接口，重写HandlerInterceptor接口中的三个方法。</li><li>将自定义拦截器注入到配置类中。</li></ol><h2 id="springmvc怎么样设定重定向和转发的" tabindex="-1">SpringMVC怎么样设定重定向和转发的？ <a class="header-anchor" href="#springmvc怎么样设定重定向和转发的" aria-label="Permalink to &quot;SpringMVC怎么样设定重定向和转发的？&quot;">​</a></h2><ul><li>转发：在return返回值前面加&quot;forward:&quot;。例如 return <code>forward:user.jsp</code></li><li>重定向：在return返回值前面加&quot;redirect:&quot;。例如 <code>redirect:http://www.baidu.com</code></li></ul>',26)]))}const C=r(p,[["render",t]]);export{V as __pageData,C as default};
