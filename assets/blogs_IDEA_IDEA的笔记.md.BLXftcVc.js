import{_ as e,c as t,o as i,ak as s}from"./chunks/framework.CmzJUe0_.js";const l="/assets/20230216111414.CYnS7Pc-.png",n="/assets/idea_20241212151927.DVKNd_IA.png",o="/assets/idea_20241212152415.CwOZ1pFK.png",p="/assets/idea_20240613095824.3e6M8JYW.png",d="/assets/idea_20241212152707.JHoo22PS.png",r="/assets/idea_20241212153157.Cu5I5u0J.png",D=JSON.parse('{"title":"IDEA的笔记","description":"","frontmatter":{"title":"IDEA的笔记","date":"2024-06-13T00:00:00.000Z","sidebar":"auto","tags":["IDEA"]},"headers":[],"relativePath":"blogs/IDEA/IDEA的笔记.md","filePath":"blogs/IDEA/IDEA的笔记.md"}'),c={name:"blogs/IDEA/IDEA的笔记.md"};function h(g,a,u,b,m,v){return i(),t("div",null,a[0]||(a[0]=[s(`<p>[toc]</p><h1 id="idea的笔记" tabindex="-1">IDEA的笔记 <a class="header-anchor" href="#idea的笔记" aria-label="Permalink to &quot;IDEA的笔记&quot;">​</a></h1><p>最初创建日期：2020-10-12 更新日期：2021-08-11 再次更新日期：2024-06-13</p><h2 id="idea-介绍" tabindex="-1">IDEA 介绍 <a class="header-anchor" href="#idea-介绍" aria-label="Permalink to &quot;IDEA 介绍&quot;">​</a></h2><p>IDEA 全称 IntelliJ IDEA，是用于java语言开发的集成环境（也可用于其他语言）。</p><p>IDEA 在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、创新的GUI设计等方面的功能可以说是超常的。</p><p>IDEA 是 JetBrains 公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p><h2 id="idea-与-eclipse-的区别" tabindex="-1">IDEA 与 Eclipse 的区别 <a class="header-anchor" href="#idea-与-eclipse-的区别" aria-label="Permalink to &quot;IDEA 与 Eclipse 的区别&quot;">​</a></h2><ol><li>IDEA是没有Eclipse的workspace的概念。取代workspace概念的是Project。</li><li>IDEA 的 Project 是一个没有具备任何编码设置、构建等开发功能的，主要起到一个项目定义、范围约束、规范等类型的效果，也许我们可以简单地理解为就是一个单纯的目录，只是这个目录命名上必须有其代表性的意义。</li><li>在IDEA中 Project 是最顶级的级别，次级别是 Module (模块)。一个 Project 可以有多个 Module (模块)。</li></ol><p>目前主流的大型项目结构都是类似这种多 Module 结构。比如：core Module、web Module、test Module等，模块之间彼此可以相互依赖,相互独立。这些Module应该都是处于同一个项目业务情况下的模块，彼此之间是有不可分割的业务关系的。</p><blockquote><p>下表是IDEA 与 Eclipse 之间一些概念的对比：</p></blockquote><table tabindex="0"><thead><tr><th>Eclipse</th><th>IntelliJ IDEA</th></tr></thead><tbody><tr><td>Workspace</td><td>Project</td></tr><tr><td>Project</td><td>Module</td></tr><tr><td>Facet</td><td>Facet</td></tr><tr><td>Library</td><td>Library</td></tr><tr><td>JRE</td><td>SDK</td></tr><tr><td>Classpath variable</td><td>Path variable</td></tr></tbody></table><blockquote><p>SDK（Software Development Kit）介绍</p></blockquote><p>IDEA 的sdk（软件开发工具包）概念,就相当于 jre 运行环境。</p><h2 id="idead的常用设置" tabindex="-1">IDEAD的常用设置 <a class="header-anchor" href="#idead的常用设置" aria-label="Permalink to &quot;IDEAD的常用设置&quot;">​</a></h2><h3 id="_1-使用idea创建工程-会有两个特殊文件-iml文件和-idea文件夹。" tabindex="-1">1 使用idea创建工程，会有两个特殊文件：.iml文件和.idea文件夹。 <a class="header-anchor" href="#_1-使用idea创建工程-会有两个特殊文件-iml文件和-idea文件夹。" aria-label="Permalink to &quot;1 使用idea创建工程，会有两个特殊文件：.iml文件和.idea文件夹。&quot;">​</a></h3><p>.iml文件是工程配置文件，里面是当前project的一些配置信息。 .Idea文件夹存放项目的配置信息，包括历史记录，版本控制信息等。</p><p>上传到git仓库的时候，可以不用上传它们。</p><h3 id="_2-关闭idea自动更新" tabindex="-1">2 关闭IDEA自动更新 <a class="header-anchor" href="#_2-关闭idea自动更新" aria-label="Permalink to &quot;2 关闭IDEA自动更新&quot;">​</a></h3><p>在File-&gt;Settings-&gt;Appearance &amp; Behavior-&gt;System Settings-&gt;Updates下取消 Automatically check updates for 勾选</p><h2 id="使用idea中的git" tabindex="-1">使用IDEA中的Git <a class="header-anchor" href="#使用idea中的git" aria-label="Permalink to &quot;使用IDEA中的Git&quot;">​</a></h2><h3 id="_1-idea-创建-spring-boot项目" tabindex="-1">1.IDEA 创建 spring boot项目 <a class="header-anchor" href="#_1-idea-创建-spring-boot项目" aria-label="Permalink to &quot;1.IDEA 创建 spring boot项目&quot;">​</a></h3><ol><li>安装IDEA</li><li>创建spring boot项目（网上找教程）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Create New Project </span></span>
<span class="line"><span>-&gt; 在左侧菜单找到并点击 Spring Initializr，点击next </span></span>
<span class="line"><span>-&gt; 一直next,直到左面选择Web类别下的Spring Web Starter </span></span>
<span class="line"><span>-&gt; 设置项目名称Project name 和 工程保存路径 Project location。完成后，点击 Finish。</span></span></code></pre></div><ol start="3"><li>如果pom文件中的maven依赖下载慢，就改变IDEA的maven设置（可以把setting.xml文件中的镜像设置为国内的）</li></ol><h3 id="_2-idea创建本地git仓库并把代码push到github上" tabindex="-1">2.IDEA创建本地git仓库并把代码push到github上 <a class="header-anchor" href="#_2-idea创建本地git仓库并把代码push到github上" aria-label="Permalink to &quot;2.IDEA创建本地git仓库并把代码push到github上&quot;">​</a></h3><ol><li>在idea中配置git。</li><li>为当前项目创建git本地仓库</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>选中当前项目-&gt; 点击VCS -&gt; import into version control -&gt; create git repository</span></span>
<span class="line"><span>之后你能在项目文件中找到隐藏的git目录</span></span></code></pre></div><ol start="3"><li>把项目文件存储到git本地的暂存区</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>右键项目-&gt;git-&gt;add</span></span></code></pre></div><ol start="4"><li>把项目暂存区的文件推送到本地仓库中</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>右键项目-&gt;git-&gt;commit directory</span></span></code></pre></div><ol start="5"><li>在github上创建仓库,然后再把远程仓库的代码，先pull到git本地仓库中</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ps:注意创建github仓库时，不要建立readme文件。否则push的时候，容易发生本地仓库与github仓库代码冲突</span></span></code></pre></div><ol start="6"><li>再把git本地仓库的代码push到github上</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1. 在idea中设置github全局信息,登录你的github账号(如果无法登录尝试使用vpn在登录)</span></span>
<span class="line"><span>2. 指定上传的github远程仓库的信息</span></span>
<span class="line"><span>右键项目-&gt;git-&gt;repository-&gt;remotes</span></span>
<span class="line"><span>填写刚刚创建的github远程仓库的信息。例如：xxx://xxx.com/xxx/xxx.git</span></span>
<span class="line"><span>3. push代码</span></span>
<span class="line"><span>右键项目-&gt;git-&gt;repository-&gt;push</span></span></code></pre></div><h3 id="_3-idea-从github上clone一个项目到本地中" tabindex="-1">3.IDEA 从github上clone一个项目到本地中 <a class="header-anchor" href="#_3-idea-从github上clone一个项目到本地中" aria-label="Permalink to &quot;3.IDEA 从github上clone一个项目到本地中&quot;">​</a></h3><ol><li>复制远程仓库的链接。例如：<code>xxx://xxx.com/xxx/xxx.git</code></li><li>点击idea 的 vcs -&gt; checkout from version control -&gt; git</li><li>把链接输入进去。选择新的目录。点击clone即可</li><li>新开一个窗口，打开项目即可</li></ol><h3 id="_4-idea-拉取远程仓库上最新的代码到本地仓库中" tabindex="-1">4.IDEA 拉取远程仓库上最新的代码到本地仓库中 <a class="header-anchor" href="#_4-idea-拉取远程仓库上最新的代码到本地仓库中" aria-label="Permalink to &quot;4.IDEA 拉取远程仓库上最新的代码到本地仓库中&quot;">​</a></h3><ol><li>右键项目-&gt;git-&gt;repository-&gt;pull</li></ol><h2 id="idea-如何屏蔽-iml-idea等不需要的文件类型-避免commit提交无效文件" tabindex="-1">IDEA 如何屏蔽.iml .idea等不需要的文件类型 避免commit提交无效文件 <a class="header-anchor" href="#idea-如何屏蔽-iml-idea等不需要的文件类型-避免commit提交无效文件" aria-label="Permalink to &quot;IDEA 如何屏蔽.iml .idea等不需要的文件类型 避免commit提交无效文件&quot;">​</a></h2><p>使用IDEA创建工程。会有很多.iml .idea文件。这些文件与你的程序代码没什么关系，都是一些IDEA本地编译运行的文件。不仅没用，而且在协作开发中，如果你提交了自己本地的iml文件，被别人拉到其他机器上，还会影响别人运行。</p><p>屏蔽方式： <img src="`+l+`" alt="20230216111414.png"></p><h2 id="idea-中cannot-resolve-symbol-xxx问题的解决方法汇总" tabindex="-1">IDEA 中Cannot Resolve Symbol XXX问题的解决方法汇总 <a class="header-anchor" href="#idea-中cannot-resolve-symbol-xxx问题的解决方法汇总" aria-label="Permalink to &quot;IDEA 中Cannot Resolve Symbol XXX问题的解决方法汇总&quot;">​</a></h2><p>当用idea导入maven项目的时候，会出现各种各样的问题。最常见的是Cannot Resolve Symbol XXX报错</p><p>解决方式：</p><ol><li>检查idea中的maven配置。若使用自己的maven。需要注意MAVEN_HOME和M2_HOME环境变量，以及对应的path系统变量是否在电脑系统中配置好。</li><li>检查maven仓库目录中报错的依赖包，是否完全下载下来。若没有下载下来。先删除该依赖包，再重新下载。在编译器右侧中打开Maven Projects标签，先进行clean一下，再执行install。</li><li>检查idea的sdk,选择自己本地安装的jdk,并检查JAVA_HOME环境变量有没有再系统中设置正确。</li><li>若导入的maven项目没有蓝色小方块图标。需要右键-》maven-&gt;Generate Sources and Update Folder。 重新更新下maven项目</li><li>或者右键-》maven-&gt;Reload Projects</li><li>最后清除idea的编译器缓存。File-&gt;invalidate Caches / Restart</li></ol><h2 id="idea-统一设置文件编码为utf-8-防止出现中文乱码问题" tabindex="-1">IDEA 统一设置文件编码为UTF-8（防止出现中文乱码问题） <a class="header-anchor" href="#idea-统一设置文件编码为utf-8-防止出现中文乱码问题" aria-label="Permalink to &quot;IDEA 统一设置文件编码为UTF-8（防止出现中文乱码问题）&quot;">​</a></h2><ol><li>进入IDEA的 Setting&gt;Editor&gt;File Encodings 设置界面</li></ol><p>修改下面设置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Global Encoding:UTF-8</span></span>
<span class="line"><span>Projectt Encoding:UTF-8</span></span>
<span class="line"><span>Default encoding for properties files:UTF-8</span></span>
<span class="line"><span>勾选上Transparent native-to-ascii conversion</span></span></code></pre></div><p>注意：Transparent native-to-ascii conversion 需勾选上，不然项目中配置文件中的中文注释无法正常显示。</p><p><img src="`+n+'" alt="idea_20241212151927.png"></p><ol start="2"><li>菜单 File - &gt; settings -&gt; appearence , 将字体设置为支持中文的微软雅黑</li></ol><p><img src="'+o+'" alt="idea_20241212152415.png"></p><ol start="3"><li>找到idea安装目录，打开bin目录中的 idea.exe.vmoptions 或 idea64.exe.vmoptions 文件。在最后一行添加上<code>-Dfile.encoding=UTF-8</code>。</li></ol><p><img src="'+p+`" alt="idea_20240613095824.png"></p><ol start="4"><li>导航栏“Help→Etit Custom VM Options…”进入自定义虚拟机设置页面。</li></ol><p>在idea64.exe.vmoptions 文件尾加上</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Dfile.encoding=UTF-8</span></span>
<span class="line"><span>-Dconsole.encoding=UTF-8</span></span></code></pre></div><p><img src="`+d+'" alt="idea_20241212152707.png"></p><ol start="5"><li>最后相关配置修改完成后，需重启 IDEA, 才能让设置生效</li></ol><h2 id="idea-中使用外置-tomcat-相关的控制台日志中文乱码" tabindex="-1">IDEA 中使用外置 Tomcat, 相关的控制台日志中文乱码 <a class="header-anchor" href="#idea-中使用外置-tomcat-相关的控制台日志中文乱码" aria-label="Permalink to &quot;IDEA 中使用外置 Tomcat, 相关的控制台日志中文乱码&quot;">​</a></h2><p>当在IDEA中运行一些老的项目的时候。往往需要搭配外置的tomcat进行启动。因此很有可能也会出现中文乱码的情况。</p><p>在此之前，先给IDEA 统一设置文件编码为UTF-8。</p><ol><li>导航栏 Run -&gt; Edit Configurations… , 进入到Tomcat配置页面。</li></ol><p>修改当前 Web 项目 Tomcat Server的虚拟机输出选项 VM options, 添加<code>-Dfile.encoding=UTF-8</code>,从而让Tomcat 支持 UTF-8 编码</p><p><img src="'+r+`" alt="idea_20241212153157.png"></p><ol start="2"><li>tomcat安装目录中找到config目录中的logging.properties文件，修改下面配置</li></ol><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## java.util.logging.ConsoleHandler.encoding = GBK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">java.util.logging.ConsoleHandler.encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = UTF-8</span></span></code></pre></div>`,70)]))}const A=e(c,[["render",h]]);export{D as __pageData,A as default};
