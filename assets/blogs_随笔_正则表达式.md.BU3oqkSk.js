import{_ as i,c as a,o as n,ak as h}from"./chunks/framework.CmzJUe0_.js";const o=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{"title":"正则表达式","date":"2024-08-08T00:00:00.000Z","sidebar":"auto","categories":["随笔"]},"headers":[],"relativePath":"blogs/随笔/正则表达式.md","filePath":"blogs/随笔/正则表达式.md"}'),t={name:"blogs/随笔/正则表达式.md"};function l(p,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[h(`<p>[toc]</p><h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><p>正则表达式是一个处理字符串的强大工具。它可以快速实现对字符串的检索，替换，匹配，验证等功能。</p><h2 id="正则表达式语法" tabindex="-1">正则表达式语法 <a class="header-anchor" href="#正则表达式语法" aria-label="Permalink to &quot;正则表达式语法&quot;">​</a></h2><p>正则表达式可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。它可以用来从文本中找出满足你想要的格式的句子。</p><h3 id="普通字符" tabindex="-1">普通字符 <a class="header-anchor" href="#普通字符" aria-label="Permalink to &quot;普通字符&quot;">​</a></h3><p>普通字符包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><p>语法示例如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配 [...] 中的所有字符，例如 [aeiou] 匹配字符串 &quot;google runoob taobao&quot; 中所有的 e o u a 字母。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配除了 [...] 中字符的所有字符，例如 [^aeiou] 匹配字符串 &quot;google runoob taobao&quot; 中除了 e o u a 字母的所有字符。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[A-Z] 表示一个区间，匹配所有大写字母。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[a-z] 匹配所有小写字母。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// . 匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\r]。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[\\s\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\w </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配字母、数字、下划线。等价于 [A-Za-z0-9_]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\d </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配任意一个阿拉伯数字（0 到 9）。等价于 [0-9]</span></span></code></pre></div><h3 id="非打印字符" tabindex="-1">非打印字符 <a class="header-anchor" href="#非打印字符" aria-label="Permalink to &quot;非打印字符&quot;">​</a></h3><p>非打印字符也可以是正则表达式的组成部分。下表列出了部分非打印字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\f  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配一个换页符。等价于 \\x0c 和 \\cL。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\n	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配一个换行符。等价于 \\x0a 和 \\cJ。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\r	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配一个回车符。等价于 \\x0d 和 \\cM。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\s	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\t	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配一个制表符。等价于 \\x09 和 \\cI。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\v	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</span></span></code></pre></div><h3 id="特殊字符" tabindex="-1">特殊字符 <a class="header-anchor" href="#特殊字符" aria-label="Permalink to &quot;特殊字符&quot;">​</a></h3><p>特殊字符，就是一些有特殊含义的字符。例如上面示例中的<code>[ ] * . \\ </code>等。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配输入字符串的结尾位置。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( )	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和 \\)。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 \\. 。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//标记一个中括号表达式的开始。要匹配 [，请使用 \\[。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， &#39;n&#39; 匹配字符 &#39;n&#39;。&#39;\\n&#39; 匹配换行符。序列 &#39;\\\\&#39; 匹配 &quot;\\&quot;，而 &#39;\\(&#39; 则匹配 &quot;(&quot;。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \\^。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//标记限定符表达式的开始。要匹配 {，请使用 \\{。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指明两项之间的一个选择。要匹配 |，请使用 \\|。</span></span></code></pre></div><h3 id="限定符" tabindex="-1">限定符 <a class="header-anchor" href="#限定符" aria-label="Permalink to &quot;限定符&quot;">​</a></h3><p>限定符用来指定正则表达式的一个字符或表达式。必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; &quot;zo&quot; 以及 &quot;zoo&quot;等。* 等价于 {0,}。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //匹配前面的子表达式一次或多次。例如，zo+ 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;等，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //匹配前面的子表达式零次或一次。例如，do(es)? 可以匹配 &quot;do&quot; 、 &quot;does&quot;、 &quot;doxy&quot; 中的 &quot;do&quot; 和 &quot;does&quot;。? 等价于 {0,1}。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{n}     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//n 是一个非负整数。匹配确定的 n 次。例如，o{2} 不能匹配 &quot;Bob&quot; 中的 o，但是能匹配 &quot;food&quot; 中的两个 o。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{n,}    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//n 是一个非负整数。至少匹配n 次。例如，o{2,} 不能匹配 &quot;Bob&quot; 中的 o，但能匹配 &quot;foooood&quot; 中的所有 o。o{1,} 等价于 o+。o{0,} 则等价于 o*。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{n,m}	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，o{1,3} 将匹配 &quot;fooooood&quot; 中的前三个 o。o{0,1} 等价于 o?。请注意在逗号和两个数之间不能有空格。</span></span></code></pre></div><h3 id="定位符" tabindex="-1">定位符 <a class="header-anchor" href="#定位符" aria-label="Permalink to &quot;定位符&quot;">​</a></h3><p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\\b 描述单词的前或后边界，\\B 表示非单词边界。</p><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\b	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匹配一个单词边界，即字与空格间的位置。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">B</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//非单词边界匹配。</span></span></code></pre></div><p>注意：</p><ul><li>不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。</li><li>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。</li><li>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。</li></ul><h3 id="标记符-修饰符" tabindex="-1">标记符(修饰符) <a class="header-anchor" href="#标记符-修饰符" aria-label="Permalink to &quot;标记符(修饰符)&quot;">​</a></h3><p>标记符不写在正则表达式里，标记符位于正则表达式之外，格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/pattern/flags</span></span></code></pre></div><p>常用标记符如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ignore - 不区分大小写	将匹配设置为不区分大小写，搜索时不区分大小写。例如 A 和 a 没有区别。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//global - 全局匹配	查找所有的匹配项。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//multiline - 多行匹配	使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//特殊字符圆点 . 中包含换行符 \\n	默认情况下的圆点 . 是匹配除换行符 \\n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \\n。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//具体用法如下</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Google runoob taobao runoob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">runoob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找第一次匹配项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">runoob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查找所有匹配项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">runoob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不区分大小写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">runoob</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多行匹配</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">runoob</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 s，匹配\\n</span></span></code></pre></div>`,28)]))}const g=i(t,[["render",l]]);export{o as __pageData,g as default};
