import{_ as i,c as a,o as e,ak as t}from"./chunks/framework.CmzJUe0_.js";const n="/assets/rocketmq20221017155251.1Ub1lY05.png",l="/assets/rocketmq20221017155201.Ccby4sqe.png",p="/assets/rocketmq20221017155432.pGIvVlOc.png",k="/assets/rocketmq20221017155510.BQn5IWEH.png",h="/assets/rocketmq20221017155608.Ba0rTTM6.png",r="/assets/rocketmq20221017155639.me0O6Ssl.png",o="/assets/rocketmq20221017155903.BxDA-zWv.png",c="/assets/rocketmq20221017155933.BghTv-Mb.png",d="/assets/rocketmq20221017160013.C0wOeWNj.jpg",F="/assets/rocketmq_20231207172654.BW4zBOrQ.png",g="/assets/rocketmq_20230810142457.C3tPKvX6.png",m="/assets/rocketmq_20231208191248.DlMoy83n.png",C="/assets/rocketmq_20231208191559.Dx6ZQvMz.png",y="/assets/rocketmq_20231208191852.DeV-TCGR.png",u="/assets/rocketmq_20231207211316.CzENhb-9.png",B="/assets/rocketmq20221017160514.BNsM6gJ8.png",Q=JSON.parse('{"title":"RocketMQ笔记1","description":"","frontmatter":{"title":"RocketMQ笔记1","date":"2023-12-07T00:00:00.000Z","sidebar":"auto","categories":["后端"],"tags":["RocketMQ"]},"headers":[],"relativePath":"blogs/RocketMQ/RocketMQ笔记1.md","filePath":"blogs/RocketMQ/RocketMQ笔记1.md"}'),b={name:"blogs/RocketMQ/RocketMQ笔记1.md"};function v(q,s,E,A,_,D){return e(),a("div",null,s[0]||(s[0]=[t('<p>[toc]</p><h1 id="rocketmq笔记1" tabindex="-1">RocketMQ笔记1 <a class="header-anchor" href="#rocketmq笔记1" aria-label="Permalink to &quot;RocketMQ笔记1&quot;">​</a></h1><p>RocketMQ 当前版本5.x</p><h2 id="消息队列的介绍" tabindex="-1">消息队列的介绍 <a class="header-anchor" href="#消息队列的介绍" aria-label="Permalink to &quot;消息队列的介绍&quot;">​</a></h2><blockquote><p>什么是消息队列？</p></blockquote><p>消息队列本质上是一种“先进先出”的队列数据结构。</p><p><img src="'+n+'" alt="rocketmq20221017155251"></p><blockquote><p>消息队列的使用场景</p></blockquote><p>① 应用解耦：在微服务系统中服务之间是互相调用的关系。这种情况下服务与服务之间太过耦合。如果使用消息队列可以对服务之间进行解耦。</p><p>不使用消息队列的情况 <img src="'+l+'" alt="rocketmq20221017155201"> 使用消息队列的情况 <img src="'+p+'" alt="rocketmq20221017155432"></p><p>② 流量削峰：当服务遇到高并发请求的时候，服务可能会被压垮。但是有了消息队列，就可以将大量请求缓存起来，后续慢慢处理，这样可以大大提到系统的稳定性和用户体验。</p><p>不使用消息队列的情况 <img src="'+k+'" alt="rocketmq20221017155510"> 使用消息队列的情况 <img src="'+h+'" alt="rocketmq20221017155608"></p><p>③ 数据分发：数据的产生方不需要关心谁来使用数据，只需要将数据发送到消息队列，数据使用方直接在消息队列中直接获取数据即可。</p><p>不使用消息队列的情况 <img src="'+r+'" alt="rocketmq20221017155639"> 使用消息队列的情况 <img src="'+o+'" alt="rocketmq20221017155903"></p><blockquote><p>消息队列的优缺点</p></blockquote><ul><li>优点：应用解耦、流量削峰、数据分发。</li><li>缺点：系统稳定性降低。一旦MQ宕机，就会对业务造成影响。</li><li>缺点：系统复杂度提高：MQ的加入增加了系统的复杂度。</li><li>缺点：如何保证消息一致性：通过MQ给多个系统发消息数据，如果有一个系统接收消息失败。那么如何解救？</li></ul><blockquote><p>各种消息队列产品的比较</p></blockquote><p>常见的MQ产品包括Kafka、ActiveMQ、RabbitMQ、RocketMQ。 <img src="'+c+'" alt="rocketmq20221017155933"></p><h2 id="rocketmq介绍" tabindex="-1">RocketMQ介绍 <a class="header-anchor" href="#rocketmq介绍" aria-label="Permalink to &quot;RocketMQ介绍&quot;">​</a></h2><p>RocketMQ是阿里巴巴2016开发的MQ中间件，使用Java语言开发，在阿里内部，RocketMQ承接了例如“双11”等高并发场景的消息流转，能够处理万亿级别的消息。</p><p>RocketMQ当前最新版本：5.x</p><p><a href="https://rocketmq.apache.org/zh/" target="_blank" rel="noreferrer">RocketMQ官网</a></p><h2 id="rocketmq的结构图" tabindex="-1">RocketMQ的结构图 <a class="header-anchor" href="#rocketmq的结构图" aria-label="Permalink to &quot;RocketMQ的结构图&quot;">​</a></h2><p><img src="'+d+'" alt="rocketmq20221017160013"><img src="'+F+'" alt="rocketmq_20231207172654.png"></p><h2 id="rocketmq的基本概念" tabindex="-1">RocketMQ的基本概念 <a class="header-anchor" href="#rocketmq的基本概念" aria-label="Permalink to &quot;RocketMQ的基本概念&quot;">​</a></h2><p>这些概念分为消息生产、消息管理、消息消费三部分。</p><p>消息生产</p><ul><li>Producer：消息的生产者，需要先从NameServer中与Broker建立连接，才能向Broker发送消息。</li><li>Producer Group (生产者组): 多个发送同一类消息的生产者。</li></ul><p>消息消费</p><ul><li>Consumer：消息的消费者，需要先从NameServer中与Broker建立连接，才能获取Broker中的消息。</li><li>Consumer Group (消费者组): 多个消费同一类消息的消费者。</li></ul><p>消息管理</p><ul><li>Broker：RocketMQ的核心，负责接收，存储，传递消息等功能。</li><li>NameServer：RocketMQ的管理者，用于管理Broker中的消息数据，相当于注册中心。</li><li>Topic (主题)：用于区分Broker中不同类型的消息；发送和接收消息前，需要先创建Topic。</li><li>Message Queue (消息队列)：是消息的存储单元。一个Topic中可以设置多个Message Queue。</li><li>Message (消息)：即消息本身，主要存储在Message Queue中。</li></ul><h2 id="rocketmq的工作流程" tabindex="-1">RocketMQ的工作流程 <a class="header-anchor" href="#rocketmq的工作流程" aria-label="Permalink to &quot;RocketMQ的工作流程&quot;">​</a></h2><ol><li>首先启动NameServer,它相当于RocketMQ的注册中心。</li><li>然后启动Broker，启动后Broker会向NameServer发送自己的ip地址和路由。注册到NameServer中。</li><li>当生产者发送消息的时候，Producer会先从NameServer获取Broker的信息，然后将消息发送给某个Broker。</li><li>当接收消息的时候，Consumer会先从NameServer获取Broker的信息，然后从Broker哪里接收消息。</li></ol><h2 id="rocketmq的安装" tabindex="-1">RocketMQ的安装 <a class="header-anchor" href="#rocketmq的安装" aria-label="Permalink to &quot;RocketMQ的安装&quot;">​</a></h2><p>RocketMQ运行需要依赖两个服务。一个是NameServer服务，另一个是Broker服务。当这个两个服务都运行之后，RocketMQ搭建完成了。</p><p>如果需要RocketMQ的图形控制界面，那么额外需要运行rocketmq-console服务。</p><h3 id="windows环境下的安装与启动" tabindex="-1">windows环境下的安装与启动 <a class="header-anchor" href="#windows环境下的安装与启动" aria-label="Permalink to &quot;windows环境下的安装与启动&quot;">​</a></h3><p>① 先下载已经编译好的RocketMq二进制包。</p><p><a href="https://rocketmq.apache.org/zh/download" target="_blank" rel="noreferrer">RocketMq的下载地址</a></p><p><img src="'+g+'" alt="rocketmq_20230810142457.png"></p><ul><li>二进制包中有windows和linux两个环境的各种执行文件。</li><li>bin目录中主要存放windows和linux两个环境的各种脚本文件。</li><li>conf目录存放配置文件,包括broker配置文件、logback配置文件等</li><li>lib目录存放各种依赖jar包，包括Netty、commons-lang、FastJSON等</li></ul><p>② 将下载的二进制包存放在一个目录中。</p><p>③ 创建ROCKETMQ_HOME环境变量。</p><p><img src="'+m+'" alt="rocketmq_20231208191248.png"></p><p>④ 进入到bin目录中,打开CMD终端。先启动NameServer服务</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mqnamesrv.cmd</span></span></code></pre></div><p>NameServer服务运行成功的窗口。注意：不能关闭这个窗口。 <img src="'+C+`" alt="rocketmq_20231208191559.png"></p><p>⑤ 再启动Broker服务</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Broker服务需要指定NameServer服务的ip地址。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mqbroker.cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 127.0.0.1:9876</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> autoCreateTopicEnable=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>Broker服务运行成功的窗口。注意：不能关闭这个窗口。 <img src="`+y+`" alt="rocketmq_20231208191852.png"></p><p>⑥ 如何运行RocketMQ的图形控制界面服务，继续看下文即可。</p><h3 id="linux环境下的安装与启动" tabindex="-1">linux环境下的安装与启动 <a class="header-anchor" href="#linux环境下的安装与启动" aria-label="Permalink to &quot;linux环境下的安装与启动&quot;">​</a></h3><p>① 下载RocketMq二进制包。</p><p>② 创建一个目录，用来存放下载的二进制包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 解压二进制压缩包到指定目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rocketmq-all-5.1.3-bin-release.zip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq</span></span></code></pre></div><p>③ 修改配置文件</p><p>由于RocketMQ启动需要的内存较大，因此需要先在配置文件中修改JVM内存大小。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编辑runbroker.sh和runserver.sh修改默认JVM内存大小</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># runserver.sh配置文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runserver.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JAVA_OPT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JAVA_OPT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -server -Xms256m -Xmx256m -Xmn128m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># runbroker.sh配置文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runbroker.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JAVA_OPT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">JAVA_OPT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} -server -Xms256m -Xmx256m -Xmn128m&quot;</span></span></code></pre></div><p>④ 启动RocketMQ</p><p>在RocketMQ的安装目录下进行操作。</p><ol><li>先启动NameServer</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.启动NameServer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/mqnamesrv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.查看启动日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/logs/rocketmqlogs/namesrv.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在namesrv.log文件中看到\`The Name Server boot success..\`，表示NameServer 已成功启动。</span></span></code></pre></div><p>NameServer默认占用的端口就是9876</p><ol start="2"><li>再启动Broker,需要指定NameServer的地址</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.启动Broker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/mqbroker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> localhost:9876</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.查看启动日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tail</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/logs/rocketmqlogs/proxy.log</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在 proxy.log 中看到“The broker[brokerName,ip:port] boot success..”，这表明 broker 已成功启动。。</span></span></code></pre></div><p>⑤ 关闭RocketMQ</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.先关闭Broker</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/mqshutdown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broker</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.再关闭NameServer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin/mqshutdown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> namesrv</span></span></code></pre></div><h3 id="rocketmq控制台安装" tabindex="-1">RocketMQ控制台安装 <a class="header-anchor" href="#rocketmq控制台安装" aria-label="Permalink to &quot;RocketMQ控制台安装&quot;">​</a></h3><p>RocketMQ有一个管理控制台项目rocketmq-console，我们需要先将该项目下载到本地，对其编译打包为jar包，然后执行jar包即可。</p><p>① 下载RocketMQ控制台,并解压。</p><p>下载地址<code>https://github.com/apache/rocketmq-externals/tags</code></p><p><img src="`+u+`" alt="rocketmq_20231207211316.png"></p><p>② 修改application.properties配置文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 项目启动端口</span></span>
<span class="line"><span>server.port=8888</span></span>
<span class="line"><span># 配置NameServer地址，注意防火墙要开启9876端口</span></span>
<span class="line"><span>rocketmq.config.namesrvAddr=localhost:9876</span></span></code></pre></div><p>③ 将项目打包为jar包，并启动</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入项目目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rocketmq-console</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macen编译打包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mvn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Dmaven.test.skip=true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行jar包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rocketmq-console-ng-1.0.0.jar</span></span></code></pre></div><p>④ 访问控制台</p><p>通过浏览器访问<code>http://localhost:8888</code>进入控制台界面了，如下图所示。</p><p><img src="`+B+`" alt="rocketmq20221017160514.png"></p><h3 id="docker环境下的安装与启动" tabindex="-1">docker环境下的安装与启动 <a class="header-anchor" href="#docker环境下的安装与启动" aria-label="Permalink to &quot;docker环境下的安装与启动&quot;">​</a></h3><p>RocketMQ单机部署在docker中，一般需要部署3个容器。第一个容器是NameServer容器，第二个容器是Broker容器，第三个是控制台容器。</p><h4 id="部署rocketmq的nameserver容器" tabindex="-1">部署RocketMQ的NameServer容器 <a class="header-anchor" href="#部署rocketmq的nameserver容器" aria-label="Permalink to &quot;部署RocketMQ的NameServer容器&quot;">​</a></h4><p>① 下载RocketMQ官方镜像</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache/rocketmq:5.1.0</span></span></code></pre></div><p>② 创建NameServer容器映射目录</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这是linux系统上创建目录的命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果是windows系统，请自行创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq/nameserver/logs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq/nameserver/store</span></span></code></pre></div><p>③ 创建并启动NameServer容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged=true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_rocketmq_nameserver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9876:9876</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/rocketmq/nameserver/logs:/home/rocketmq/logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/rocketmq/nameserver/store:/root/store</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MAX_HEAP_SIZE=256M&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HEAP_NEWSIZE=128M&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MAX_POSSIBLE_HEAP=100000000&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache/rocketmq:5.1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mqnamesrv</span></span></code></pre></div><p>/d/DockerVolumes/rocketmq/.. 这是我windows环境上创建的容器映射目录。如果宿主机是linux环境，请自行更改。</p><h4 id="部署rocketmq的broker容器" tabindex="-1">部署RocketMQ的Broker容器 <a class="header-anchor" href="#部署rocketmq的broker容器" aria-label="Permalink to &quot;部署RocketMQ的Broker容器&quot;">​</a></h4><p>① 下载RocketMQ官方镜像</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache/rocketmq:5.1.0</span></span></code></pre></div><p>② 创建Broker容器映射目录</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这是linux系统上创建目录的命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果是windows系统，请自行创建</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq/broker/logs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq/broker/data</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq/broker/store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 777</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/rocketmq/broker/conf</span></span></code></pre></div><p>③ 创建并修改broker.conf</p><p>在/usr/local/rocketmq/broker/conf中创建并配置broker.conf</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># nameServer的IP地址。多个地址可以用;隔开</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 例：172.17.0.2:6666;172.17.0.2:8888 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">namesrvAddr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 172.17.0.2:9876</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 集群名称，单机配置可以随意填写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brokerClusterName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DefaultCluster</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 节点名称，单机配置可以随意填写</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brokerName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broker-a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># broker id节点ID， 0 表示 master, 其他的正整数表示 slave，不能小于0 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brokerId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Broker服务地址。内部使用填内网ip，如果是需要给外部使用填公网ip</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 172.17.0.3是 broker容器ip。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brokerIP1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 172.17.0.3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Broker角色</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brokerRole</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ASYNC_MASTER</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 刷盘方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flushDiskType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ASYNC_FLUSH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在每天的什么时间删除已经超过文件保留时间的 commit log，默认值04</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteWhen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 04</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 以小时计算的文件保留时间 默认值72小时</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileReservedTime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 72</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否允许Broker 自动创建Topic，建议线下开启，线上关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">autoCreateTopicEnable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否允许Broker自动创建订阅组，建议线下开启，线上关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">autoCreateSubscriptionGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span></code></pre></div><p>注意</p><ul><li>namesrvAddr：是填NameServer容器的IP地址。不要填localhost:9876，这是指向自己容器的IP地址。</li><li>brokerIP1：一般broker容器是提供给NameServer容器和dashboard容器使用的，要填broker容器的外网IP，不是填localhost。</li><li>可以在容器的Inspect信息上查询容器自身的外网IP是多少。</li></ul><p>④ 创建并启动Broker容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --privileged=true</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_rocketmq_broker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10911:10911</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10909:10909</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/rocketmq/broker/logs:/root/logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/rocketmq/broker/store:/root/store</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /d/DockerVolumes/rocketmq/broker/conf/broker.conf:/home/rocketmq/broker.conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MAX_HEAP_SIZE=512M&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HEAP_NEWSIZE=256M&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MAX_POSSIBLE_HEAP=200000000&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apache/rocketmq:5.1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mqbroker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/rocketmq/broker.conf</span></span></code></pre></div><p>/d/DockerVolumes/rocketmq/.. 这是我windows环境上创建的容器映射目录。如果宿主机是linux环境，请自行更改。</p><h4 id="部署rocketmq控制台容器" tabindex="-1">部署RocketMQ控制台容器 <a class="header-anchor" href="#部署rocketmq控制台容器" aria-label="Permalink to &quot;部署RocketMQ控制台容器&quot;">​</a></h4><p>① 下载控制台镜像</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apacherocketmq/rocketmq-dashboard:latest</span></span></code></pre></div><p>② 创建并启动控制台容器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_rocketmq_dashboard</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9888:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=172.17.0.2:9876&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apacherocketmq/rocketmq-dashboard</span></span></code></pre></div><p><code>namesrv.addr=172.17.0.2:9876</code>这是指向NameServer容器的IP地址。不要填localhost:9876，这是指向自己容器的IP地址。</p>`,109)]))}const R=i(b,[["render",v]]);export{Q as __pageData,R as default};
