import{_ as s,c as i,o as t,ak as d}from"./chunks/framework.CmzJUe0_.js";const _=JSON.parse('{"title":"Redisson笔记1","description":"","frontmatter":{"title":"Redisson笔记1","date":"2023-12-24T00:00:00.000Z","sidebar":"auto","categories":["数据库"],"tags":["Redis"]},"headers":[],"relativePath":"blogs/Redis/Redisson笔记1.md","filePath":"blogs/Redis/Redisson笔记1.md"}'),a={name:"blogs/Redis/Redisson笔记1.md"};function o(r,e,n,l,p,c){return t(),i("div",null,e[0]||(e[0]=[d('<p>[toc]</p><h1 id="redisson笔记1" tabindex="-1">Redisson笔记1 <a class="header-anchor" href="#redisson笔记1" aria-label="Permalink to &quot;Redisson笔记1&quot;">​</a></h1><p>Redisson是操作Redis数据库的Java客户端工具。</p><h2 id="jedis、lettuce、redistemplate、redission的区别" tabindex="-1">Jedis、Lettuce、RedisTemplate、Redission的区别？ <a class="header-anchor" href="#jedis、lettuce、redistemplate、redission的区别" aria-label="Permalink to &quot;Jedis、Lettuce、RedisTemplate、Redission的区别？&quot;">​</a></h2><ul><li><p>Jedis是老牌的redis客户端，采用同步阻塞式IO，采用线程池时是线程安全的。优点是简单、灵活、api全面。缺点是某些redis高级功能需要自己封装。</p></li><li><p>Lettuce是新的redis客户端，基于netty采用异步非阻塞式IO，是线程安全的。优点是提供了很多redis高级功能，例如集群、哨兵、管道等。缺点是api抽象，学习成本高。</p></li><li><p>RedisTemplate是spring操作redis的封装工具类。比如说springBoot1.x时，具体实现是jedis；而到了springBoot2.x时，具体实现变成了lettuce。RedisTemplate的好处就是基于springBoot自动装配的原理，使得spring整合redis时比较简单。</p></li><li><p>Redission是操作redis的分布式客户端，同样基于netty采用异步非阻塞式IO，是线程安全的，优点是提供了很多redis的分布式操作和高级功能，缺点是api抽象，学习成本高。</p></li></ul><p>总结：Redission相比其他redis客户端，能够提供更高级的redis功能操作。</p>',6)]))}const u=s(a,[["render",o]]);export{_ as __pageData,u as default};
