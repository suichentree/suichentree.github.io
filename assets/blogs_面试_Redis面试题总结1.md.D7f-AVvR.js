import{_ as a,c as i,o as e,ak as n}from"./chunks/framework.CmzJUe0_.js";const p="/assets/redis_20231109182209.DEH36vDJ.png",l="/assets/redis_20231213160702.7ypLwe9p.png",t="/assets/redis_20231213160508.4B0IVpnp.png",h="/assets/redis_20231213155813.iJxyWAB6.png",g=JSON.parse('{"title":"Redis面试题总结1","description":"","frontmatter":{"title":"Redis面试题总结1","date":"2023-11-07T00:00:00.000Z","sidebar":"auto","categories":["面试"],"tags":["Redis"]},"headers":[],"relativePath":"blogs/面试/Redis面试题总结1.md","filePath":"blogs/面试/Redis面试题总结1.md"}'),d={name:"blogs/面试/Redis面试题总结1.md"};function k(r,s,o,c,E,y){return e(),i("div",null,s[0]||(s[0]=[n(`<p>[toc]</p><h1 id="redis面试题总结1" tabindex="-1">Redis面试题总结1 <a class="header-anchor" href="#redis面试题总结1" aria-label="Permalink to &quot;Redis面试题总结1&quot;">​</a></h1><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h3 id="什么是redis-为什么要用redis" tabindex="-1">什么是Redis？为什么要用redis? <a class="header-anchor" href="#什么是redis-为什么要用redis" aria-label="Permalink to &quot;什么是Redis？为什么要用redis?&quot;">​</a></h3><p>Redis 是一个 Key-Value 类型的内存数据库。</p><blockquote><p>使用redis缓存的目的：高性能，高并发</p></blockquote><p>一般情况下，某个后端服务要进行查询数据请求的时候，通常是直接访问数据库。例如mysql数据库。而mysql数据库的数据都是存储在磁盘中的。</p><p>如果对磁盘进行访问的话，由于磁盘本身的限制，存取数据的速度只能达到毫秒级别，即每秒2000并发请求左右。因此当你的并发请求超过2000的时候，只使用mysql数据库的话，应用的访问速度就会变慢。</p><p>这是你可以把redis数据库放到后端服务和mysql数据库中间，让后端服务访问redis数据库，如果能再redis中找到想要的数据，就直接返回结果。如果找不到再访问mysql数据库。而redis数据库由于数据是存储再缓存上的，因此访问速度能达到微妙级别。即每秒并发8万左右。</p><p>这样就出现一个新的问题，redis数据库如何存储mysql数据库中的数据。</p><h3 id="redis-与其他-key-value-存储有什么不同" tabindex="-1">Redis 与其他 key-value 存储有什么不同？ <a class="header-anchor" href="#redis-与其他-key-value-存储有什么不同" aria-label="Permalink to &quot;Redis 与其他 key-value 存储有什么不同？&quot;">​</a></h3><ul><li>Redis 提供更为复杂的数据结构。</li><li>Redis 的缓存数据是运行在内存中。</li><li>Redis 的数据还可以持久化到磁盘中。</li></ul><h3 id="redis的数据类型及其使用场景" tabindex="-1">Redis的数据类型及其使用场景 <a class="header-anchor" href="#redis的数据类型及其使用场景" aria-label="Permalink to &quot;Redis的数据类型及其使用场景&quot;">​</a></h3><p>String、List、Set、ZSet、hash</p><blockquote><p>String类型</p></blockquote><p>字符串是Redis中最基本的数据类型，它能够存储任何类型的字符串，包含二进制数据。</p><p>一个字符串允许存储的最大容量为512MB。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>常用命令</span></span>
<span class="line"><span>1. SET 赋值，用法： SET key value</span></span>
<span class="line"><span>2. GET 取值，用法： GET key</span></span>
<span class="line"><span>3. INCR 递增数字，仅仅对数字类型的键有用，相当于Java的i++运算，用法： INCR key</span></span>
<span class="line"><span>4. INCRBY 增加指定的数字，仅仅对数字类型的键有用，相当于Java的i+=3，用法： INCRBY key increment ，意思是key自增increment，increment可以为负数，表示减</span></span>
<span class="line"><span>少。</span></span>
<span class="line"><span>5. DECR 递减数字，仅仅对数字类型的键有用，相当于Java的i–，用法： DECR key</span></span>
<span class="line"><span>6. DECRBY 减少指定的数字，仅仅对数字类型的键有用，相当于Java的i-=3，用法： DECRBY key decrement ，意思是key自减decrement，decrement可以为正数，表示增</span></span>
<span class="line"><span>加。</span></span>
<span class="line"><span>7. INCRBYFLOAT 增加指定浮点数，仅仅对数字类型的键有用，用法： INCRBYFLOAT key increment</span></span>
<span class="line"><span>8. APPEND 向尾部追加值，相当于Java中的”hello”.append(“ world”)，用法： APPEND key value</span></span>
<span class="line"><span>9. STRLEN 获取字符串长度，用法： STRLEN key</span></span>
<span class="line"><span>10. MSET 同时设置多个key的值，用法： MSET key1 value1 [key2 value2 ...]</span></span>
<span class="line"><span>11. MGET 同时获取多个key的值，用法： MGET key1 [key2 ...]</span></span></code></pre></div><blockquote><p>HASH 类型</p></blockquote><p>是一种键值对的结构，相当于Java中的HashMap。适合存放对象数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>常用命令</span></span>
<span class="line"><span>1. HSET 赋值，用法： HSET key field value</span></span>
<span class="line"><span>2. HMSET 一次赋值多个字段，用法： HMSET key field1 value1 [field2 values]</span></span>
<span class="line"><span>3. HGET 取值，用法： HSET key field</span></span>
<span class="line"><span>4. HMGET 一次取多个字段的值，用法： HMSET key field1 [field2]</span></span>
<span class="line"><span>5. HGETALL 一次取所有字段的值，用法： HGETALL key</span></span>
<span class="line"><span>6. HEXISTS 判断字段是否存在，用法： HEXISTS key field</span></span>
<span class="line"><span>7. HSETNX 当字段不存在时赋值，用法： HSETNX key field value</span></span>
<span class="line"><span>8. HINCRBY 增加数字，仅对数字类型的值有用，用法： HINCRBY key field increment</span></span>
<span class="line"><span>9. HDEL 删除字段，用法： HDEL key field</span></span>
<span class="line"><span>10. HKEYS 获取所有字段名，用法： HKEYS key</span></span>
<span class="line"><span>11. HVALS 获取所有字段值，用法： HVALS key</span></span>
<span class="line"><span>12. HLEN 获取字段数量，用法： HLEN key</span></span></code></pre></div><blockquote><p>List 类型</p></blockquote><p>用于存储有序的字符串列表。列表的底层是双向链表实现的。</p><p>列表主要用于存储有序字符串列表数据。例如文章评论列表，聊天记录等。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>常用命令</span></span>
<span class="line"><span>1. LPUSH 向列表左端添加元素，用法： LPUSH key value</span></span>
<span class="line"><span>2. RPUSH 向列表右端添加元素，用法： RPUSH key value</span></span>
<span class="line"><span>3. LPOP 从列表左端弹出元素，用法： LPOP key</span></span>
<span class="line"><span>4. RPOP 从列表右端弹出元素，用法： RPOP key</span></span>
<span class="line"><span>5. LLEN 获取列表中元素个数，用法： LLEN key</span></span>
<span class="line"><span>6. LRANGE 获取列表中某一片段的元素，用法： LRANGE key start stop ，index从0开始，-1表示最后一个元素</span></span>
<span class="line"><span>7. LREM 删除列表中指定的值，用法： LREM key count value ，删除列表中前count个值为value的元素，当count&gt;0时从左边开始数，count&lt;0时从右边开始数，count=0</span></span>
<span class="line"><span>时会删除所有值为value的元素</span></span>
<span class="line"><span>8. LINDEX 获取指定索引的元素值，用法： LINDEX key index</span></span>
<span class="line"><span>9. LSET 设置指定索引的元素值，用法： LSET key index value</span></span>
<span class="line"><span>10. LTRIM 只保留列表指定片段，用法： LTRIM key start stop ，包含start和stop</span></span>
<span class="line"><span>11. LINSERT 像列表中插入元素，用法： LINSERT key BEFORE|AFTER privot value ，从左边开始寻找值为privot的第一个元素，然后根据第二个参数是BEFORE还是AFTER</span></span>
<span class="line"><span>决定在该元素的前面还是后面插入value</span></span>
<span class="line"><span>12. RPOPLPUSH 将元素从一个列表转义到另一个列表，用法： RPOPLPUSH source destination</span></span></code></pre></div><blockquote><p>SET 类型</p></blockquote><p>无序集合，集合中每个元素都是不同的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>常用命令</span></span>
<span class="line"><span>1. SADD 添加元素，用法： SADD key value1 [value2 value3 ...]</span></span>
<span class="line"><span>2. SREM 删除元素，用法： SREM key value2 [value2 value3 ...]</span></span>
<span class="line"><span>3. SMEMBERS 获得集合中所有元素，用法： SMEMBERS key</span></span>
<span class="line"><span>4. SISMEMBER 判断元素是否在集合中，用法： SISMEMBER key value</span></span>
<span class="line"><span>5. SDIFF 对集合做差集运算，用法： SDIFF key1 key2 [key3 ...] ，先计算key1和key2的差集，然后再用结果与key3做差集</span></span>
<span class="line"><span>6. SINTER 对集合做交集运算，用法： SINTER key1 key2 [key3 ...]</span></span>
<span class="line"><span>7. SUNION 对集合做并集运算，用法： SUNION key1 key2 [key3 ...]</span></span>
<span class="line"><span>8. SCARD 获得集合中元素的个数，用法： SCARD key</span></span>
<span class="line"><span>9. SDIFFSTORE 对集合做差集并将结果存储，用法： SDIFFSTORE destination key1 key2 [key3 ...]</span></span>
<span class="line"><span>10. SINTERSTORE 对集合做交集运算并将结果存储，用法： SINTERSTORE destination key1 key2 [key3 ...]</span></span>
<span class="line"><span>11. SUNIONSTORE 对集合做并集运算并将结果存储，用法： SUNIONSTORE destination key1 key2 [key3 ...]</span></span>
<span class="line"><span>12. SRANDMEMBER 随机获取集合中的元素，用法： SRANDMEMBER key [count] ，当count&gt;0时，会随机中集合中获取count个不重复的元素，当count&lt;0时，随机中集合中</span></span>
<span class="line"><span>获取|count|和可能重复的元素。</span></span>
<span class="line"><span>13. SPOP 从集合中随机弹出一个元素，用法： SPOP key</span></span></code></pre></div><blockquote><p>ZSet 类型（Sort Set类型）</p></blockquote><p>有序集合，集合中每个元素都是不同的。</p><p>有序集合是在集合的基础上为每一个元素关联一个分数，这就让有序集合可以有获取分数最高/最低的前N个元素的功能。</p><p>有序集合例的使用场景。如各个药店的每日销售额数据，形成一个排行榜。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>常用命令</span></span>
<span class="line"><span>1. ZADD 添加元素，用法： ZADD key score1 value1 [score2 value2 score3 value3 ...]</span></span>
<span class="line"><span>2. ZSCORE 获取元素的分数，用法： ZSCORE key value</span></span>
<span class="line"><span>3. ZRANGE 获取排名在某个范围的元素，用法： ZRANGE key start stop [WITHSCORE] ，按照元素从小到大的顺序排序，从0开始编号，包含start和stop对应的元素，</span></span>
<span class="line"><span>WITHSCORE选项表示是否返回元素分数</span></span>
<span class="line"><span>4. ZREVRANGE 获取排名在某个范围的元素，用法： ZREVRANGE key start stop [WITHSCORE] ，和上一个命令用法一样，只是这个倒序排序的。</span></span>
<span class="line"><span>5. ZRANGEBYSCORE 获取指定分数范围内的元素，用法： ZRANGEBYSCORE key min max ，包含min和max， (min 表示不包含min， (max 表示不包含max， +inf 表示无穷</span></span>
<span class="line"><span>大</span></span>
<span class="line"><span>6. ZINCRBY 增加某个元素的分数，用法： ZINCRBY key increment value</span></span>
<span class="line"><span>7. ZCARD 获取集合中元素的个数，用法： ZCARD key</span></span>
<span class="line"><span>8. ZCOUNT 获取指定分数范围内的元素个数，用法： ZCOUNT key min max ，min和max的用法和5中的一样</span></span>
<span class="line"><span>9. ZREM 删除一个或多个元素，用法： ZREM key value1 [value2 ...]</span></span>
<span class="line"><span>10. ZREMRANGEBYRANK 按照排名范围删除元素，用法： ZREMRANGEBYRANK key start stop</span></span>
<span class="line"><span>11. ZREMRANGEBYSCORE 按照分数范围删除元素，用法： ZREMRANGEBYSCORE key min max ，min和max的用法和4中的一样</span></span>
<span class="line"><span>12. ZRANK 获取正序排序的元素的排名，用法： ZRANK key value</span></span>
<span class="line"><span>13. ZREVRANK 获取逆序排序的元素的排名，用法： ZREVRANK key value</span></span>
<span class="line"><span>14. ZINTERSTORE 计算有序集合的交集并存储结果，用法： ZINTERSTORE destination numbers key1 key2 [key3 key4 ...] WEIGHTS weight1 weight2 [weight3</span></span>
<span class="line"><span>weight4 ...] AGGREGATE SUM | MIN | MAX ，numbers表示参加运算的集合个数，weight表示权重，aggregate表示结果取值</span></span>
<span class="line"><span>15. ZUNIONSTORE 计算有序几个的并集并存储结果，用法和14一样，不再赘述。</span></span></code></pre></div><h3 id="redis-的持久化机制是什么-各自的优缺点" tabindex="-1">Redis 的持久化机制是什么？各自的优缺点？ <a class="header-anchor" href="#redis-的持久化机制是什么-各自的优缺点" aria-label="Permalink to &quot;Redis 的持久化机制是什么？各自的优缺点？&quot;">​</a></h3><p>Redis是一个支持持久化的内存数据库，通过持久化机制把内存中的数据同步到硬盘文件来保证数据持久化。当Redis重启后通过把硬盘文件重新加载到内存，就能达到恢复数据的目的。</p><p>Redis提供两种持久化机制 RDB 和 AOF 机制。</p><blockquote><p>RDB（redis database）持久化方式,默认的持久化方式</p></blockquote><p>在某个时间点把redis内存的数据以快照的形式保存到硬盘的二进制文件dump.rdb。当redis重启后，通过把dump.rdb文件重新加载到内存，就能达到恢复数据的目的。</p><p>优点：</p><ol><li>只有一个文件 dump.rdb，方便持久化。</li><li>使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis的高性能。</li><li>当redis数据量不大的情况下，RDB持久化的效率比AOF高</li></ol><p>缺点：</p><ol><li>RDB持久化机制由于是间隔一段时间进行持久化。因此当redis发生故障的时候，redis可能有一部分数据没有进行持久化，因此会发生数据丢失。</li></ol><blockquote><p>AOF（Append-only file）持久化方式</p></blockquote><p>AOF持久化机制是以日志的形式，记录Redis的每次写命令。其默认存储文件为appendonly.aof。当Redis重启时，会把appendonly.aof文件中记录的所有写操作顺序执行一遍，确保数据恢复到最新。</p><p>优点：</p><ol><li>数据安全，由于指将redis每次的写命令都记录到aof日志中，因此当redis故障的时候，也能够保证数据不会丢失。</li><li>通过 append 模式写aof文件，即使中途服务器宕机，可以通过aof工具解决数据一致性问题。</li></ol><p>缺点：</p><ol><li>AOF 文件比 RDB 文件大，且恢复速度慢。</li><li>当redis的数据量大的时候，aof比 rdb 效率低。</li></ol><blockquote><p>RDB+AOF 混合的持久化方式</p></blockquote><p>RDB的方式会导致数据丢失，AOF的方式性能较差。因此在高并发的场景下，推荐使用RDB和AOF混合的情况下进行redis的持久化。</p><ul><li>混合持久化是在 AOF 持久化的基础上，定期进行 RDB 持久化，以保证数据的快速恢复。</li><li>混合持久化的实现方式是在 AOF 重写时，将 RDB 文件以二进制压缩格式写入到 AOF 文件的开头，之后的数据再以 AOF 格式追加到文件的末尾。</li><li>混合持久化的优点是： <ul><li>可以减少 AOF 文件的大小，节省磁盘空间</li><li>可以加快数据恢复的速度，避免执行大量的 AOF 命令</li><li>可以避免数据丢失，因为 RDB 文件和 AOF 文件都有最新的数据快照。</li></ul></li></ul><h3 id="redis的过期策略" tabindex="-1">Redis的过期策略 <a class="header-anchor" href="#redis的过期策略" aria-label="Permalink to &quot;Redis的过期策略&quot;">​</a></h3><blockquote><p>为什么会有过期策略</p></blockquote><p>redis中存储的数据都有一个过期时间。当过期时间一到，那么redis就会将该数据从数据库中删除。</p><p>由于redis是单线程，删除数据也是会占用线程的处理时间。为了保证redis的高性能，因此必须要有一个过期策略，来决定如何删除过期数据，从而保证redis的高性能。</p><blockquote><p>redis的过期策略</p></blockquote><p>redis的过期策略采用的是定期删除+惰性删除</p><p>① 定期删除的机制</p><p>redis会把每个设置了过期时间的key，都会记录到过期字典中。</p><ol><li>每隔10s，redis会从过期字典中随机选择20个key。</li><li>删除20个key中过期的key。</li><li>如果过期key的比例超过1/4，则重复步骤1.</li></ol><p>定时删除的机制存在一个问题，就是当大量的key同一时间都过期了。那么会导致redis不断的从过期字典选择并删除key，从而导致redis的卡顿。</p><p>解决办法就是不要给大量的key都设置同一个过期时间，过期时间要设置一个随机范围。</p><p>② 惰性删除的机制</p><p>当用户读取这个key的时候，redis会对这个key的过期时间进行检查，如果过期了，就立即删除，不会返回任何数据。</p><h3 id="redis的数据淘汰策略是什么" tabindex="-1">redis的数据淘汰策略是什么？ <a class="header-anchor" href="#redis的数据淘汰策略是什么" aria-label="Permalink to &quot;redis的数据淘汰策略是什么？&quot;">​</a></h3><p>Redis的所有数据都存储在内存中，但是内存是一种有限的资源，所以为了防止Redis无限制的使用内存，在Redis中可以通过配置项 maxmemory 来指定其最大能使用的内存容量。</p><p>例如可以通过以下配置来设置Redis最大能使用 1G 内存</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>maxmemory 1G</span></span></code></pre></div><p>当Redis使用的内存超过配置的 maxmemory 时，便会触发数据淘汰策略。</p><blockquote><p>如何配置数据淘汰策略？</p></blockquote><p>在Redis配置文件中通过配置项 maxmemory_policy 来指定要使用的数据淘汰策略。</p><p>例如要使用 volatile-lru 策略可以通过以下配置来指定。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>maxmemory_policy volatile-lru</span></span></code></pre></div><h3 id="redis提供了多种数据淘汰的策略" tabindex="-1">Redis提供了多种数据淘汰的策略 <a class="header-anchor" href="#redis提供了多种数据淘汰的策略" aria-label="Permalink to &quot;Redis提供了多种数据淘汰的策略&quot;">​</a></h3><p>edis提供了8种数据淘汰的策略。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>noeviction      -&gt; 默认的数据淘汰策略.不做任何的清理工作，直接在写操作时返回错误。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>volatile-lru    -&gt; 从过期时间key中，根据LRU算法删除最久没有使用的key。</span></span>
<span class="line"><span>volatile-random -&gt; 从过期时间key中，随机删除key。</span></span>
<span class="line"><span>volatile-lfu    -&gt; 从过期时间key中，删除某段时间之内使用频率最少的key。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>allkeys-lru     -&gt; 从所有key中，根据LRU算法删除最久没有使用的key。</span></span>
<span class="line"><span>allkeys-&gt;random -&gt; 从所有key中，随机删除key。</span></span>
<span class="line"><span>allkeys-lfu     -&gt; 从所有key中，删除某段时间之内使用频率最少的key。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>volatile-ttl    -&gt; 从过期时间key中，删除过期时间最早的key。</span></span></code></pre></div><h3 id="什么是-lru算法" tabindex="-1">什么是 LRU算法？ <a class="header-anchor" href="#什么是-lru算法" aria-label="Permalink to &quot;什么是 LRU算法？&quot;">​</a></h3><blockquote><p>什么是LRU算法？</p></blockquote><p>LRU是 Least Recently Used 的缩写，即最近最少使用算法。很多缓存系统都使用此算法作为淘汰策略。</p><p>最简单的实现方式就是把所有缓存通过一个链表连接起来，新创建的缓存添加到链表的头部，如果有缓存被访问了，就把缓存移动到链表的头部。由于被访问的缓存会移动到链表的头部，所以没有被访问的缓存会随着时间的推移移动的链表的尾部，淘汰数据时只需要从链表的尾部开始即可。</p><p>下图展示了这个过程：</p><p><img src="`+p+`" alt="redis_20231109182209.png"></p><blockquote><p>redis的LRU算法是什么？</p></blockquote><p>redis并不是严格采用LRU算法来进行数据淘汰策略的。而是redis使用的是一种近似LRU算法，这个算法跟LRU算法部分相似。</p><p>redis的近似LRU算法，是给每个key额外添加一个小字段，这个字段用于记录key的最近使用时间。当redis发现内存超过maxmemory的时候，会执行一次近似LRU算法。</p><p>随机采样5个key，然后淘汰最旧使用的key，如果淘汰掉key后，内存还是超出了maxmemory。则继续随机淘汰，直到内存低于maxmemory为止。</p><h3 id="什么是缓存穿透" tabindex="-1">什么是缓存穿透 <a class="header-anchor" href="#什么是缓存穿透" aria-label="Permalink to &quot;什么是缓存穿透&quot;">​</a></h3><p>缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p><blockquote><p>缓存穿透的解决方案</p></blockquote><p>方案① 缓存空对象。对缓存和数据库都没有的数据。将其缓存为key-null。过期时间设置为30秒。这样第二次从缓存中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴。</p><p>方案② 布隆过滤器。</p><p>布隆过滤器：一个判断某个元素是否存在集合中的算法。</p><p>布隆过滤器的特点：将所有可能存在的数据哈希到一个足够大的 bitmap 集合中。如果某个元素一定不在集合中，那么算法则可以判断该元素不在集合中。如果某个元素在集合中，则通过算法则有很小的可能判断出不在集合中。即布隆过滤器有一个很小的误判率。</p><p>如果redis设置了布隆过滤器，通过布隆过滤器可以判断大量的恶意请求要查询的数据是否存在。如果不存在，直接回结果。从而避免了大量恶意请求直接攻击mysql数据库的情况发生。</p><h3 id="什么是布隆过滤器" tabindex="-1">什么是布隆过滤器 <a class="header-anchor" href="#什么是布隆过滤器" aria-label="Permalink to &quot;什么是布隆过滤器&quot;">​</a></h3><p>布隆过滤器其实就是一个足够大的 bitmap 集合。每当redis新增一个键值对，就会把键值对的key，经过多次Hash函数运算，得到一个特殊的key值，然后把这个key值保存再bitmap集合中。</p><p>当需要从redis中查询数据时，查询请求会先在布隆过滤器中查询，如果查询数据不在布隆过滤器中，那么该数据就肯定不在redis中。如果查询数据在布隆过滤器中，那么该数据大概存在redis中。</p><p>通过布隆过滤器，可以预先判断出redis中是否存储查询数据。如果有，那么就直接到redis中查询，如果没有，那么redis中也没有，也没有必要到mysql数据库中查询。从而避免了大量恶意请求直接攻击mysql数据库的情况发生。</p><h3 id="布隆过滤器的实现思想" tabindex="-1">布隆过滤器的实现思想 <a class="header-anchor" href="#布隆过滤器的实现思想" aria-label="Permalink to &quot;布隆过滤器的实现思想&quot;">​</a></h3><p>布隆过滤器的核心就是Bloom-Filter算法。</p><p>Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。</p><p>Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。</p><p>Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p><h3 id="什么是缓存击穿" tabindex="-1">什么是缓存击穿？ <a class="header-anchor" href="#什么是缓存击穿" aria-label="Permalink to &quot;什么是缓存击穿？&quot;">​</a></h3><p>缓存击穿是指某个热点数据，在缓存中过期。这时大量的请求同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力过大。</p><blockquote><p>缓存击穿的解决方案</p></blockquote><ol><li>设置热点数据永远不过期。</li><li>加互斥锁，互斥锁缓存预热。</li></ol><h3 id="什么是缓存雪崩" tabindex="-1">什么是缓存雪崩 <a class="header-anchor" href="#什么是缓存雪崩" aria-label="Permalink to &quot;什么是缓存雪崩&quot;">​</a></h3><p>在一般情况下，redis是用于缓存mysql数据库中的热点数据的。用于处理用户大量的高并发查询请求的，减轻mysql数据库的压力的。</p><p>但是当redis宕机了或者redis中的数据大规模过期后，会导致redis暂时失效。从而让高并发请求直接由mysql数据库来处理。</p><p>因此redis缓存雪崩的原因有两个：redis宕机或redis中的大量数据过期。</p><blockquote><p>解决缓存雪崩的方式</p></blockquote><p>方式1：对于redis宕机，我们可以提前搭建redis主从哨兵模式。即当主redis宕机后，从redis变成主redis来提供服务。</p><p>方式2：对于redis中的大量数据过期，我们在插入key的时候，就可以将key的过期时间加上一个随机范围,例如1s-60s。我们可以通过这种方式来防止redis中大量key同时失效。从而导致缓存雪崩。</p><blockquote><p>缓存雪崩的事前事中事后的解决方案如下。</p></blockquote><ul><li>事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。</li><li>事中：本地 ehcache 缓存 + hystrix 限流&amp;降级，避免 MySQL 被打死。</li><li>事后：redis持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</li></ul><h3 id="什么是缓存预热" tabindex="-1">什么是缓存预热？ <a class="header-anchor" href="#什么是缓存预热" aria-label="Permalink to &quot;什么是缓存预热？&quot;">​</a></h3><p>缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据。</p><p>解决思路：</p><ol><li>直接写个缓存刷新功能接口，上线时手工操作下；</li><li>数据量不大，可以在项目启动的时候自动进行加载；</li><li>定时刷新缓存。</li></ol><h3 id="什么是热点数据和冷数据" tabindex="-1">什么是热点数据和冷数据? <a class="header-anchor" href="#什么是热点数据和冷数据" aria-label="Permalink to &quot;什么是热点数据和冷数据?&quot;">​</a></h3><p>热点数据分为两种。</p><ul><li>修改频率不高，读取通常非常高的数据。例如商品详情，用户信息。</li><li>修改频率很高，读取通常非常高的数据。例如点赞数，收藏数，分享数等是非常典型的热点数据。但是又不断变化，此时就不得不将数据同步保存到Redis缓存，减少数据库压力</li></ul><p>冷数据是指：读取非常非常少的数据。</p><h3 id="什么是bigkey-它会造成什么不好的影响" tabindex="-1">什么是bigkey,它会造成什么不好的影响？ <a class="header-anchor" href="#什么是bigkey-它会造成什么不好的影响" aria-label="Permalink to &quot;什么是bigkey,它会造成什么不好的影响？&quot;">​</a></h3><p>bigkey是指key对于value所占用的内存空间比较大。例如一个字符型的value可以占用512M的字符串。一个列表类型的value存储了上万的元素等。</p><blockquote><p>bigkey的危害？</p></blockquote><p>由于redis是单线程的，如果reids经常读取bigkey的话，由于bigkey的value占用空间大。因此redis获取bigkey的时间就比较长，而频繁获取bigkey不光会导致redis阻塞也会导致网络阻塞。</p><blockquote><p>解决方法</p></blockquote><p>对bigkey进行拆分。</p><h2 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h2><h3 id="什么是redis事务" tabindex="-1">什么是Redis事务？ <a class="header-anchor" href="#什么是redis事务" aria-label="Permalink to &quot;什么是Redis事务？&quot;">​</a></h3><p>事务就是一组按照顺序执行的命令，这组命令要么全部被执行，要么全部都不执行。</p><p>Redis事务是通过MULTI、EXEC、DISCARD和WATCH 四个命令来实现的</p><h3 id="multi-exec命令的作用是什么" tabindex="-1">MULTI，EXEC命令的作用是什么 <a class="header-anchor" href="#multi-exec命令的作用是什么" aria-label="Permalink to &quot;MULTI，EXEC命令的作用是什么&quot;">​</a></h3><p>MULTI 命令用于开启一个事务。当用户执行 MULTI 命令的时候，用户可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，队列中的所有命令才会按照顺序执行。</p><p>MULTI命令代表了事务的开始，EXEC代表了事务的执行与结束。</p><h3 id="watch命令的作用是什么" tabindex="-1">WATCH命令的作用是什么？ <a class="header-anchor" href="#watch命令的作用是什么" aria-label="Permalink to &quot;WATCH命令的作用是什么？&quot;">​</a></h3><p>WATCH 命令是一个乐观锁，可以为 Redis 事务提供CAS行为。</p><p>WATCH 可以监控Redis一个或多个键，一旦其中有一个键被修改，之后的事务就不会执行，监控一直持续到EXEC命令。</p><p>UNWATCH命令可以取消WATCH对所有key的监控。</p><h3 id="discard命令的作用是什么" tabindex="-1">DISCARD命令的作用是什么？ <a class="header-anchor" href="#discard命令的作用是什么" aria-label="Permalink to &quot;DISCARD命令的作用是什么？&quot;">​</a></h3><p>调用DISCARD命令，可以清空事务队列，并放弃执行事务。并且客户端也会从事务状态中退出。</p><h3 id="redis事务的问题有哪些" tabindex="-1">Redis事务的问题有哪些？ <a class="header-anchor" href="#redis事务的问题有哪些" aria-label="Permalink to &quot;Redis事务的问题有哪些？&quot;">​</a></h3><p>如果multi和exec命令之间的事务命令存在语法上的错误，那么redis会发现这种错误，并将事务进行回滚。</p><p>但是如果事务命令之中存在运行逻辑上的错误，那么redis事务不会回滚，而是继续执行剩下的命令。</p><h3 id="redis事务支持隔离性吗" tabindex="-1">Redis事务支持隔离性吗？ <a class="header-anchor" href="#redis事务支持隔离性吗" aria-label="Permalink to &quot;Redis事务支持隔离性吗？&quot;">​</a></h3><p>Redis是单进程程序。因此 Redis的事务是总是带有隔离性的</p><h2 id="主从" tabindex="-1">主从 <a class="header-anchor" href="#主从" aria-label="Permalink to &quot;主从&quot;">​</a></h2><h3 id="如果保证redis高可用和高并发" tabindex="-1">如果保证redis高可用和高并发？ <a class="header-anchor" href="#如果保证redis高可用和高并发" aria-label="Permalink to &quot;如果保证redis高可用和高并发？&quot;">​</a></h3><p>可以使用redis主从架构或者哨兵架构来保证redis的高可用和高并发。</p><p>例如搭建redis的主从架构。主机负责写命令，从机负责读命令。主从之间进行数据备份。主从模式有个缺点，就是当主机挂掉之后，从机需要手动升级为主机。</p><p>或者搭建一个redis的哨兵架构。通过sentinel哨兵来监控主从redis。当主机挂掉之后，哨兵自动将从机升为主机。</p><h3 id="redis的主从数据同步机制是什么" tabindex="-1">Redis的主从数据同步机制是什么？ <a class="header-anchor" href="#redis的主从数据同步机制是什么" aria-label="Permalink to &quot;Redis的主从数据同步机制是什么？&quot;">​</a></h3><ol><li>主从第一次同步，主机会先生成RDB文件，并将RDB文件发送给从机。在生成RDB文件的过程中，主机执行的写操作命令会保存到缓存中。</li><li>从机接收到主机的RDB文件，从机开始执行RDB文件。当从机执行完毕之后，会通知主机将剩余的写操作命令，发送给从机。让从机执行写操作命令。</li><li>之后主从机，便会互相通信，主机不断发送写操作命令给从机。从机不断接收写操作命令，并执行。</li></ol><p>注意：主机的写操作命令并不是实时发送的，而是缓存中的写操作命令积累到一定大小之后，并开始向从机发送。</p><h2 id="集群" tabindex="-1">集群 <a class="header-anchor" href="#集群" aria-label="Permalink to &quot;集群&quot;">​</a></h2><h3 id="redis-集群如何选择数据库" tabindex="-1">Redis 集群如何选择数据库？ <a class="header-anchor" href="#redis-集群如何选择数据库" aria-label="Permalink to &quot;Redis 集群如何选择数据库？&quot;">​</a></h3><p>Redis 集群目前无法选择数据库，集群中的每个redis节点默认使用 0 号数据库。</p><h3 id="redis集群模式的工作流程是什么" tabindex="-1">Redis集群模式的工作流程是什么？ <a class="header-anchor" href="#redis集群模式的工作流程是什么" aria-label="Permalink to &quot;Redis集群模式的工作流程是什么？&quot;">​</a></h3><p>Redis 集群是采用hash槽的概念，通过将hash槽均匀的分配到每个节点上，每个节点都会记录哪些槽是自己的，哪些槽是其他节点的。</p><p>Redis集群最多有 16384 个哈希槽，集群的每个主节点会负责一部分哈希槽位。</p><p>工作流程：</p><ol><li>redis集群会先对新增key，进行hash/16384运算。判断这个key是属于那个哈希槽位的。</li><li>redis集群会把新增的key-value,发送到槽位对应的redis节点。</li><li>对应的redis节点，会接收新增的key-value。并保存到该节点中。</li></ol><h3 id="redis集群的数据分配机制" tabindex="-1">redis集群的数据分配机制 <a class="header-anchor" href="#redis集群的数据分配机制" aria-label="Permalink to &quot;redis集群的数据分配机制&quot;">​</a></h3><p>Redis 集群是采用hash槽的概念，通过将hash槽均匀分配到每个节点上，每个节点都会记录哪些槽是自己的，哪些槽是其他节点的。</p><p>当Redis查询或修改一个数据的时候，首先会查找这个数据对应的槽位是多少，然后查找槽位对应的节点，最后才操作这个数据。</p><p>通过Hash槽的机制来把数据均匀的分配到集群中的每一个节点上，从而做到了每一个节点的负载均衡，充分发挥了集群的威力。</p><h2 id="高级" tabindex="-1">高级 <a class="header-anchor" href="#高级" aria-label="Permalink to &quot;高级&quot;">​</a></h2><h3 id="如何保证缓存与数据库的数据一致性" tabindex="-1">如何保证缓存与数据库的数据一致性？ <a class="header-anchor" href="#如何保证缓存与数据库的数据一致性" aria-label="Permalink to &quot;如何保证缓存与数据库的数据一致性？&quot;">​</a></h3><blockquote><p>通过 Cache Aside 模式来保证缓存与数据库的数据一致性。</p></blockquote><ul><li>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</li><li>更新的时候，先更新数据库，然后再删除缓存。</li></ul><h3 id="redis-为什么是单线程的" tabindex="-1">Redis 为什么是单线程的？ <a class="header-anchor" href="#redis-为什么是单线程的" aria-label="Permalink to &quot;Redis 为什么是单线程的？&quot;">​</a></h3><p>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）Redis利用队列技术将并发访问变为串行访问</p><h3 id="单线程的redis为什么这么快" tabindex="-1">单线程的redis为什么这么快? <a class="header-anchor" href="#单线程的redis为什么这么快" aria-label="Permalink to &quot;单线程的redis为什么这么快?&quot;">​</a></h3><ol><li>纯内存操作</li><li>单线程模式，避免了频繁的线程状态切换，从而造成的CPU资源的浪费。</li><li>采用了非阻塞I/O多路复用机制</li></ol><h3 id="redis-常见性能问题和解决方案-即redis的优化方案" tabindex="-1">Redis 常见性能问题和解决方案(即Redis的优化方案) <a class="header-anchor" href="#redis-常见性能问题和解决方案-即redis的优化方案" aria-label="Permalink to &quot;Redis 常见性能问题和解决方案(即Redis的优化方案)&quot;">​</a></h3><ol><li>主机最好不要做任何持久化工作，包括RDB快照和AOF日志文件。当进行持久化的时候会对读写操作产生影响。</li><li>从机最好开启AOF持久化。策略为每秒同步一次。</li><li>为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网</li><li>主从结构不要用图状结构，用单向链表结构更为稳定。</li></ol><h3 id="什么是cache-aside-缓存更新机制" tabindex="-1">什么是Cache aside 缓存更新机制？ <a class="header-anchor" href="#什么是cache-aside-缓存更新机制" aria-label="Permalink to &quot;什么是Cache aside 缓存更新机制？&quot;">​</a></h3><p>Cache aside 缓存更新机制是用于保存数据库和缓存的数据一致性的机制。</p><p>Cache aside 缓存更新机制：</p><ol><li>当应用读取数据的时候，先从缓存中读取数据，若没有得到，则从数据库中读取数据，成功后，存放到缓存中。</li><li>当应用对数据进行更新的时候，先在数据库中对数据进行更新。更新成功后，将缓存中的对应数据进行删除。</li></ol><blockquote><p>Cache aside 缓存更新机制的问题</p></blockquote><p>当读取操作A比更新操作B先开始，若读取操作A比更新操作B完结束的时候。由于读取操作会将旧数据存储到缓存中，而数据库中存储的是新数据。这种情况下会缓存和数据库的数据会产生不一致。</p><p>但是由于读操作正常情况下，比写操作快。因此一般情况下，这个问题发生的概率很低。</p><blockquote><p>如何解决上述问题？</p></blockquote><p>通过延迟双删。即当写操作更新了数据库，并且删除了缓存之后，等待2-3s,再次删除缓存。这样就会保证旧数据不会出现在缓存中。</p><h3 id="什么是read-write-through机制" tabindex="-1">什么是Read/Write Through机制？ <a class="header-anchor" href="#什么是read-write-through机制" aria-label="Permalink to &quot;什么是Read/Write Through机制？&quot;">​</a></h3><p>尽管Cache aside 缓存更新机制和延迟双删的方法能够保证缓存和数据库的一致性。但是仍然有出现问题的可能。</p><p>Read/Write Through机制如下</p><ul><li>读取操作和缓存交互，直接读取缓存结果。</li><li>写入操作也和缓存交互，直接将写入结果存储到缓存中。</li><li>最后缓存本身与数据库进行数据同步。</li></ul><p>简而言之，在Read/Write Through机制中当缓存启动的时候，自身将从数据库中读取数据，并存入到缓存中。然后应用的读取写入操作都与缓存交互，缓存自身再与数据库进行数据同步。</p><p>Read/Write Through机制：应用读写数据操作-》缓存-》数据库</p><h3 id="为什么senx是redis实现分布式锁的方式" tabindex="-1">为什么senx是redis实现分布式锁的方式？ <a class="header-anchor" href="#为什么senx是redis实现分布式锁的方式" aria-label="Permalink to &quot;为什么senx是redis实现分布式锁的方式？&quot;">​</a></h3><p>由于微服务中一个应用服务，可以存在多个节点。例如每个用户服务节点都有注册功能。注册功能会涉及到对redis数据库的读写操作。当多个线程同时执行多个用户服务节点的注册功能的时候，那么就会涉及到redis的多进程下的多线程读写操作。此时redis就需要分布式锁，来保证多线程读写操作的线程安全性。</p><p>简而言之：当多个客户端同时对同一个redis服务端执行写操作命令时，为了保证redis服务端上的数据安全，需要采用分布式锁的方式，来保证redis的线程安全性。</p><p>setnx 是 SET if Not EXists(如果不存在则SET)的缩写。</p><p>setnx命令语法如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SETNX</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 如果redis中key没有存在，则插入key成功。并返回1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 如果redis中key已经存在，则插入key失败。并返回0</span></span></code></pre></div><p>当多个进程中的多个线程同时执行setnx命令的时候，由于setnx的特性，那么只有一个线程能插入key成功，表示该线程拿到了锁,其他线程没有拿到锁。redis是利用setnx的特性来实现分布式锁机制。</p><p>例如，3个线程A，B，C同时<code>setnx key1 value1</code>。由于setnx的特性，那么只有一个线程能够执行成功。其他线程执行失败并进入到阻塞等待状态。</p><p>当线程A执行<code>setnx key1 value1</code>成功后，线程A继续执行自己的业务逻辑。当线程A的业务逻辑执行完后，将<code>key1 value1</code>键值对删除。</p><blockquote><p>为什么将<code>key1 value1</code>键值对删除呢？</p></blockquote><p>这样做的目的是，如果不删除<code>key1 value1</code>键值对，那么其他线程BC则无法执行<code>setnx key1 value1</code>。也就是说线程BC无法拿到锁，从而线程BC无法执行自己的业务逻辑。</p><p>而线程A删除<code>key1 value1</code>键值对。相当于线程A释放了锁。</p><blockquote><p>SETNX 实现分布式锁的总结</p></blockquote><ol><li>当多个进程下的多线程同时执行<code>setnx key value</code>命令后，只有一个线程能执行成功，相当于拿到了锁。</li><li>然后拿到锁的线程，执行自己的业务逻辑。</li><li>当业务逻辑执行完后，线程将key删除。表示线程放弃了锁。从而让其他线程继续执行<code>setnx key value</code>命令，即其他线程继续争抢锁。</li></ol><p><img src="`+l+'" alt="redis_20231213160702.png"></p><h3 id="setnx实现分布式锁的缺点" tabindex="-1">setnx实现分布式锁的缺点？ <a class="header-anchor" href="#setnx实现分布式锁的缺点" aria-label="Permalink to &quot;setnx实现分布式锁的缺点？&quot;">​</a></h3><h4 id="缺点1-线程中断怎么办" tabindex="-1">缺点1 ：线程中断怎么办？ <a class="header-anchor" href="#缺点1-线程中断怎么办" aria-label="Permalink to &quot;缺点1 ：线程中断怎么办？&quot;">​</a></h4><p>由于setnx本质上就是插入键值对。</p><p>如果线程A <code>setnx key1 value1</code>成功后，然后执行自己业务逻辑的时候。线程A中断了。导致线程A没有把<code>key1</code>删除。从而导致其他线程无法<code>setnx key1 value1</code>，也就是说其他线程都拿不到锁了，从而无法执行自己的业务逻辑了。</p><p>因此当线程A<code>setnx key1 value1</code>的时候。必须给键值对加上过期时间。</p><p>过期时间可以确保线程中断的时候，线程没有删除键值对。也可以通过过期时间来让键值对失效。从而让其他线程可以执行<code>setnx key1 value1</code>。</p><h4 id="缺点2-线程执行时间超出键值对的过期时间怎么办" tabindex="-1">缺点2：线程执行时间超出键值对的过期时间怎么办？ <a class="header-anchor" href="#缺点2-线程执行时间超出键值对的过期时间怎么办" aria-label="Permalink to &quot;缺点2：线程执行时间超出键值对的过期时间怎么办？&quot;">​</a></h4><p>当线程A的执行时间超过了键值对的过期时间之后。那么会导致线程A还在执行业务逻辑的时候，键值对已经失效了。此时线程B<code>setnx key1 value1</code>了，即线程B获取了锁，然后线程B执行业务逻辑。</p><p>当线程A执行完业务逻辑后，把线程B设置的键值对<code>key1</code>删除了。这种情况就算线程A删除了线程B的锁。</p><p>解决方式：每个线程在删除键值对（释放锁）的时候，先检查一些这个锁是不是自己设置的。如果是自己设置的锁，那么就删除。不是自己设置的锁，就不进行删除即可。</p><p><img src="'+t+'" alt="redis_20231213160508.png"></p><blockquote><p>如何判断键值对（锁）是不是线程自己设置的？</p></blockquote><p>线程在<code>setnx key1 value1</code>的时候，key1是业务功能，value1是线程自己的ID。</p><p>当线程删除键值对的时候，判断<code>value1</code>是不是线程自己的ID即可。</p><p><img src="'+h+`" alt="redis_20231213155813.png"></p><h3 id="setnx实现分布式锁的代码实例" tabindex="-1">setnx实现分布式锁的代码实例 <a class="header-anchor" href="#setnx实现分布式锁的代码实例" aria-label="Permalink to &quot;setnx实现分布式锁的代码实例&quot;">​</a></h3><p>加锁代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String ID_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeoutSec) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 生成线程的唯一标示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   String threadId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ID_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 通过setnx获取锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Boolean success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringRedisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KEY_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name, threadId, timeoutSec, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Boolean.TRUE.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(success);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>释放锁代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取线程标示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String threadId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ID_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取当前锁中的标示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringRedisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KEY_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断标示是否一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(threadId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 一致就释放锁，即删除键值对</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 不一致，不操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringRedisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KEY_PREFIX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>业务代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">seckillVoucher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Long voucherId) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //执行业务逻辑前的操作</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //调用获取锁的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isLock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tryLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取锁失败</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isLock) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;获取锁失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取锁成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //执行具体的业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //释放锁</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,230)]))}const b=a(d,[["render",k]]);export{g as __pageData,b as default};
