import{_ as e,c as i,o as a,ak as t}from"./chunks/framework.CmzJUe0_.js";const E=JSON.parse('{"title":"Java面试题总结-JavaWeb","description":"","frontmatter":{"title":"Java面试题总结-JavaWeb","date":"2020-11-24T00:00:00.000Z","sidebar":"auto","categories":["面试"],"tags":["Java"]},"headers":[],"relativePath":"blogs/面试/Java面试题总结-JavaWeb.md","filePath":"blogs/面试/Java面试题总结-JavaWeb.md"}'),l={name:"blogs/面试/Java面试题总结-JavaWeb.md"};function n(r,s,p,h,o,k){return a(),i("div",null,s[0]||(s[0]=[t(`<p>[toc]</p><h1 id="java面试题总结-javaweb" tabindex="-1">Java面试题总结-JavaWeb <a class="header-anchor" href="#java面试题总结-javaweb" aria-label="Permalink to &quot;Java面试题总结-JavaWeb&quot;">​</a></h1><h2 id="servlet" tabindex="-1">Servlet <a class="header-anchor" href="#servlet" aria-label="Permalink to &quot;Servlet&quot;">​</a></h2><p>servlet是java定义的一套处理网络请求的规范。用于交互式地浏览和修改数据，生成Web内容 其中最主要的是两个生命周期方法init(),destroy(),还有一个处理请求的service().</p><blockquote><p>web运行过程主要有：（1）客户端发送请求到服务器端（2）服务器将请求信息发送至Servlet （3）Servlet生成响应内容并将其传给服务器。（4）服务器将响应返回给客户端。</p></blockquote><p>servlet的生命周期</p><ol><li>客户端请求该Servlet;</li><li>加载Servlet类到内存</li><li>实例化并调用init（）方法初始化该Servlet；</li><li>service()(根据请求方法不同调用doGet（）或者doPost（），此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()；)</li><li>destroy（）销毁。</li></ol><h2 id="jsp和servlet有哪些相同点和不同点-他们之间的联系是什么" tabindex="-1">JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？ <a class="header-anchor" href="#jsp和servlet有哪些相同点和不同点-他们之间的联系是什么" aria-label="Permalink to &quot;JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？&quot;">​</a></h2><p>JSP本质上是Servlet的简易方式，所以的jsp都会翻译为一个继承servlet的类。 Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。JSP侧重于视图，Servlet主要用于控制逻辑。</p><h2 id="如何利用servletcontext和servletconfig对象获得初始化参数" tabindex="-1">如何利用ServletContext和ServletConfig对象获得初始化参数 <a class="header-anchor" href="#如何利用servletcontext和servletconfig对象获得初始化参数" aria-label="Permalink to &quot;如何利用ServletContext和ServletConfig对象获得初始化参数&quot;">​</a></h2><p>String psw = config.getInitParameter(&quot;psw&quot;); ServletContext ss = config.getServletContext(); String ppp = ss.getInitParameter(&quot;name&quot;);</p><h2 id="描述forward-和redirect的区别" tabindex="-1">描述forward 和redirect的区别 <a class="header-anchor" href="#描述forward-和redirect的区别" aria-label="Permalink to &quot;描述forward 和redirect的区别&quot;">​</a></h2><p>forward是服务器直接访问目标地址的URL，把那个URL的响应内容读取过来，然后把这些内容再发给浏览器，浏览器根本不知道服务器发送的内容是从哪儿来的，所以它的地址栏中还是原来的地址。</p><p>redirect就是服务端告诉浏览器重新去请求哪个地址，浏览器会重新进行请求，浏览器的地址栏会变成新的地址</p><p>若要跳转到一个其他服务器上的资源，要用sendRedirect()方法</p><h2 id="servlet是什么-说出servlet的生命周期" tabindex="-1">Servlet是什么？说出Servlet的生命周期? <a class="header-anchor" href="#servlet是什么-说出servlet的生命周期" aria-label="Permalink to &quot;Servlet是什么？说出Servlet的生命周期?&quot;">​</a></h2><p>servlet使用java编写的服务器端程序（要实现servlet接口），其主要用于生成动态web内容，并且servlet运行在服务器中。</p><p>当Servlet被服务器实例化后，容器运行其init方法，请求到达时运行其service方法，service方法自动派遣运行与请求对应的doXXX方法（doGet，doPost）等，当服务器决定将实例销毁的时候调用其destroy方法。</p><h2 id="get和post请求-什么情况下调用doget-和什么情况dopost" tabindex="-1">get和post请求？什么情况下调用doget()和什么情况dopost? <a class="header-anchor" href="#get和post请求-什么情况下调用doget-和什么情况dopost" aria-label="Permalink to &quot;get和post请求？什么情况下调用doget()和什么情况dopost?&quot;">​</a></h2><p>get一般用于获取资源信息，post一般用于更新资源信息。 get请求提交的数据会在地址栏显示，post请求不会。 get请求传输的数据有限，因为地址栏有长度限制。 post请求的安全性高</p><p>当表单提交时method设置的 是 get 就调用 doget 方法，如果是 post 就调用 dopost方法。 http get方法请求一页面，调用doget() http post方法请求一页面，调用dopost()</p><h2 id="jsp内置对象" tabindex="-1">jsp内置对象？ <a class="header-anchor" href="#jsp内置对象" aria-label="Permalink to &quot;jsp内置对象？&quot;">​</a></h2><p>9个内置对象：</p><ol><li>request 用户端请求，此请求会包含来自GET/POST请求的参数。它包含了有关浏览器请求的信息，并且提供了几个用于获取cookie, header, 和session数据的有用的方法。</li><li>response response表示HttpServletResponse对象，并提供了几个用于设置送回 浏览器的响应的方法（如cookies,头信息等）</li><li>pageContext 用于方便存取各种范围的名字空间、servlet相关的对象的API，并且包装了通用的servlet相关功能的方法。</li><li>session 与请求有关的会话期。Session可以存贮用户的状态信息</li><li>application servlet 查找有关servlet引擎和servlet环境的信息</li><li>out 提供了几个方法使你能用于向浏览器回送输出结果。</li><li>config 该对象用于存取servlet实例的初始化参数。</li><li>page JSP网页本身,page表示从该页面产生的一个servlet实例</li><li>exception 针对错误网页，未捕捉的例外</li></ol><h2 id="session-和-cookie的区别" tabindex="-1">session 和 cookie的区别？ <a class="header-anchor" href="#session-和-cookie的区别" aria-label="Permalink to &quot;session 和 cookie的区别？&quot;">​</a></h2><p>两个都是会话跟踪技术，cookie是在客户端记录用户信息，而session是在服务器端记录用户信息。session 是依赖于cookie 的</p><p>cookie存储的数据存放在浏览器上的。session是存储在服务器上的。 cookie是不安全的，并且保存数据不超过4k</p><h2 id="mvc是什么" tabindex="-1">MVC是什么？ <a class="header-anchor" href="#mvc是什么" aria-label="Permalink to &quot;MVC是什么？&quot;">​</a></h2><p>&quot;Model&quot; 代表的是应用的业务逻辑（通过JavaBean，EJB组件实现） &quot;View&quot; 是应用的表示面（由JSP页面产生）， &quot;Controller&quot; 是提供应用的处理过程控制（一般是一个Servlet）</p><p>mvc模式就是把视图和逻辑分开来。通过这种设计模型把应用逻辑，处理过程和显示逻辑分成不同的组件实现。这些组件可以进行交互和重用。</p><h2 id="jsp中动态include与静态include的区别" tabindex="-1">JSP中动态include与静态include的区别？ <a class="header-anchor" href="#jsp中动态include与静态include的区别" aria-label="Permalink to &quot;JSP中动态include与静态include的区别？&quot;">​</a></h2><p>动态include: <code>&lt;jsp:include page=&quot;included.jsp&quot; flush=&quot;true&quot; /&gt;</code>它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数。 静态include: <code>&lt;%@ include file=&quot;included.htm&quot; %&gt; </code> 不会检查所含文件的变化，适用于包含静态页面</p><h2 id="tcp-ip在连接是有几次握手-释放是有几次握手" tabindex="-1">tcp/ip在连接是有几次握手？释放是有几次握手？ <a class="header-anchor" href="#tcp-ip在连接是有几次握手-释放是有几次握手" aria-label="Permalink to &quot;tcp/ip在连接是有几次握手？释放是有几次握手？&quot;">​</a></h2><p>答：建立连接是2次,释放是3次。</p><h2 id="servlet的基本架构" tabindex="-1">Servlet的基本架构 <a class="header-anchor" href="#servlet的基本架构" aria-label="Permalink to &quot;Servlet的基本架构&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServletName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ServletException, IOException { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ServletException, IOException { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	} </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="jsp有哪些动作-作用分别是什么" tabindex="-1">jsp有哪些动作?作用分别是什么? <a class="header-anchor" href="#jsp有哪些动作-作用分别是什么" aria-label="Permalink to &quot;jsp有哪些动作?作用分别是什么?&quot;">​</a></h2><p>答:JSP共有以下6种基本动作 jsp:include：在页面被请求的时候引入一个文件。 jsp:useBean：寻找或者实例化一个JavaBean。 jsp:setProperty：设置JavaBean的属性。 jsp:getProperty：输出某个JavaBean的属性。 jsp:forward：把请求转到一个新的页面。 jsp:plugin：根据浏览器类型为Java插件生成OBJECT或EMBED标记</p><h2 id="如何现实servlet的单线程模式" tabindex="-1">如何现实servlet的单线程模式? <a class="header-anchor" href="#如何现实servlet的单线程模式" aria-label="Permalink to &quot;如何现实servlet的单线程模式?&quot;">​</a></h2><p>&lt;%@ page isThreadSafe=&quot;false&quot;%&gt;</p><h2 id="request对象的主要方法" tabindex="-1">Request对象的主要方法： <a class="header-anchor" href="#request对象的主要方法" aria-label="Permalink to &quot;Request对象的主要方法：&quot;">​</a></h2><p>setAttribute(String name,Object)：设置名字为name的request的参数值 getAttribute(String name)：返回由name指定的属性值 getAttributeNames()：返回request对象所有属性的名字集合，结果是一个枚举的实例 getCookies()：返回客户端的所有Cookie对象，结果是一个Cookie数组 getCharacterEncoding()：返回请求中的字符编码方式 getContentLength()：返回请求的Body的长度 getHeader(String name)：获得HTTP协议定义的文件头信息 getHeaders(String name)：返回指定名字的request Header的所有值，结果是一个枚举的实例</p><h2 id="j2ee是技术还是平台还是框架" tabindex="-1">J2EE是技术还是平台还是框架？ <a class="header-anchor" href="#j2ee是技术还是平台还是框架" aria-label="Permalink to &quot;J2EE是技术还是平台还是框架？&quot;">​</a></h2><p>J2EE本身是一个标准，一个为企业分布式应用的开发提供的标准平台。 J2EE也是一个框架，包括JDBC、JNDI、RMI、JMS、EJB、JTA等技术。</p><h2 id="我们在web应用开发过程中经常遇到输出某种编码的字符-如iso8859-1等-如何输出一个某种编码的字符串" tabindex="-1">我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？ <a class="header-anchor" href="#我们在web应用开发过程中经常遇到输出某种编码的字符-如iso8859-1等-如何输出一个某种编码的字符串" aria-label="Permalink to &quot;我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String str) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String tempStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      tempStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ISO-8859-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GBK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      tempStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tempStr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      System.err.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tempStr;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><h2 id="servlet执行时一般实现哪几个方法" tabindex="-1">Servlet执行时一般实现哪几个方法？ <a class="header-anchor" href="#servlet执行时一般实现哪几个方法" aria-label="Permalink to &quot;Servlet执行时一般实现哪几个方法？&quot;">​</a></h2><p>public void init(ServletConfig config) public ServletConfig getServletConfig() public String getServletInfo() public void service(ServletRequest request,ServletResponse response) public void destroy()</p>`,48)]))}const c=e(l,[["render",n]]);export{E as __pageData,c as default};
