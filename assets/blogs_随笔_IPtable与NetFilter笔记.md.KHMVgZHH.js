import{_ as i,c as a,o as n,ak as l}from"./chunks/framework.CmzJUe0_.js";const p="/assets/suibi_20230729104832.CcKKTlin.png",t="/assets/suibi_20230729142153.3TaV0At4.png",h="/assets/suibi_20230729144149.lCSBQV9I.png",e="/assets/suibi_20230729112819.B6cGllfb.png",E=JSON.parse('{"title":"IPtable与NetFilter笔记","description":"","frontmatter":{"title":"IPtable与NetFilter笔记","date":"2023-07-24T00:00:00.000Z","sidebar":"auto","categories":["随笔"]},"headers":[],"relativePath":"blogs/随笔/IPtable与NetFilter笔记.md","filePath":"blogs/随笔/IPtable与NetFilter笔记.md"}'),k={name:"blogs/随笔/IPtable与NetFilter笔记.md"};function F(r,s,d,g,o,c){return n(),a("div",null,s[0]||(s[0]=[l('<p>[toc]</p><h1 id="iptable与netfilter笔记" tabindex="-1">IPtable与NetFilter笔记 <a class="header-anchor" href="#iptable与netfilter笔记" aria-label="Permalink to &quot;IPtable与NetFilter笔记&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><blockquote><p>什么是NetFilter？</p></blockquote><p>netfilter是一个工作在 Linux 内核的网络数据包处理框架。它作为一个通用的、抽象的框架，netfilter在整个网络流程的若干位置上放置了一些检测点（HOOK），而在每个检测点上用一些处理函数来进行处理。</p><p>netfilter也提供一整套的hook函数的管理机制，使得诸如数据包过滤、网络地址转换(NAT)和基于协议类型的连接跟踪成为了可能。</p><blockquote><p>什么是IPtables？</p></blockquote><p>IPtables 是Linux系统集成的一个 IP 信息包过滤系统。</p><p>防火墙在做数据包过滤时，有一套遵循和组成的规则，这些规则存储在 Linux 内核中的数据包过滤表中。而IPtables 可以在数据包过滤表上添加、编辑和移除规则。</p><p>简而言之，iptables的主要功能是实现对网络数据包进出设备及转发的控制。当数据包需要进入设备、从设备中流出或者经该设备转发时，都可以使用iptables进行控制。</p><blockquote><p>NetFilter与IPtables的关系</p></blockquote><p>IPtable和NetFilter共同组成了一个防火墙系统，iptables只是Linux防火墙的命令行管理工具，也可以说是一个客户端，netfilter是防火墙框架，真正实现防火墙功能的是 netfilter，它是Linux内核中的一部分。这两部分共同组成了包过滤防火墙，可以实现完成封包过滤、封包重定向和网络地址转换（NAT）等功能。</p><p>简而言之，NetFilter是服务端，IPtables是客户端。二者共同组成一个防火墙系统。我们可以通过IPtables来操控NetFilter。</p><p>如图所示 <img src="'+p+'" alt="suibi_20230729104832.png"></p><h2 id="iptables" tabindex="-1">IPtables <a class="header-anchor" href="#iptables" aria-label="Permalink to &quot;IPtables&quot;">​</a></h2><p>iptables 由表（table）、链（chain）和规则（rule）组成，其中表包含链，链包含规则。</p><h3 id="链" tabindex="-1">链 <a class="header-anchor" href="#链" aria-label="Permalink to &quot;链&quot;">​</a></h3><p>一个链由多个规则组成。当数据报文进入到链之后，首先匹配链的第一条规则，如果第一条规则通过则访问，如果不匹配，则接着向下匹配，如果链中的所有规则都不匹配，那么就按照链的默认规则处理数据报文的动作。</p><p><img src="'+t+'" alt="suibi_20230729142153.png"></p><p><span style="color:red;">注意：规则的顺序很重要，重要的规则需要放到前面，让其先匹配。</span></p><blockquote><p>链的种类</p></blockquote><p>Iptables有五种不同的链，如下所示。</p><ul><li>PREROUTING, 路由前，处理刚到达本机并在路由转发前的数据包。</li><li>POSTROUTING, 路由后，处理即将离开本机的数据包。</li><li>INPUT, 数据包流的入口，处理来自外部的数据。</li><li>OUTPUT, 数据包流的出口，处理向外发送的数据。</li><li>FORWARD, 数转发。通过路由表后发现目的地址非本机，则匹配该链中的规则。</li></ul><blockquote><p>数据报文在链中的流向</p></blockquote><ol><li>当数据报文要流进本机的某个服务程序时，数据报文要在本机中经过的链</li></ol><p>PREROUTING -》INPUT -》目标程序</p><ol start="2"><li>当数据报文从本机的服务程序流出时，数据报文要在本机中经过的链</li></ol><p>源程序 -》OUTPUT -》POSTROUTING</p><ol start="3"><li>当数据报文经过本机，转发向其他主机时，数据报文要在本机中经过的链</li></ol><p>PREROUTING -》FORWARD -》POSTROUTING</p><p>完整如图所示 <img src="'+h+'" alt="suibi_20230729144149.png"></p><h3 id="表" tabindex="-1">表 <a class="header-anchor" href="#表" aria-label="Permalink to &quot;表&quot;">​</a></h3><p>在一个链中会有很多的防火墙规则，我们将具有同一种类型的规则组成一个集合，这个集合就叫做表。</p><p>iptables 具有四个表：filter, nat, mangle, raw。</p><ul><li>filter 表：iptables 的默认表。负责过滤功能、防火墙，也就是由 filter 表来控制数据包是否允许进出及转发。filter 表具可以管理的链路有input, forward, output。</li><li>nat 表：nat 是 network address translation 的简称，具备网络地址转换的功能。nat 表用于控制数据包中地址转换。nat 表可以管理的链路有prerouting, output, postrouting（CentOS 7 中还包含 INPUT，但是在 CentOS 6 中没有）。</li><li>mangle 表：用于处理数据包，具备拆解报文、修改报文以及重新封装的功能。mangle 表可以管理的链路有prerouting, input, forward, output, postrouting</li><li>raw 表：用于处理异常。raw 表可以管理的链路有prerouting, output。</li></ul><blockquote><p>表与链的关系</p></blockquote><p><img src="'+e+`" alt="suibi_20230729112819.png"></p><h3 id="iptables-命令" tabindex="-1">iptables 命令 <a class="header-anchor" href="#iptables-命令" aria-label="Permalink to &quot;iptables 命令&quot;">​</a></h3><p>iptables 命令格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>iptables [-t 表名] 命令选项 [链名] [匹配条件] [-j 处理动作或跳转]</span></span></code></pre></div><p>表名：若无显示设置表名，则默认为filter表。</p><p>命令选项</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-L</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 列出一个或所有链的规则</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 显示详细信息，包括每条规则的匹配句数量和匹配字节数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 在v的基础上，禁止自动换算单位（K,M）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 只显示ip地址和端口号，不显示域名和服务名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 插入到防火墙第一条生效</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 添加链是添加到最后一条</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 删除指定链中的某一条规则，按规则序号或内容确定要删除的规则</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 清空指定链中的所有规则，默认清空表中所有链的内容</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 删除指定表中用户自定义的规则链</span></span></code></pre></div><p>匹配条件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 入站请求interface（网卡）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 出站请求interface（网卡）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 入站源地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 目标地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 指定规则协议，如tcp,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp,icmp等，可以使用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 来指定所有协议</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--dport</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 目的端口，数据包的目的（dport）地址是80，就是要访问我本地的80端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--sport</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 来源端口</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据包的来源端口是（sport）80，就是对方的数据包是80端口发送过来的。</span></span></code></pre></div><p>动作</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ACCEPT：允许数据包通过。</span></span>
<span class="line"><span>DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</span></span>
<span class="line"><span>REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。（一般不使用REJECT(拒绝)行为，REJECT会带来安全隐患。）</span></span>
<span class="line"><span>SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</span></span>
<span class="line"><span>MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上。</span></span>
<span class="line"><span>DNAT：目标地址转换。</span></span>
<span class="line"><span>REDIRECT：在本机做端口映射。</span></span>
<span class="line"><span>LOG：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</span></span></code></pre></div><blockquote><p>例子</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 查看 filter表的所有规则</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iptables -t filter -L</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ACCEPT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     prot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FORWARD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ACCEPT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     prot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               destination</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ACCEPT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  anywhere</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             anywhere</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">             ctstate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RELATED,ESTABLISHED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OUTPUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ACCEPT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     prot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               destination</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 只查看 filter 表中 INPUT 链的规则</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iptables -t filter -L INPUT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ACCEPT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     prot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               destination</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 只查看 filter 表中 INPUT 链的规则，-v显示出详情信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iptables -t filter -vL INPUT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (policy </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ACCEPT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1509K</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packets,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 851M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pkts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     prot</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> opt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               destination</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 拒绝 host2 上的所有报文访问本机</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 当报文的源地址为 host2 时，报文则被 DROP。命令如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iptables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> filter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> DROP</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -s 指明源地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -I 插入，在链的首部插入规则</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -j，指明当匹配条件满足时，所对应的动作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DROP 丢弃数据包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 接受来自host2的数据报文访问本机</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iptables</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> INPUT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ACCEPT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -A 追加，在链的尾部插入规则</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ACCEPT 接受数据包</span></span></code></pre></div>`,49)]))}const y=i(k,[["render",F]]);export{E as __pageData,y as default};
